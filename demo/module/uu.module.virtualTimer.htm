<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title>uupaa.js - uu.module.virtualTimer test</title>
<script type="text/javascript" src="../../uupaa.js"></script>
<style type="text/css">
html, body {
  background-color: black; color: white;
}
a, b { color: lightblue }
.cube {
  position: absolute; top: 0; left: 0;
  width: 50px; height: 50px;
  background-color: white;
  opacity: 0.3;
  filter: alpha(opacity=30);
}
</style>
</head>
<body>
<a href="../../README.htm#demo">README</a> &gt; <a href="../../MODULE.htm#uu.module.virtualTimer">MODULE</a> &gt; uu.module.virtualTimer.htm<br />
<div id="cage"></div>

<h3>uu.module.virtualTimer - 仮想タイマー</h3>
<dl>
  <dt>精度</dt>
  <dd><p>仮想タイマーはsetIntervalと同じ精度です。setTimeoutは高負荷時に精度が落ちます。</p>
      <input type="button" value="カウントアップ開始/停止" onclick="countup()" />
      virtualTimer:  <span id="result2">1</span>, 
      setInterval:  <span id="result3">1</span>, 
      setTimeout:  <span id="result4">1</span>
  </dd>
  <dt>大量のオブジェクトを操作</dt>
  <dd><p>画面上に100 又は 400個のオブジェクトを登場させ、タイマーで動かします。<br />
         setIntervalとsetTimeoutは、100個または400個のタイマーオブジェクトを必要としますが、
         virtualTimerは全てを1個のタイマーで動かします。</p>
      virtualTimer: <input type="button" value="100" onclick="virtualTimer(100)" /> |
      <input type="button" value="400" onclick="virtualTimer(400)" />, 
      setInterval: <input type="button" value="100" onclick="window_setInterval(100)" /> |
      <input type="button" value="400" onclick="window_setInterval(400)" />, 
      setTimeout: <input type="button" value="100" onclick="window_setTimeout(100)" /> |
      <input type="button" value="400" onclick="window_setTimeout(400)" />
  </dd>
  <dt>高機能, 低負荷, 高速</dt>
  <dd><p>setIntervalやsetTimeoutで多数のタイマーを同時に使用すると、かなり低速になる場合がありますが、
      virtualTimerはCPU負荷も低く遅延も少なめです。</p>
      <p>virtualTimerは、インターバル間隔を自由に変化させることが可能です。
      以下は、一定時間(0ms, 100ms, 200ms, 300ms)で"Hello"を追加し、10ms毎にドット(".")を追加する例です。</p>
      <p id="result1"></p>
      以下の機能もあります。<br />
      virtualTimer.suspend() - 一時停止, 一括停止<br />
      virtualTimer.resume() - 再開, 再起動<br />
      virtualTimer.set.loop() - ループ回数の変更<br />
      virtualTimer.diet() - ガベージコレクション(タイマーを止めずにメモリをお掃除)
  </dd>
</dl>

<script type="text/javascript">
var vtm10 = new uu.module.virtualTimer(10); // 仮想タイマー生成
var vp = { x: 0, y: 0, w: 800, h: 600 }; // ブラウザの表示領域
var cubes = [];

function boot() {
  var fn1 = function() { uu.id("result1").innerText += "Hello"; };
  var delay = function(n) { return n * 100; }; // create delay value
  uu.vtmHighSpeed.set(fn1, delay, 4, "demo");

  var fn2 = function() { uu.id("result1").innerText += "."; };
  uu.vtmHighSpeed.set(fn2, 10, 100); // 10msごとに、200回ドットを打ったら停止

  vp = uu.viewport.rect();
}

var countStart = false, vtid = 0, itid = 0, toid = 0;
var counter = [1, 1, 1];

function countup() {
  if (!countStart) {
    counter = [1, 1, 1];
    countStart = true;
    var fn3 = function() { uu.id("result2").innerText = counter[0]++; };
    var fn4 = function() { uu.id("result3").innerText = counter[1]++; };
    var fn5 = function() { uu.id("result4").innerText = counter[2]++; toid = setTimeout(arguments.callee, 10); };
    vtid = uu.vtmHighSpeed.set(fn3, 10, 1000); // 1000カウントで停止
    itid = setInterval(fn4, 10);
    toid = setTimeout(fn5, 10);
  } else {
    uu.vtmHighSpeed.suspend(vtid);
    if (itid) { clearInterval(itid); }
    if (toid) { clearTimeout(toid); }
    countStart = false;
  }
}

function virtualTimer(size) {
  var i = 0, p = uu.id("cage");
  deleteCube(cubes);

  for (; i < size; ++i) { cubes.push(createCube(p)); }
  cubes.forEach(function(v) {
    v.vtid = vtm10.set(function() { move(v); }, 10);
  });
}
function window_setInterval(size) {
  var i = 0, p = uu.id("cage");
  deleteCube(cubes);

  for (; i < size; ++i) { cubes.push(createCube(p)); }
  cubes.forEach(function(v) {
    v.itid = setInterval(function() { move(v); }, 10);
  });
}
function window_setTimeout(size) {
  var i = 0, p = uu.id("cage");
  deleteCube(cubes);

  for (; i < size; ++i) { cubes.push(createCube(p)); }
  cubes.forEach(function(v) {
    v.toid = setTimeout(function() {
      move(v);
      v.toid = setTimeout(arguments.callee, 10);
    }, 10);
  });
}
function createCube(parent) {
  var e = parent.appendChild(document.createElement("div"));
  uu.klass.add(e, "cube");
  e.dx = Math.round(Math.random() * 100) / 10;
  e.dy = Math.round(Math.random() * 100) / 10;
//uu.css.set(e, { backgroundColor: (Math.round(Math.random() * 165813750) / 10).toRGBString(),
  uu.css.set(e, { backgroundColor: toRGBString(Math.round(Math.random() * 165813750) / 10) });
  uu.css.setRect(e, { x: 0, y: 0 });
  return e;
}
function toRGBString(num) {
  var v = num.valueOf(), rv = [(v >> 16) & 0xff, (v >> 8) & 0xff, v & 0xff];
  return "rgb(" + rv.join(",") + ")";
}

function deleteCube(cubes) {
  uu.id("cage").innerHTML = "";
  cubes.forEach(function(v) {
    if ("vtid" in v) {
      vtm10.suspend(v.vtid);
    } else if ("itid" in v) {
      clearInterval(v.itid);
    } else if ("toid" in v) {
      clearTimeout(v.toid);
    }
  });
  vtm10.diet();
}

function move(elm) {
  var tx = parseFloat(elm.style.left) + elm.dx;
  var ty = parseFloat(elm.style.top)  + elm.dy;
  if (tx < 0 || tx + 70 > vp.w) { elm.dx = -elm.dx; } // 70 = 50px + 20px
  if (ty < 0 || ty + 70 > vp.h) { elm.dy = -elm.dy; } // 70 = 50px + 20px
  uu.css.setRect(elm, { x: tx, y: ty });
}

uu.ready(function() {
  uu.delay(boot, 1000);
}, "W");

</script>
</body>
</html>
