<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title>uupaa.js - Selector</title>
<style type="text/css">
body {
  background-color: black; color: whitesmoke;
  font-family:'メイリオ',Meiryo,'ヒラギノ角ゴ Pro W3','Hiragino Kaku Gothic Pro','ＭＳ Ｐゴシック',sans-serif;
  margin: 2em; line-height: 1.5;
}
a[href] { color: lightblue }
b { color: gold }
pre { padding: 1em; border: 1px dashed navy; overflow: auto; color: ghostwhite; }
dt { margin-top: 1em; font-weight: bold; color: lightblue }
i {}
table, tr, th, td { border: 1px solid gray; }
</style>
</head>
<body>
<p>
   | <a href="http://code.google.com/p/uupaa-js/">Project Home(Google Code)</a>
   | <a href="./README.htm#demo">DEMO</a>
   | <a href="./CHANGELOG.htm">ChangeLog</a>
   | <a href="./LICENSE.htm">License</a> |<br />
   | <a href="./DOCUMENT.htm">Document</a>
   | <a href="./SELECTOR.htm">Selector</a>
   | <a href="./MODULE.htm">Module</a>
   | <a href="./GLOSSARY.htm">Glossary</a>
   | <a href="./doc/reference/index.html">API Reference</a>
   |
</p>
<a href="./README.htm">README</a> &gt; SELECTOR<br />
<hr />
<ul>
  <li><a href="#selector">セレクタ</a> - Selector</li>
  <ul>
    <li><a href="#id-selector">IDセレクタ</a> - ID Selector - uu.id</li>
    <li><a href="#element-selector">タグ(要素)セレクタ</a> - Tag/Element Selector - uu.tag</li>
    <li><a href="#class-selector">クラスセレクタ</a> - Class Selector - uu.klass</li>
    <li><a href="#attr-selector">属性セレクタ</a> - Attribute Selector - uu.attr</li>
    <li><a href="#xpath-selector">XPathセレクタ</a> - XPath Selector - uu.xpath - XPathライブラリが必要</li>
    <li><a href="#css-selector">CSSセレクタ</a> - CSS Selector - uu.css - XPathライブラリが必要</li>
    <li><a href="#pseudo-selector">擬似セレクタ</a> - CSS Pseudo Selector - uu.css.pseudo</li>
    <li><a href="#css123-list">uu.css で使用可能なCSSセレクタの一覧</a>, <a href="#jquery-selector">jQuery独自セレクタ</a> - List of the available CSS selectors</li>
    <li><a href="#pseudo-list">uu.css.pseudo で使用可能なCSSセレクタの一覧</a> - List of the available pseudo selectors</li>
    <li><a href="#uu.css.toXPath">uu.css.toXPath</a> - CSS3セレクタをXPathに変換 - Convert CSS3 selector into XPath</li>
  </ul>
</ul>
<hr />
<h2>XPathライブラリへの依存について</h2>
<p>uupaa.jsは多様なセレクタで要素を選択することが可能です。</p>
<p><a href="#xpath-selector">uu.xpath</a> と <a href="#css-selector">uu.css</a> は、内部でXPath(document.evaluate)を使用しているため、
   XPathを標準でサポートしていないブラウザ(IE等)では、XPathをエミュレーションする外部ライブラリ(JavaScript-XPath等)が必要になります。</p>
<p>XPathライブラリが存在しない環境で、XPathに依存している関数(<a href="#xpath-selector">uu.xpath</a>, <a href="#css-selector">uu.css</a>)を呼び出すと例外が発生します。
   <br />他のセレクタを組み合わせることで問題を回避できる場合があります(<a href="http://d.hatena.ne.jp/uupaa/20080420/1208636929">単純なセレクタの組み合わせは、思いのほか高速です</a>)。</p>
<table>
<tr><th>用例</th><th>XPath</th><th>他のセレクタでの表現</th></tr>
<tr><td>div要素を列挙</td><td>uu.xpath('//div')</td><td>uu.tags("div")</td></tr>
<tr><td>class="piyo"のdiv要素を列挙</td><td>uu.xpath('//div[@class="piyo"]')</td><td>uu.klass("piyo", 0, "div")<br />uu.attr('div[@class="piyo"]')</td></tr>
<tr><td>classが"piyo"を含む要素を列挙</td><td>uu.xpath('//*[contains(@class,"piyo")]')</td><td>uu.klass("piyo")<br />uu.attr('*[@class~="piyo"]')</td></tr>
<tr><td>id属性の値を列挙</td><td>uu.xpath.snap('//*[@id]', 0, "id");</td><td>uu.forEach(uu.attr("*[@id]"), function(v) {<br />　v.id;<br />})</td></tr>
<tr><td>title="hoge"で<br />class="piyo"な要素を列挙</td><td>uu.xpath('//*[@title="hoge" and @class="piyo"]');</td><td>uu.forEach(uu.attr('*[@title="hoge"]'), function(v) {<br />　uu.klass.has("piyo");<br />})</td></tr>
</table>

<h2>uupaa.js が サポートしているセレクタ</h2>
<dl>
<!-- -->
  <dt><a name="id-selector">IDセレクタ - ID Selector</a></li>
  <dd>
    <p>uu.id(<i>id</i>, <i>noCache</i> = false) は <i>id</i> と一致するid属性を持つ要素を選択します。</p>
    <pre>
 @param String id         - IDを指定します。
 @param Boolean [noCache] - キャッシュを使わずに検索する場合にtrueを指定します。
                            falseを指定するとキャッシュを使用する可能性があり、
                            その要素が既に存在しなかったり、IDが別の要素で使いまわされている可能性もあります。
                            デフォルトはfalseです。
 @return Element/null  - 検索成功で要素の参照を返します。失敗でnullを返します。
    </pre>
    <p>一度検索を行ったIDをキャッシュし、次回以降はキャッシュを検索するため、非常に高速に動作します。<br />
       同じIDを異なる要素で使いまわす場合は、<i>noCache</i>にtrueを指定し、キャッシュを使わずに検索を行ってください。</p>
    <a href="demo/selector/uu.id.htm">Run</a>
    <pre class="eg">
&lt;div&gt;
  &lt;div id="ID1"&gt;hoge&lt;/div&gt;
  &lt;div id="<b>ID2</b>"&gt;huga&lt;/div&gt;
&lt;/div&gt;
&lt;script&gt;
    uu.log(<b>uu.id</b>("ID2").innerText); // "huga"
&lt;/script&gt;
    </pre>
  </dd>
<!-- -->
  <dt><a name="element-selector">タグ(要素)セレクタ</a> - Tag/Element Selector</li>
  <dd>
    <p>uu.tag(<i>tagName</i>, <i>context</i> = document) は
       <i>context</i> 以下の <i>tagName</i> と一致する要素を選択します。</p>
    <p>ワイルドカード("*")を指定すると全てのタグを検索します。</p>
    <pre>
 @param String  tagName   - タグ名を指定します。
                            ワイルドカード("*")を指定すると、全てのタグを検索します。
 @param Element [context] - 検索開始位置(コンテキスト)を指定します。デフォルトはdocumentです。
 @return NodeList/ElementArray - 検索成功でNodeListかElementArray( [element, ...] )を返します。
                            失敗で空のNodeListか空のElementArray( [] )を返します。
                            NodeListまたはElementArrayを返すため、uu.tag().forEach() ではなく、
                            uu.forEach(uu.tag())を使用してください。
    </pre>
    <a href="demo/selector/uu.tag.htm">Run</a>
    <pre class="eg">
&lt;div&gt;
  <b>&lt;p&gt;</b>hoge<b>&lt;/p&gt;</b>
  <b>&lt;p&gt;</b>huga<b>&lt;/p&gt;</b>
&lt;/div&gt;
&lt;script&gt;
    uu.forEach(<b>uu.tag</b>("p"), function(v) {
      uu.log(v.innerText); // "hoge", "huga"
    });
&lt;/script&gt;
    </pre>
    <p>uu.tag("script", document.head) とすると、 head要素以下のscript要素を列挙します。</p>
  </dd>
<!-- -->
  <dt><a name="class-selector">クラスセレクタ</a> - Class Selector</li>
  <dd>
    <p>uu.klass(<i>className</i>, <i>context</i> = document, <i>tag</i> = undefined) は
       <i>context</i> 以下の <i>className</i> と一致するclass属性の値を持つ要素を選択します。</p>
    <pre>
 @param String  className - クラス名を指定します。
 @param Element [context] - 検索開始位置(コンテキスト)を指定します。デフォルトはdocumentです(全要素の検索)。
 @param String  [tag]     - 指定したtagのみ検索対象とする場合に指定します。
                            この引数は、getElementsByClassName()が
                            実装されていないブラウザ(Firefox2,IE6/7/8,Opera9.2x)で速度を稼ぎたい場合に指定します。
 @return NodeList/ElementArray - 検索成功でNodeListかElementArray( [element, ...] )を返します。
                            失敗で空のNodeListか空のElementArray( [] )を返します。
                            NodeListまたはElementArrayを返すため、uu.klass().forEach() ではなく、
                            uu.forEach(uu.klass())を使用してください。
    </pre>
    <a href="demo/selector/uu.klass.htm">Run</a>
    <pre class="eg">
&lt;div&gt;
  &lt;div class="death <b>note</b>"&gt;hoge&lt;/div&gt;
  &lt;div class="<b>note</b>"&gt;huga&lt;/div&gt;
&lt;/div&gt;
&lt;script&gt;
    uu.forEach(<b>uu.klass</b>("note"), function(v) {
      uu.log(v.innerText); // "hoge", "huga"
    });
&lt;/script&gt;
    </pre>
  </dd>
<!-- -->
  <dt><a name="attr-selector">属性セレクタ</a> - Attribute Selector</li>
  <dd>
    <p>uu.attr(<i>selector</i>, <i>context</i> = document) は
       <i>context</i> 以下の <i>selector</i> と一致する属性を持つ要素を選択します。</p>
    <p>uu.attrは属性セレクタを専門に処理するため、より包括的なセレクタを処理する、uu.cssよりも高速です。</p>
    <p>XPath式の指定方法(@あり)以外にも、CSS式の指定方法(@なし)や、[] そのものを省略したセレクタ(SyntaxSugar)が使用できます。</p>
    <pre>
 @param String  selector  - セレクタを指定します。
 @param Element [context] - 検索開始位置(コンテキスト)を指定します。デフォルトはdocumentです。
 @return ElementArray - 検索成功でElementArray( [element, ...] )を返します。失敗で空のElementArray( [] )を返します。
    </pre>

    <table>
    <tr><th><i>selector</i></th><th><i>selector</i><br />(<a href="./GLOSSARY.htm#SyntaxSugar">SyntaxSugar</a>)</th><th>戻り値(Return)</th><th>内容</th></tr>
    <tr><td>*[@A]        </td><td>A</td><td>Element(s)</td><td>属性Aを持つ全要素と一致します。属性の値は問いません。</td></tr>
    <tr><td>*[@A="V"]    </td><td>A="V"</td><td>Element(s)</td><td>属性Aの値がVの全要素と一致します。</td></tr>
    <tr><td>*[@A~="V"]   </td><td>A~="V"</td><td>Element(s)</td><td>属性Aの値がスペース区切りのリストで、リストがVを含む全要素と一致します。<br />
                                                                    class属性を選択するなら <a href="#class-selector">uu.klass</a> がより高速です。</td></tr>
    <tr><td>*[@A^="V"]   </td><td>A^="V"</td><td>Element(s)</td><td>属性Aの値がVで始まる全要素と一致します。</td></tr>
    <tr><td>*[@A$="V"]   </td><td>A$="V"</td><td>Element(s)</td><td>属性Aの値がVで終わる全要素と一致します。</td></tr>
    <tr><td>*[@A*="V"]   </td><td>A*="V"</td><td>Element(s)</td><td>属性Aの値がVを含む全要素と一致します。</td></tr>
    <tr><td>E[@A]        </td><td>E[A]</td><td>Element(s)</td><td>属性Aを持つ全ての要素Eと一致します。属性の値は問いません。</td></tr>
    <tr><td>E[@A="V"]    </td><td>E[A="V"]</td><td>Element(s)</td><td>属性Aの値がVの全ての要素Eと一致します。</td></tr>
    <tr><td>E[@A~="V"]   </td><td>E[A~="V"]</td><td>Element(s)</td><td>属性Aの値がスペース区切りのリストで、リストがVを含む全ての要素Eと一致します。<br />
                                                    class属性を選択するなら <a href="#class-selector">uu.klass</a> がより高速です。</td></tr>
    <tr><td>E[@A^="V"]   </td><td>E[A^="V"]</td><td>Element(s)</td><td>属性Aの値がVで始まる全ての要素Eと一致します。</td></tr>
    <tr><td>E[@A$="V"]   </td><td>E[A$="V"]</td><td>Element(s)</td><td>属性Aの値がVで終わる全ての要素Eと一致します。</td></tr>
    <tr><td>E[@A*="V"]   </td><td>E[A*="V"]</td><td>Element(s)</td><td>属性Aの値がVを含む全ての要素Eと一致します。</td></tr>
    </table>
    <p>E には要素名(div や liなど)を指定します。
       Aには属性名(class や titleなど)を指定します。<br />
       属性名に"class"を指定すると、"className"が指定されたものとして扱います。</p>
    <p>属性値の比較はJavaScriptプロパティと、
       HTMLにインラインで記述されている独自の属性("orgattr"など)に対して安全です。
       <a href="http://d.hatena.ne.jp/uupaa/20080620">Webページ構築後にsetAttribute()で設定された値は安全ではありません</a>。</p>
    <a href="demo/selector/uu.attr.htm">Run</a>
    <pre class="eg">
&lt;div&gt;
  &lt;div <b>orgattr</b>="aa-<b>attr</b>"&gt;hoge&lt;/div&gt;
  &lt;p <b>orgattr</b>="bb-<b>attr</b>"&gt;huga&lt;/p&gt;
&lt;/div&gt;
&lt;script&gt;
    uu.forEach(<b>uu.attr</b>('p[@orgattr*="attr"]'), function(v) {
      uu.log(v.tagName); // "p"
    });
    uu.forEach(<b>uu.attr</b>('*[@orgattr$="attr"]'), function(v) {
      uu.log(v.innerText); // "hoge", "huga"
    });
    uu.forEach(<b>uu.attr</b>('orgattr$="attr"'), function(v) {
      uu.log(v.tagName); // "div", "p"
    });
    uu.forEach(<b>uu.attr</b>("orgattr"), function(v) {
      uu.log(v.innerText); // "hoge", "huga"
    });
&lt;/script&gt;
    </pre>
  </dd>
<!-- -->
  <dt><a name="xpath-selector">XPathセレクタ</a> - XPath Selector</li>
  <dd>
    <p>uu.xpath(<i>expr</i>, <i>context</i> = document) は
       <i>context</i> 以下の XPath式<i>expr</i>式に一致する要素を選択します。</p>
    <pre>
 @param String  expr      - XPathの評価式(ロケーションパス)を指定します。
 @param Element [context] - 検索開始位置(コンテキスト)を指定します。デフォルトはdocumentです。
                            コンテキストを指定した場合は、exprに"//"ではなく"./"で始まる文字列を指定します。
 @return Mix              - 評価結果を返します。評価に失敗するとnullを返します。
    </pre>
    <a href="demo/selector/uu.xpath.htm">Run</a>
    <pre class="eg">
&lt;div&gt;
  &lt;p&gt;hoge&lt;/p&gt;
  <b>&lt;p&gt;</b>huga<b>&lt;/p&gt;</b>
&lt;/div&gt;
&lt;script&gt;
    uu.forEach(<b>uu.xpath</b>("/html/body/div/p[2]"), function(v) {
      uu.log(v.innerText); // "huga"
    });
&lt;/script&gt;
    </pre>
<!-- -->
    <p>uu.xpath.snap(<i>expr</i>, <i>context</i> = document, <i>attr</i> = "", <i>sort</i> = true) は
       <i>context</i> 以下の XPath式<i>expr</i>に一致する要素のスナップショットを取得します。</p>
    <p><i>attr</i> を指定すると、一致する要素ではなく、一致する要素の属性値を取得します。</p>
    <pre>
 @param String  expr      - XPathの評価式(ロケーションパス)を指定します。
 @param Element [context] - 検索開始位置(コンテキスト)を指定します。デフォルトはdocumentです。
                            コンテキストを指定した場合は、exprに"//"ではなく"./"で始まる文字列を指定します。
 @param String  [attr]    - 取得する属性を指定します。デフォルトは空文字列です。
 @param Boolean [sort]    - ソートする場合にtrue,ソートしない場合にfalseを指定します。省略可能でデフォルトはtrueです。
 @return StringArray/ElementArray - attrを指定した場合は、列挙した要素の属性値だけからなるStringArray( ["string", ...] )を返します。
                            attrを指定しない場合は、ElementArray( [ element, ... ] )を返します。
                            返される値は、ある時点のスナップショットです(ライブではない)
                            存在しない属性名を指定した場合は空文字列("")を返します。
    </pre>
    <a href="demo/selector/uu.xpath.snap.htm">Run</a>
    <pre class="eg">
&lt;div&gt;
  &lt;p id="<b>hoge</b>"&gt;hoge&lt;/p&gt;
  &lt;p id="<b>huga</b>"&gt;huga&lt;/p&gt;
&lt;/div&gt;
&lt;script&gt;
    uu.forEach(<b>uu.xpath.snap</b>("//p[@id]", document, "id"), function(v) {
      uu.log(v); // "hoge", "huga"
    });
&lt;/script&gt;
    </pre>
  </dd>
<!-- -->
  <dt><a name="css-selector">CSSセレクタ</a> - CSS Selector</li>
  <dd>
    <p>uu.css(<i>css3selector</i>, <i>context</i> = undefined) は
       <i>context</i> 以下の <i>css3selector</i> に一致する要素を選択します。<br />
       <a href="#css123-list">使用可能なCSSセレクタの一覧</a>をご覧ください。</a></p>
    </p>
    <pre>
 @param String css3selector - CSS3セレクタを指定します。
 @return ElementArray       - 検索成功でElementArray( [element, ...] )を返します。失敗で空のElementArray( [] )を返します。
 @throws TypeError "uu.css(...)" 使用できないセレクタを指定したか、不正なXPathに変換された
    </pre>
    <p>関数内部では、CSS3セレクタをXPathに変換し実行します。</p>
    <a href="demo/selector/uu.css.htm">Run</a> |
    <a href="demo/selector/css.htm">CSSセレクタのテスト</a>
    <pre class="eg">
&lt;div&gt;
  &lt;p&gt;hoge&lt;/p&gt;
  <b>&lt;p&gt;</b>huga<b>&lt;/p&gt;</b>
&lt;/div&gt;
&lt;script&gt;
    uu.forEach(<b>uu.css</b>("p:nth-last-of-type(1)"), function(v) {
      uu.log(v.innerText); // "huga"
    });
&lt;/script&gt;
    </pre>
  </dd>
<!-- -->
  <dt><a name="pseudo-selector">擬似セレクタ</a> - uu.css.pseudo</li>
  <dd>
    <p>uu.css.pseudo(<i>pseudoSelector</i>, <i>context</i> = document, <i>tag</i> = undefined) は
       <i>context</i> 以下の <i>pseudoSelector</i> と一致する要素を選択します。<br />
       <a href="#pseudo-list">使用可能なCSSセレクタの一覧</a>をご覧ください。</a></p>
    </p>
    <pre>
 @param String pseudoSelector - 擬似セレクタを指定します。
 @param Element [context]     - 検索開始位置(コンテキスト)を指定します。デフォルトはdocumentです。
 @param String  [tag]         - 指定したtagのみ検索対象とする場合に指定します。
                                省略すると各擬似セレクタのデフォルト(多くは"*")を使用します。
 @return ElementArray         - 検索成功でElementArray( [element, ...] )を返します。失敗で空のElementArray( [] )を返します。
    </pre>
    <p>属性値の比較はJavaScriptプロパティと、HTMLにインラインで記述されている独自の属性("orgattr"など)に対して安全です。<a href="http://d.hatena.ne.jp/uupaa/20080620">Webページ構築後にsetAttribute()で設定された値は安全ではありません</a>。</p>
    <a href="demo/selector/uu.css.pseudo.htm">Run</a> |
    <a href="demo/selector/selector.htm">擬似セレクタのテスト</a>
    <pre class="eg">
      var e = uu.id("checkbox1");
      e.checked = true;
      var rv = uu.css.pseudo(":checked"); // "checkbox1"

      // FirefoxとSafariでは、以下のコードは正しく機能しない場合があります。
      e.setAttribute("checked", "checked");
      var rv = uu.css.pseudo(":checked"); // "checkbox1"
    </pre>
  </dd>

  <dt><a name="css123-list">uu.css で使用可能なCSSセレクタの一覧 - List of the available CSS selectors</a></dt>
  <dd>
    <p><a href="#css-selector">uu.css</a>で指定可能なCSSセレクタの一覧です。
       一部の<a href="http://docs.jquery.com/Selectors">jQuery独自セレクタ</a>にも対応しています。</p>
    <table>
    <tr><th>CSS Selectors</th><th>代替<br />セレクタ</th><th>戻り値(Return)</th><th>内容</th></tr>
    <tr><td>*           </td><td>uu.tag("*")</td><td>Element(s)</td><td>全ての要素と一致します。<br />- Universal selector</td></tr>
    <tr><td>#id         </td><td>uu.id()</td><td>Element   </td><td>属性idが一致する要素と一致します。<br />- ID selectors</td></tr>
    <tr><td>.className  </td><td>uu.klass()</td><td>Element(s)</td><td>属性classと一致する要素と一致します。<br />- Class selectors</td></tr>
    <tr><td>E           </td><td>uu.tag(E)</td><td>Element(s)</td><td>全ての要素Eと一致します。<br />- Type selectors</td></tr>
    <tr><td>E, F, G     </td><td></td><td>Element(s)</td><td>複数のセレクタを一度に指定できます。<br />個々のセレクタの評価結果を纏めて返します。</td></tr>
    <tr><td>E F         </td><td>uu.tag(F, E)</td><td>Element(s)</td><td>要素Eの子孫の全ての要素Fと一致します。<br />- Descendant combinator</td></tr>
    <tr><td>E > F       </td><td>uu.tag(F, E) + childNodes</td><td>Element(s)</td><td>要素Eの子供の要素Fと一致します。<br />- Child combinator</td></tr>
    <tr><td>E + F       </td><td></td><td>Element   </td><td>要素EとFが兄弟で、要素Eと隣接する要素Fと一致します。<br />- Adjacent sibling combinator</td></tr>
    <tr><td>E ~ F       </td><td></td><td>Element(s)</td><td>要素EとFが兄弟で、要素Eの後に存在する要素Fと一致します。<br />- General sibling combinator</td></tr>
    <tr><td>E[A]        </td><td>uu.attr(E[@A])</td><td>Element(s)</td><td>属性Aを持つ全ての要素Eと一致します。属性の値は問いません。<br />- Attribute selectors</td></tr>
    <tr><td>E[A="V"]    </td><td>uu.attr(E[@A="V"])</td><td>Element(s)</td><td>属性Aの値がVの全ての要素Eと一致します。<br />- Attribute selectors</td></tr>
    <tr><td>E[A~="V"]   </td><td>uu.attr(E[@A~="V"])</td><td>Element(s)</td><td>属性Aの値がスペース区切りのリストで、<br />リストがVを含む全ての要素Eと一致します。<br />- Attribute selectors</td></tr>
    <tr><td>E[A|="V"]   </td><td></td><td>Element(s)</td><td>属性Aの値がハイフン区切りのリストで、<br />"V"または"V-"で始まる単語を含む全ての要素Eと一致します。<br />- Attribute selectors</td></tr>
    <tr><td>E[A^="V"]   </td><td>uu.attr(E[@A^="V"])</td><td>Element(s)</td><td>属性Aの値がVで始まる全ての要素Eと一致します。<br />- Attribute selectors</td></tr>
    <tr><td>E[A$="V"]   </td><td>uu.attr(E[@A$="V"])</td><td>Element(s)</td><td>属性Aの値がVで終わる全ての要素Eと一致します。<br />- Attribute selectors</td></tr>
    <tr><td>E[A*="V"]   </td><td>uu.attr(E[@A*="V"])</td><td>Element(s)</td><td>属性Aの値がVを含む全ての要素Eと一致します。<br />- Attribute selectors</td></tr>
    <tr><td>:root       </td><td>uu.tag("html")</td><td>Element   </td><td>ルート要素(HTML)と一致します。<br /> - Structural pseudo-classes</td></tr>
    <tr><td>E:nth-child(<a href="#n">n</a>)     </td><td>uu.tag(E)[n]</td><td>Element(s)</td><td>先頭から数えて(n|偶数|奇数|計算)番目の兄弟要素と一致します。<br /> - Structural pseudo-classes</td></tr>
    <tr><td>E:nth-last-child(<a href="#n">n</a>)</td><td></td><td>Element(s)</td><td>末尾から数えて(n|偶数|奇数|計算)番目の兄弟要素と一致します。<br /> - Structural pseudo-classes</td></tr>
    <tr><td>E:nth-of-type(<a href="#n">n</a>)     </td><td></td><td>Element(s)</td><td>E要素と同じ要素名の兄弟を先頭から数えて<br />(n|偶数|奇数|計算)番目の兄弟要素と一致します。<br /> - Structural pseudo-classes</td></tr>
    <tr><td>E:nth-last-of-type(<a href="#n">n</a>)</td><td></td><td>Element(s)</td><td>E要素と同じ要素名の兄弟を末尾から数えて<br />(n|偶数|奇数|計算)番目の兄弟要素と一致します。<br /> - Structural pseudo-classes</td></tr>
    <tr><td>E:first-child</td><td>uu.tag(E) + e.firstChild</td><td>Element</td><td>最初の子要素と一致します。<br /> - Structural pseudo-classes</td></tr>
    <tr><td>E:last-child</td><td>uu.tag(E) + e.lastChild</td><td>Element</td><td>最後の子要素と一致します。<br /> - Structural pseudo-classes</td></tr>
    <tr><td>E:first-of-type</td><td></td><td>Element</td><td>E要素と同じ要素名の兄弟で、最初の兄弟と一致します。<br /> - Structural pseudo-classes</td></tr>
    <tr><td>E:last-of-type</td><td></td><td>Element</td><td>E要素と同じ要素名の兄弟で、最後の兄弟と一致します。<br /> - Structural pseudo-classes</td></tr>
    <tr><td>E:only-child</td><td></td><td>Element</td><td>一人っ子と一致します。<br /> - Structural pseudo-classes</td></tr>
    <tr><td>E:only-of-type</td><td></td><td>Element</td><td>要素Eの親からみてユニークなEであれば一致します。<br />兄弟にEがいれば一致しません。<br /> - Structural pseudo-classes</td></tr>
    <tr><td>E:empty</td><td>uu.tag(E)<br />+ e.firstChild == null</td><td>Element</td><td>独身(子要素やテキストノードを持たない要素E)と一致します。<br /> - Structural pseudo-classes</td></tr>
    <tr><th><a name="jquery-selector">jQuery Selectors</a><th></th></th><th>戻り値(Return)</th><th>内容</th></tr>
    <tr><td>:first        </td><td>uu.tag(E)[0]</td><td>Element</td><td>最初の要素と一致します。</td></tr>
    <tr><td>:last         </td><td>uu.tag(E)[length - 1]</td><td>Element</td><td>最後の要素と一致します。</td></tr>
    <tr><td>:even         </td><td>:nth-child(even)</td><td>Element(s)</td><td>偶数番目の要素と一致します。</td></tr
    <tr><td>:odd          </td><td>:nth-child(odd)</td><td>Element(s)</td><td>奇数番目の要素と一致します。</td></tr
    <tr><td>:eq(index)    </td><td>:nth-child(index)</td><td>Element</td><td>ルート要素から検索し、index番目の要素と一致します。</td></tr>
    <tr><td>:gt(index)    </td><td></td><td>Element(s)</td><td>ルート要素から検索し、index番超の要素と一致します。<br />:gt(4) は5番目以上と一致し4番目は含みません。</td></tr>
    <tr><td>:lt(index)    </td><td></td><td>Element(s)</td><td>ルート要素から検索し、index番未満の要素と一致します。<br />:lt(4) は3番目以下と一致し4番目は含みません。</td></tr>
    <tr><td>:header       </td><td>uu.tag("h1"...)</td><td>Element(s)</td><td>ルート要素から検索し、h1,h2,h3,h4,h5,h6要素と一致します。</td></tr>
    <tr><td>:contains(text)</td><td></td><td>Element(s)</td><td>テキストノードがtextを含んでいる要素と一致します。</td></tr>
    <tr><td>:parent       </td><td></td><td>Element</td><td>親要素から見て、<br />テキストノードを含んでいる全ての子要素と一致します。</td></tr>
    <tr><td>:input        </td><td>uu.tag("input"...)</td><td>Element(s)</td><td>全てのinput, textarea, select, button要素と一致します。</td></tr>
    <tr><td>:text         </td><td>uu.attr("input[@text]")</td><td>Element(s)</td><td>input type="text"の要素と一致します。</td></tr>
    <tr><td>:password     </td><td>uu.attr("input[@password]")</td><td>Element(s)</td><td>input type="password"の要素と一致します。</td></tr>
    <tr><td>:radio        </td><td>uu.attr("input[@radio]")</td><td>Element(s)</td><td>input type="radio"の要素と一致します。</td></tr>
    <tr><td>:checkbox     </td><td>uu.attr("input[@checkbox]")</td><td>Element(s)</td><td>input type="checkbox"の要素と一致します。</td></tr>
    <tr><td>:submit       </td><td>uu.attr("input[@submit]")</td><td>Element(s)</td><td>input type="submit"の要素と一致します。</td></tr>
    <tr><td>:image        </td><td>uu.attr("input[@image]")</td><td>Element(s)</td><td>input type="image"の要素と一致します。</td></tr>
    <tr><td>:reset        </td><td>uu.attr("input[@reset]")</td><td>Element(s)</td><td>input type="reset"の要素と一致します。</td></tr>
    <tr><td>:button       </td><td>uu.attr("input[@button]")</td><td>Element(s)</td><td>input type="button"の要素と一致します。</td></tr>
    <tr><td>:file         </td><td>uu.attr("input[@file]")</td><td>Element(s)</td><td>input type="file"の要素と一致します。</td></tr>
<!--
    <tr><td>:hidden       </td><td></td><td>Element(s)</td><td>input type="hidden"の要素と一致します。<br />
      <span style="color: red">uu.css("...:hidden")は、display: none や visibility: hidden の要素とは一致しません。<br />
                               uu.css.pseudo(":hidden")を使用してください。</span></td></tr>
 -->
    </table>

    <p>※ 未記載のCSSセレクタは、実装方法で悩んでいるものが多く、要望があれば再検討するつもりです。</p>

    <a name="n"></a>
    <p>:nth-child(n), :nth-last-child(n), :nth-of-type(n), :nth-last-of-type(n) の n には、
      <br >"even", "odd", "2n", "2n+1" または "xny" といった文字列や数値を指定可能です。</p>
    <ul>
      <li>数値: 先頭/末尾から数えてn番目の兄弟要素と一致します。</li>
      <li>"even": 先頭/末尾から数えて偶数番目の兄弟要素と一致します。0,2,4...番目の要素は"even"と一致します。</li>
      <li>"odd": 先頭/末尾から数えて奇数番目の兄弟要素と一致します。1,3,5...番目の要素は"odd"と一致します。</li>
      <li>"2n": "even"と同じです。</li>
      <li>"2n+1": "odd"と同じです。</li>
      <li>"4n+1": 4で割って余りが0の番号を持つ要素を選択します。</li>
      <li>"4n+2": 4で割って余りが1の番号を持つ要素を選択します。</li>
      <li>"4n+3": 4で割って余りが2の番号を持つ要素を選択します。</li>
      <li>"4n+4": 4で割って余りが3の番号を持つ要素を選択します。</li>
    </ul>
  </dd>
  <dt><a name="pseudo-list">uu.css.pseudo で使用可能なCSSセレクタの一覧</a> - List of the available pseudo selectors</dt>
  <dd>
    <p>以下はJavaScriptプロパティの値に対し検索します。<a href="http://d.hatena.ne.jp/uupaa/20080620">Attrノードの値は検索しません。</a></p>
    <table>
    <tr><th>Pseudo selectors</th><th>戻り値(Return)</th><th>内容</th></tr>
    <tr><td>:enabled</td><td>Element(s)</td><td>要素のdisabled属性がfalseの要素と一致します。<br />- The UI element states pseudo-classes - CSS Level 3</td></tr>
    <tr><td>:disabled</td><td>Element(s)</td><td>要素のdisabled属性がtrueの要素と一致します<br />- The UI element states pseudo-classes - CSS Level 3</td></tr>
    <tr><td>:checked</td><td>Element(s)</td><td>input type="radio" か input type="checkbox"の要素で、checked属性がtrueの要素と一致します。<br /> - The UI element states pseudo-classes - CSS Level 3</td></tr>
    <tr><td>:selected</td><td>Element(s)</td><td>要素のselected属性がtrueの要素と一致します。<br /> - jQuery</td></tr>
    <tr><td>:visible</td><td>Element(s)</td><td>:hidden の条件と一致しない、全ての要素と一致します。<br /> - jQuery</td></tr>
    <tr><td>:hidden</td><td>Element(s)</td><td>input type="hidden" か display属性が"none" か visibility属性が"hidden" な要素と一致します。<br /> - jQuery</td></tr>
    </table>
  </dd>
<!-- -->
  <dt><a name="uu.css.toXPath">uu.css.toXPath</a> - CSS3セレクタをXPathに変換 - Convert CSS3 selector into XPath</dt>
  <dd><p>uu.css.toXPath(<i>css3selectors</i>)は  <i>css3selectors</i>をXPath式に変換します。</p>
      <pre>
 @param String css3selectors - CSS3のセレクタを指定します。
 @return String - 成功でXPathのロケーションパスを返します。
                  変換失敗で空文字列("")を返します。
 @see <a href="http://www.w3.org/TR/css3-selectors/">CSS3 Selector - W3C</a>
      </pre>
  </dd>
</dl>

</body>
</html>
