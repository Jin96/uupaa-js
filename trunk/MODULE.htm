<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title>uupaa.js - Module</title>
<style type="text/css">@import url(./README.css);</style>
<!--[if IE]><script id="excanvas.js" type="text/javascript" src="http://pigs.sourceforge.jp/excanvas.js"></script><![endif]-->
<script id="uupaa.js" type="text/javascript" src="./uupaa.js"></script>
</head>
<body>
<p>
   | <a href="http://code.google.com/p/uupaa-js/">Project Home(Google Code)</a>
   | <a href="./README.htm#demo">DEMO</a>
   | <a href="./CHANGELOG.htm">ChangeLog</a>
   | <a href="./LICENSE.htm">License</a> |<br />
   | <a href="./INDEX.htm">Index</a>
   | <a href="./DOCUMENT.htm">Document</a>
   | <a href="./SELECTOR.htm">Selector</a>
   | <a href="./MODULE.htm">Module</a>
   | <a href="./GLOSSARY.htm">Glossary</a>
   |
</p>
<a href="./README.htm">README</a> &gt; <a href="./INDEX.htm">INDEX</a> &gt; MODULE<br />
<hr />
<a href="#uu.module.url">URL</a> |
<a href="#uu.module.virtualTimer">VirtualTimer</a> |
<a href="#uu.module.messagePump">MessagePump</a> |
<a href="#uu.module.customEvent">CustomEvent</a> |
<a href="#uu.module.agent">Agent</a> |
<a href="#uu.module.image">Image</a> |
<a href="#uu.module.imageset">ImageSet</a> |
<a href="#uu.module.color">Color</a> |
<a href="#uu.module.effect">Effect</a> |
<a href="#uu.module.fdc">Friendly Data Container</a> |
<a href="#uu.module.skin">Skin</a> |
<a href="#uu.module.config">Configuration</a> |
<a href="#uu.module.perf">Performance</a> |
<a href="#uu.module.log2">Log</a> |
<a href="#uu.module.canvas2d">2D Canvas</a> |
<hr />
<h2><a name="uu.module.url">URL manipulator</a> - URLの操作</h2>
<p>URLの取り扱いを簡単にします。</p>
<p>uu.module.url は、最初から uupaa.js に組み込まれているモジュールです。</p>
<p>通常は、システム全体で共用するグローバルなインスタンス(<a href="./DOCUMENT.htm#uu.url">uu.url</a>)を使用し、
   特別な場合に、uu.module.url をインスタンス化してください。</p>
<hr />
<dl>
<!-- -->
  <dt><a name="uu.module.url.base">uu.module.url.base</a> - Get base URL</dt>
  <dd><p>uu.module.url.base() は ベースURL(uupaa.jsが設置されているディレクトリパス)を返します。</p>
      <p>http://example.com/js/uupaa.js にある、uupaa.js をHTML内で読み込むと、
         <br />uu.module.url.base() は "http://example.com/js/" を返します。</p>
      <pre>
 @return String - ベースURLを返します。
      </pre>
      <pre class="eg">
<b>uu.url.base</b>(); // "file:///D:/uupaa/svn/trunk/"  など。
      </pre>

  </dd>
<!-- -->
  <dt><a name="uu.module.url.abs">uu.module.url.abs</a> - Get absolute URL - 絶対URL化</dt>
  <dd><p>uu.module.url.abs(<i>path</i>) は
         相対パス(<i>path</i>)を絶対パスに変換します。</p>
      <p><i>path</i> が絶対パスなら、そのまま返します。</p>
      <pre>
 @param String path - 相対パスを指定します。
 @return String - 絶対パスを返します。
      </pre>
      <pre class="eg">
<b>uu.url.abs</b>("./"); // "http://uupaa-js.googlecode.com/svn/trunk/"
      </pre>
  </dd>
<!-- -->
  <dt><a name="uu.module.url.dir">uu.module.url.dir</a> - Extract scheme and directory part from URL - URLからスキームとディレクトリを取り出す</dt>
  <dd><p>uu.module.url.dir(<i>path</i>) は
         <i>path</i>からURLスキーム("http://" や "https://")部分とディレクトリ部分("dir1/dir2/")を取り出し返します。</p>
      <p>ファイル名.拡張子 の部分は切り落とされます。</p>
      <pre>
 @param String path - パスを指定します。
 @return String - パスに含まれているディレクトリを返します。
                  ディレクトリが見つからなければ空文字列("")を返します。
      </pre>
      <pre class="eg">
<b>uu.url.dir</b>("dir1/file"); // "dir1/"
<b>uu.url.dir</b>("dir1/dir2/"); // "dir1/dir2/"
<b>uu.url.dir</b>("./path/file.ext"); // "./path/"
<b>uu.url.dir</b>("http://example.com/dir/file.subext.ext"); // "http://example.com/dir/"
      </pre>
  </dd>

<!-- -->
  <dt><a name="uu.module.url.fileName">uu.module.url.fileName</a> - Extract file-name and extension part from URL - URLからファイル名と拡張子を取り出す</dt>
  <dd><p>uu.module.url.fileName(<i>path</i>) は
         <i>path</i>からファイル名.拡張子の部分("file.ext")を取り出し返します。</p>
      <pre>
 @param String path - パスを指定します。
 @return String - パスに含まれている ファイル名.拡張子 を返します。
                  ファイル名が見つからなければ空文字列("")を返します。
      </pre>
      <pre class="eg">
<b>uu.url.fileName</b>("dir1/file"); // "file"
<b>uu.url.fileName</b>("dir1/dir2/"); // ""
<b>uu.url.fileName</b>("./path/file.ext"); // "file.ext"
<b>uu.url.fileName</b>("http://example.com/dir/file.subext.ext"); // "file.subext.ext"
      </pre>
  </dd>
<!-- -->
  <dt><a name="uu.module.url.query">uu.module.url.query</a> - Parse QueryString - QueryStringのパース</dt>
  <dd><p>uu.module.url.query(<i>qstr</i>) は
         クエリストリング(<i>qstr</i>)をパースし Hash( { key: value, ... } )を返します。</p>
      <p>key や value に encodeURIComponent() でエンコードされている文字列が含まれている場合はデコードします。</p>
      <pre>
 @param String qstr - クエリストリングを指定します。
 @return Hash - パースした結果を返します。
      </pre>
      <pre class="eg">
var qstr = <b>uu.url.query</b>("key1=value1&amp;key2=value2"); // qstr = { key1: "value1", key2: "value2" }
var url  = uu.url.addQuery("", uu.toPair("key", "a:?=")); // url  = "?key=a%3A%3F%3D"
var hash = <b>uu.url.query</b>(url); // hash = { key: "a:?=" }
      </pre>
  </dd>
<!-- -->
  <dt><a name="uu.module.url.addQuery">uu.module.url.addQuery</a> - Add QueryString - クエリストリングを追加</dt>
  <dd><p>uu.module.url.addQuery(<i>url</i>, <i>hash</i>) は
         <i>url</i>の末尾に、<i>hash</i>の内容(<i>key</i>=<i>value</i>)を文字列化したものを追加し、
         追加後のURLを返します。</p>
      <p><i>key</i>, <i>value</i> は encodeURIComponent()で、適切にエンコードされます。</p>
      <p>文字列 "key" と "value" から Hash( { key: "value" } )を生成するには、<a href="./DOCUMENT.htm#uu.toPair">uu.toPair()</a> を使います。</p>
      <pre>
 @param String url - URLを指定します。
 @param Hash hash  - Hash( { key1: value1, key2: value2, ... } )を指定します。
 @return String - クエリストリングを追加したurlを返します。
      </pre>
      <pre class="eg">
var url = "http://www.example.com/";
url = <b>uu.url.addQuery</b>(url, { key1: "value1", key2: "value2" }); // "http://www.example.com/?key1=value1&amp;key2=value2"
<b>uu.url.addQuery</b>(url, <b>uu.toPair</b>("key3", "value3")); // "http://www.example.com/?key1=value1&amp;key2=value2&amp;key3=value3"
<b>uu.url.addQuery</b>("", <b>uu.toPair</b>("key", "value")); // "?key=value"
      </pre>
  </dd>
</dl>


<hr />
<h2><a name="uu.module.virtualTimer">VirtualTimer</a> - 仮想タイマー</h2>
<p>JavaScript標準のタイマーよりも、高性能なタイマーを提供します。</p>
<p>VirtualTimerはベースとなるタイマーで時を刻み、
   その上で複数の仮想タイマーを動作させることで、コンテキストスイッチを減らし、
   100個以上のタイマーを高速に動作させることができる高機能タイマーです。<br />
   一時停止、再スタート、ループ数の延長、遅延時間の動的な指定等が可能です。<br />
   タイマーの精度はwindow.setIntervalと同等です。連続使用によるオーバーフローは発生しません。
</p>
<p>uu.module.virtualTimer は、最初から uupaa.js に組み込まれているモジュールです。</p>
<p>通常は、システム全体で共用するグローバルなインスタンス(<a href="./DOCUMENT.htm#uu.vtmLowSpeed">uu.vtmLowSpeed</a>)等を使用し、
   特別な場合に、uu.module.virtualTimer をインスタンス化してください。</p>

<a href="./demo/module/uu.module.virtualTimer.htm" class="run">DEMO</a>

<hr />
<dl>
<!-- -->
      <dt><a name="uu.module.virtualTimer.set">uu.module.virtualTimer.set</a> - Regist VirtualTimer - 仮想タイマーを登録</dt>
      <dd><p>uu.module.virtualTimer.set(<i>fn</i> = uu.mute, <i>delay</i> = 10, <i>loop</i> = 0, <i>title</i> = "unknown") は、
          有限または無限ループの仮想タイマーを登録します。</p>
          <p><i>loop</i> が -1 なら無限ループ, 1以上なら有限ループ, 0 なら終了状態の有限ループ(機能しないが登録されている状態)になります。
          <br />有限ループの仮想タイマーは、<i>delay</i> 時間経過後に <i>fn</i> を呼び出す一連の動作を <i>loop</i> 回繰り返し、
                ループ残数がゼロになるとループを終了します。<i>loop</i> が100なら100回ループします。
          <br />無限ループの仮想タイマーは、<i>delay</i> 時間経過後に <i>fn</i> を呼び出す一連の動作を無限に続けます。</p>
<pre>
 @param Function/String fn      - 遅延評価関数を指定します。setTimeout関数のように文字列化した関数も指定可能です。
                                  デフォルトはuu.muteです。
 @param Number/Function delay   - 遅延時間を数値または関数で指定します。数値の単位はmsです。デフォルトは10です。
 @param Number          [loop]  - ループ数を指定します。-1なら無限ループ、1以上の値なら有限ループとなります。
                                  0ならループ数ゼロで終了済みの状態の仮想タイマーを生成します。
 @param String          [title] - タイトルを指定します。titleはdelay()の第二引数に渡されます。
                                  delay関数をいくつかのタイマーが共用している場合などは、
                                  titleを適切に設定することでタイマーの判別が可能になります。
                                  delay関数を使わない場合でも、適切な名前を設定しておくことでデバッグがしやすくなります。
 @return Number                 - 登録成功で、仮想タイマーID(<i>vtid</i>)を返します。
                                  登録失敗で -2 を返します。

                                  登録成功時に返される値の最小値はブラウザに依存します。
                                  Safari3などは0を返しますが、その他のブラウザは1を返すようです。
</pre>
          <p><i>delay</i> には ms 単位の数値か関数を指定可能です。</p>
          <p><i>delay</i> が関数なら、次回の遅延時間を決める際に <i>delay</i>(呼び出し回数, title) の形で呼び出します。
          <br /><i>delay</i> 関数の戻り値が遅延時間になります。
          <br />マイナスの値を返すと、ループ残数をゼロにしてループを終了します(この場合は無限ループも終了します)。
          <br />呼び出し回数の値は0から始まります。
          <br /><i>delay</i> 関数の初回の呼び出し( delay(0, <i>title</i>) )がマイナスの値を返すと、登録に失敗します。</p>

          <p>仮想タイマーの登録に成功すると、一時停止状態のベースタイマーは自動的に resume(再スタート)します。</p>
      </dd>
<!-- -->
      <dt><a name="uu.module.virtualTimer.unset">uu.module.virtualTimer.unset</a> - Unregist VirtualTimer - 仮想タイマーを抹消</dt>
      <dd><p>uu.module.virtualTimer.unset(<i>vtid</i>) は
          仮想タイマー(<i>vtid</i>)を強制終了し、リソース開放可能(削除済み)としてマーキングします。</p>
          <p>unset 実行済みの vtid は無効になり、resume や extend は機能しなくなります。</p>
<pre>
 @param Number  vtid - <a href="#uu.module.virtualTimer.set">set</a>が返すvtidを指定します。
</pre>
      </dd>
<!-- -->
      <dt><a name="uu.module.virtualTimer.extend">uu.module.virtualTimer.extend</a> - Extend VirtualTimer loop count - 仮想タイマーのループ数を延長</dt>
      <dd><p>uu.module.virtualTimer.extend(<i>vtid</i>, <i>loop</i> = -1) は、
          仮想タイマー(<i>vtid</i>)の現在のループ数を +<i>loop</i>します。</p>
          <p>ループ数を追加する以外にも</p>
          <ul>
             <li>有限ループに -1 を指定すると、有限ループが無限ループに変化します。</li>
             <li>無限ループに 1以上の値を指定すると、無限ループが有限ループに変化します。</li>
             <li>有限/無限ループに、0を指定すると、終了状態の有限ループに変化します。</li>
          </ul>
          <p>仮想タイマー(<i>vtid</i>)の状態が "ループ終了後" か "一時停止中" なら、
              ループ数を再設定し、自動的に resume(再スタート)します。</p>
          <p>ベースタイマーが一時停止中の場合も自動的に resume(再スタート)します。</p>
<pre>
 @param Number  vtid   - <a href="#uu.module.virtualTimer.set">set</a>が返すvtidを指定します。
 @param Number  [loop] - 延長するループ数の指定です。-1, 0, 1以上の値を指定します。デフォルトは -1 です。
</pre>
      </dd>
<!-- -->
      <dt><a name="uu.module.virtualTimer.resume">uu.module.virtualTimer.resume</a> - Resume BaseTimer or VirtualTimer - ベースタイマー/仮想タイマーを再スタート</dt>
      <dd><p>uu.module.virtualTimer.resume(<i>vtid</i> = -1) は、
            一時停止している ベースタイマー または 仮想タイマーを再スタートします。</p>
<pre>
 @param Number  [vtid] - vtidを指定すると仮想タイマーを再スタートします。
                         -1を指定するとベースタイマーを再スタートします。
                         デフォルトは-1です。
</pre>
          <p>ベースタイマーが停止している状態で仮想タイマーを再スタートさせると、ベースタイマーも自動的に再スタートします。</p>
      </dd>
<!-- -->
      <dt><a name="uu.module.virtualTimer.suspend">uu.module.virtualTimer.suspend</a> - Suspend BaseTimer or VirtualTimer - ベースタイマー/仮想タイマーを一時停止</dt>
      <dd><p>uu.module.virtualTimer.suspend(<i>vtid</i> = -1) は、
          動作中の ベースタイマー または 仮想タイマーを一時停止します。</p>
          <p>ベースタイマーを停止すると、ベースタイマー上で動作している仮想タイマーも全て停止します。</p>
<pre>
 @param Number  [vtid] - vtidを指定すると仮想タイマーを一時停止します。
                         -1を指定するとベースタイマーを一時停止します。
                         デフォルトは-1です。
</pre>
      </dd>
<!-- -->
      <dt><a name="uu.module.virtualTimer.diet">uu.module.virtualTimer.diet</a> - Memory Compaction - リソースの開放</dt>
      <dd><p>uu.module.virtualTimer.diet() は、
          ループ回数が上限に達しているか、<a href="#uu.module.virtualTimer.unset">unset</a> で登録抹消済みの仮想タイマーのリソースを開放します。</p>
          <p>一時停止中であっても、ループ数が残っている仮想タイマーのリソースは開放されません。</p>
          <p>diet実行中でもベースタイマーは停止しませんが、
             仮想タイマーはその間(1～数baseClock分)遅延する可能性があります。</p>
          <table>
          <tr><th>仮想タイマーの<br />種類</th><th>状態</th>
              <th><a href="#uu.module.virtualTimer.diet">diet</a>で<br />リソースが<br />開放されるか</th>
              <th><a href="#uu.module.virtualTimer.suspend">suspend</a>が<br />機能するか</th>
              <th><a href="#uu.module.virtualTimer.resume">resume</a>が<br />機能するか</th>
              <th><a href="#uu.module.virtualTimer.extend">extend</a>が<br />機能するか</th>
              <th>内部的な状態</th></tr>
          <tr><td>有限ループ</td><td>ループ中</td><td>×(されない)</td><td>○(する)</td><td>×(しない)</td><td>○(する)</td><td>loop=n,next>0,unset=0</td></tr>
          <tr><td>有限ループ</td><td>ループ終了後<br />(ループ残ゼロ)</td><td>○(される)</td><td>×(しない)</td><td>×</td><td>○</td><td>loop=0,next=0,unset=0</td></tr>
          <tr><td>有限ループ</td><td>一時停止中<br />(ループ残あり<br />(suspend中)</td><td>×</td><td>×</td><td>○(する)</td><td>○</td><td>loop=n,next=0,unset=0</td></tr>
          <tr><td>有限ループ</td><td>抹消済み<br />(unset実行済み)</td><td>○</td><td>×</td><td>×</td><td>×(しない)</td><td>loop=0,next=0,unset=1</td></tr>
          <tr><td>無限ループ</td><td>ループ中</td><td>×</td><td>○</td><td>×</td><td>○</td><td>loop=-1,next>0,unset=0</td></tr>
          <tr><td>無限ループ</td><td>ループ終了後<br />(delay関数がマイナス値を返した)</td><td>○</td><td>×</td><td>×</td><td>○</td><td>loop=0,next=0,unset=0</td></tr>
          <tr><td>無限ループ</td><td>一時停止中<br />(suspend中)</td><td>×</td><td>×</td><td>○</td><td>○</td><td>loop=-1,next=0,unset=0</td></tr>
          <tr><td>無限ループ</td><td>抹消済み<br />(unset実行済み)</td><td>○</td><td>×</td><td>×</td><td>×</td><td>loop=0,next=0,unset=1</td></tr>
          </table>
      </dd>
</dl>





<hr />
<h2><a name="uu.module.messagePump">MessagePump</a></h2>
<p>メッセージポンプの実装です。
  <br />メッセージポンプを使うと、システムから一斉に配信されるメッセージを受け取ったり、
  特定/不特定の相手(クラス)とメッセージの送受信が可能になります。</p>
<p>送信方法には以下の三種類があります。</p>
<ol>
  <li><a href="./GLOSSARY.htm#Unicast">Unicast</a> - 誰か一人にメッセージを送信</li>
  <li><a href="./GLOSSARY.htm#Multicast">Multicast</a> - 何人かにメッセージを送信</li>
  <li><a href="./GLOSSARY.htm#Broadcast">Broadcast</a> - 全員にメッセージを送信</li>
</ol>
<p><a href="./DOCUMENT.htm#uu.klass.generic">uu.klass.generic</a> または
   <a href="./DOCUMENT.htm#uu.klass.singleton">uu.klass.singleton</a> で、msgbox メソッドを持つクラスをインスタンス化すると、
   自動的にメッセージポンプが使用可能になります。</p>
      <pre>
// uu.klass.generic, uu.klass.singleton なら、最初からメッセージを受け取り可能なインスタンスが生成される
var ReceiverClass = <b>uu.klass.generic</b>();
ReceiverClass.prototype = {
  <b>msgbox</b>: function(msg, p1, p2) {
    alert(msg);
  }
};
var recv = new ReceiverClass();
// uu.msg.set(recv); // set不要
<b>uu.msg.post</b>(recv, "Hello"); // alert("Hello") 
      </pre>

<p>上記以外の方法で生成したオブジェクトでもメッセージを受け取れるようにするには、以下の規約に基づいた実装を行います。</p>
<ul>
  <li>オブジェクトは、ユニークなID文字列を持つuidプロパティを持つこと</li>
  <li>オブジェクトは、メッセージを受け取るmsgboxメソッドを持つこと</li>
  <li><a href="#uu.module.messagePump.set">uu.module.messagePump.set</a> でオブジェクトを登録すること</li>
</ul>
<p>上記の構造を持つオブジェクトに、<a href="#uu.module.messagePump.post">uu.module.messagePump.post</a> でメッセージを送信すると、
<br />receiverObject.msgboxが呼ばれ"Hello"が表示されます。</p>

<a href="./demo/module/uu.module.messagePump.obj.htm" class="run">Run</a>
      <pre>
// uu.klass.generic, uu.klass.singleton 以外の方法でメッセージを受け取れるオブジェクトを生成する
receiverObject1 = {
  <b>uid</b>: <a href="./DOCUMENT.htm#uu.uid">uu.uid</a>(), // 例: "uniqueID1"
  <b>msgbox</b>: function(msg, p1, p2) {
    alert(msg);
  }
};
receiverObject2 = {
  <b>uid</b>: uu.uid(), // 例: "uniqueID2"
  <b>msgbox</b>: function(msg, p1, p2) {
    alert(msg);
  }
};
<b>uu.msg.set</b>(receiverObject1);
<b>uu.msg.set</b>(receiverObject2);

<b>uu.msg.post</b>(0, "Hello"); // alert("Hello") x 2, 匿名でブロードキャスト
      </pre>

<p>uu.module.messagePump は、最初から uupaa.js に組み込まれているモジュールです。</p>
<p>通常は、システム全体で共用するグローバルなインスタンス(<a href="./DOCUMENT.htm#uu.msg">uu.msg</a>)を使用し、
   特別な場合に、uu.module.messagePump をインスタンス化してください。</p>
<hr />
<dl>
<!-- -->
  <dt><a name="uu.module.messagePump.set">uu.module.messagePump.set</a> - Register the destination of the message - メッセージの送信先を登録</dt>
  <dd><p>uu.module.messagePump.set(<i>obj</i>) は、
      uidプロパティ(ユニークなID)を持つオブジェクト(<i>obj</i>)をメッセージの送信先として登録します。</p>
<pre>
 @param Object obj - uidプロパティを持ち、値にユニークなIDが設定されているオブジェクトを指定します。
 @throws TypeError "uu.module.messagePump.set"  引数が無効
</pre>
  </dd>

<!-- -->
  <dt><a name="uu.module.messagePump.send">uu.module.messagePump.send</a> - Send a message synchronously - メッセージを同期送信</dt>
  <dd><p>uu.module.messagePump.send(<i>to</i> = 0, <i>msg</i> = "send", <i>p1</i> = 0, <i>p2</i> = 0) は、
      メッセージを送信し送信結果を返します。p1, p2にはどのような引数でも渡せます。</p>
      <p>メッセージの受け取り側には、msg, p1, p2 が渡されます。</p>
<pre>
 @param Mix to     -  メッセージの送信先を指定します。
                      uidプロパティを持つオブジェクトか、uid文字列,
                      Array( [object, object, ...] ) または
                      Array( ["uid1", "uid2", ...] ) のような配列で指定します。
                      有効なuidを一つ指定するとユニキャストします。
                      有効なuidを複数指定するとマルチキャストします。
                      0を指定するとブロードキャストします。
 @param String msg - メッセージを指定します。
 @param Mix [p1]   - 1つめのパラメタの指定です。デフォルトはundefinedです。
 @param Mix [p2]   - 2つめのパラメタの指定です。デフォルトはundefinedです。
 @return Array/Mix - msgbox関数の戻り値を格納したArray( [戻り値1, 戻り値2, ...] )を返します。
                     ユニキャストの場合はArrayではなく、msgbox関数の戻り値そのものを返します。
</pre>
  </dd>

<!-- -->
  <dt><a name="uu.module.messagePump.post">uu.module.messagePump.post</a> - Send a message asynchronously - メッセージを非同期送信</dt>
  <dd><p>uu.module.messagePump.post(<i>to</i>, <i>msg</i>, <i>p1</i> = 0, <i>p2</i> = 0) は、
      メッセージを非同期に送信します。p1, p2にはどのような引数でも渡せます。戻り値はありません。</p>
      <p>メッセージの受け取り側には、msg, p1, p2 が渡されます。</p>
<pre>
 @param Mix to     -  メッセージの送信先を指定します。
                      以下の値が指定可能です。
                        1. uidプロパティを持つオブジェクト
                        2. uid文字列
                        3. Array( [uidプロパティを持つオブジェクト, ...] )
                        4. Array( [uid文字列, ...] )
                        5. 数字のゼロ( 0 )
                      有効なuidを一つ指定するとユニキャストします。
                      有効なuidを複数指定するとマルチキャストします。
                      0を指定するとブロードキャストします。
 @param String msg - メッセージを指定します。
 @param Mix [p1]   - 1つめのパラメタの指定です。デフォルトはundefinedです。
 @param Mix [p2]   - 2つめのパラメタの指定です。デフォルトはundefinedです。
</pre>
  <a href="demo/module/uu.module.messagePump.htm" class="run">Run</a>
  <pre>
var XFile = uu.klass.generic();
XFile.prototype = {
  construct: function(agent) {
    this.agent = agent;
  },
  <b>msgbox</b>: function(msg, p1, p2) {
    uu.log("%s say, I accepted a message [%s], from %s", this.agent, msg, p1.from);
  }
};
var agent1 = new XFile("Agent Mulder");
var agent2 = new XFile("Agent Scully");
var agent3 = new XFile("Smoking Man");

<b>uu.msg.post</b>(agent1, "Hello Mulder", { from: "Scully"      }); // スカリーからモルダーにご挨拶
<b>uu.msg.post</b>(0,      "Hi All",       { from: "Mulder"      }); // モルダーが(自分も含め)みんなにご挨拶
<b>uu.msg.send</b>(agent1, "...",          { from: "Smoking Man" }); // スモーキングマンがモルダーだけにお返事
<b>uu.msg.post</b>([agent2, agent3], "Samantha was abducted",
                                      { from: "Mulder"      }); // モルダーが(自分以外の人に)いつものご乱心
  </pre>
  </dd>
</dl>




<hr />
<h2><a name="uu.module.customEvent">CustomEvent</a></h2>
<p>Sorry undocumented</p>

<hr />
<h2><a name="uu.module.agent">Agent</a></h2>
<p>スパイ活動を行い、メッセージを通知する機能を提供します。</p>
<p>イメージとしては、onpropertychange のようなものです。</p>

<hr />
<h2><a name="uu.module.image">Image</a></h2>
<p>画像のプリロードを行います。</p>
<p>uu.module.imageを使用すると、画像の読み込み完了と失敗を正確に把握できます。</p>
<p><a href="#uu.module.image.load">uu.module.image.load</a>で読み込みを開始した画像には、0から始まる画像番号(ImageNumber)が与えられます。
   <br />また、uu.module.image.loadは、個々の画像を識別するためのユニークなID(uid)を設定したImageオブジェクトを返します。</p>
<p>各画像には、uidまたはImageNumberによりアクセスします。</p>
<p>読み込みが完了した画像は、<a href="./GLOSSARY.htm#ImageReady">ImageReady</a>状態に遷移します。
  <br />読み込みが終わっていない(非ImageReady)画像や、存在しない画像を canvas::drawImage() で使用するとエラーが発生します。</p>

<p>uu.module.image は、最初から uupaa.js に組み込まれているモジュールです。</p>
<p>uu.module.image を直接使用しても良いのですが、いくつかの画像を纏めて管理する機能を持つ <a href="#uu.module.imageset">uu.module.imageset</a> という、
  <br />uu.module.image の上位モジュールがありますので、通常はそちらを使用します。</p>

<hr />
<dl>
<!-- -->
  <dt><a name="uu.module.image.load">uu.module.image.load</a> - Preload image - 画像のプリロード</dt>
  <dd><p>uu.module.image.load(<i>url</i>, <i>fn</i> = undefined, <i>callbackFilter</i> = undefined) は
         画像を非同期にロードし<a href="./GLOSSARY.htm#ImageReady">ImageReady</a>状態にします。</p>
      <p><i>url</i>には画像のURLを、<i>fn</i>には
          各ステップ毎に<a href="./DOCUMENT.htm#uu.request.callback">コールバック</a>する関数を指定します。</p>
      <pre>
 @param String   url  - 画像のURLを指定します。
 @param Function [fn] - 各stepで呼び出す関数を指定します。デフォルトはundefinedです。fnを省略するとコールバックしません。
 @param Number   [callbackFilter] - <a href="./DOCUMENT.htm#uu.request.callback">コールバック</a>するステップを限定する場合に指定します。
                                    省略すると、uu.request.callbackFilter の値を使用します。
 @return Image - Imageオブジェクトを返します。返されるImageオブジェクトには、ユニークなID(<i>image</i>.uid)が設定されています。
 @see <a href="./DOCUMENT.htm#Request">Request</a>
 @see <a href="./DOCUMENT.htm#uu.request.callback">CallBack</a>
      </pre>
  </dd>
<!-- -->
  <dt><a name="uu.module.image.already">uu.module.image.already</a> - ImageReady state - ImageReady状態の確認</dt>
  <dd><p>uu.module.image.already(<i>uid</i> = undefined) は
         <i>uid</i>で指定した画像がロード済み(ImageReady状態)ならtrueを返します。</p>
      <p>uid省略時は、全画像ロード済みならtrueを返します。</p>
      <pre>
 @param String/Number [uid] - uidまたはImageNumberを指定します。
 @return Boolean            - ImageReadyならtrueを返します。非ImageReadyならfalseを返します。
                              uid省略時は全画像がImageReadyの場合にtrueを返します。
      </pre>
  </dd>
<!-- -->
  <dt><a name="uu.module.image.browserCached">uu.module.image.browserCached</a> - ImageReady state(confirm browser cash) - ImageReady状態の確認(ブラウザキャッシュを確認)</dt>
  <dd><p>uu.module.image.browserCached(<i>url</i>) は
         <i>url</i>で指定した画像がブラウザにキャッシュされている状態なら(ImageReady状態)ならtrueを返します。</p>
      <pre>
 @param String url - 画像のURLを指定します。
 @return Boolean   - ImageReadyならtrueを返します。非ImageReadyならfalseを返します。
      </pre>
  </dd>
<!-- -->
  <dt><a name="uu.module.image.loading">uu.module.image.loading</a> - Number of the files loading - 読み込んでいる最中のファイル数を取得</dt>
  <dd><p>uu.module.image.loading() は
         現在読み込んでいる最中の画像数を返します。</p>
      <p></p>
      <pre>
 @return Number - 読み込んでいる最中の画像数を返します。全て読み込み済みなら0を返します。
      </pre>
  </dd>
<!-- -->
  <dt><a name="uu.module.image.item">uu.module.image.item</a> - Loaded image object - 読み込み済みの画像オブジェクトを取得</dt>
  <dd><p>uu.module.image.item(<i>uid</i> = undefined) は
         <i>uid</i>で指定したImageオブジェクトを返します。</p>
      <p>uid省略時は、全画像のImageオブジェクトを配列で返します。</p>
      <pre>
 @param String/Number [uid]   - uidまたはImageNumberを指定します。
 @return Element/ElementArray - uid指定時はElementを返します。
                                uid省略時は全画像のElementArray( [Element, ... ] )を返します。
                                無効なuidを指定した場合や、管理している画像が無い場合は、空のElementArrayを返します。
      </pre>
  </dd>
</dl>


<hr />
<h2><a name="uu.module.imageset">ImageSet</a></h2>
<p>画像のコレクション機能を提供します。</p>
<p>uu.module.imageset は、最初から uupaa.js に組み込まれているモジュールです。</p>
<hr />
<dl>
<!-- -->
  <dt><a name="uu.module.image.msgbox">uu.module.image.msgbox</a></dt>
  <dd><p>uu.module.image.msgbox() は 以下のメッセージを受信します。</p>
      <table>
      <tr><th>Method</th><th>Action</th><th>Type</th><th>msg</th><th>p1</th><th>p2</th><th>Returns<br />戻り値</th></tr>
      <tr><td>画像の読み込み依頼</td><td>Receive<br />依頼を受付</td><td>post</td><td>PRELOAD_IMAGE</td><td>uid</td><td>Taxing( { files } )</td><td>0</td></tr>
      <tr><td>画像は読み込み済みか?</td><td>Query<br />問い合わせ</td><td>send</td><td>IS_ALREADY</td><td>uid</td><td>none</td><td>読み込み済みならtrue<br />それ以外ならfalse</td></tr>
      </table>
      <p>画像の読み込みが完了するか、エラーで失敗すると、p1で通知されたuidに以下のメッセージを送信します。</p>
      <table>
      <tr><th>Method</th><th>Action</th><th>Type</th><th>msg</th><th>p1</th><th>p2</th></tr>
      <tr><td>画像の読み込み成功</td><td>Send<br />送信</td><td>post</td><td>PRELOAD_IMAGE_OK</td><td>Imageオブジェクト</td><td>none</td></tr>
      <tr><td>画像の読み込み失敗</td><td>Send<br />送信</td><td>post</td><td>PRELOAD_IMAGE_NG</td><td>Imageオブジェクト</td><td>none</td></tr>
      </table>
  </dd>
</dl>



<hr />
<h2><a name="uu.module.color">Color</a></h2>
<p>色名辞書("skyblue", "tomato")や、色成分(RGB, RGBA, HSV, #FFF)を扱う機能を提供します。</p>
<p>uu.module.color は、最初から uupaa.js に組み込まれているモジュールです。</p>
<p>通常は、システム全体で共用するグローバルなインスタンス(<a href="./DOCUMENT.htm#uu.color">uu.color</a>)を使用し、
   特別な場合に、uu.module.color をインスタンス化してください。</p>
<hr />
<dl>
  <dt><a name="uu.module.color.zero">uu.module.color.zero</a> - Transparent black( { r: 0, g: 0, b: 0, a: 0 } ) - 透明な黒</dt>
  <dd>uu.module.color.zero は 透明な黒 をあらわす RGBAHash です。</dd>
  <dt><a name="uu.module.color.black">uu.module.color.black</a> - Black( { r: 0, g: 0, b: 0, a: 1 } )</dt>
  <dd>uu.module.color.black は 黒 をあらわす RGBAHash です。</dd>
  <dt><a name="uu.module.color.white">uu.module.color.white</a> - White( { r: 255, g: 255, b: 255, a: 1 } )</dt>
  <dd>uu.module.color.white は 白 をあらわす RGBAHash です。</dd>
<!-- -->
  <dt><a name="uu.module.color.hash">uu.module.color.hash</a> - Parse color and return RGBAHash - 色をパースしRGBAHashを返す</dt>
  <dd><p>uu.module.color.hash(<i>r</i>, <i>g</i>, <i>b</i>, <i>a</i>) は
         与えられた色を解釈し、新しいRGBAHash( { r, g, b, a } )を生成して返します。</p>
      <p><i>r</i> は数値以外にも様々な型を受け取ります。<i>r</i> が数値の場合のみ、g, b, a の値が使用されます。</p>
      <pre>
 @param Number/String/RGBAHash/HSVAHash r - 色の赤成分を数値(0～255)で指定します。
                                            数字以外にも以下の型が指定可能です。
                                            1. String( "#FFF" )
                                            2. String( "#ffffff" )
                                            3. String( "red" )
                                            4. String( "tomato" )
                                            5. String( "rgb(255,255,255)" )
                                            6. String( "rgba(0,100%,255,1.0)" )
                                            7. RGBAHash( { r,g,b,a } )
                                            8. HSVAHash( { h,s,v,a } )
 @param Number                          g - 色の緑成分を数値(0～255)で指定します。
 @param Number                          b - 色の青成分を数値(0～255)で指定します。
 @param Number                          a - アルファ成分を数値(0.0～1.0)で指定します。
 @return <a href="./GLOSSARY.htm#RGBAHash">RGBAHash</a> - 変換成功で、RGBAHash( { r, g, b, a } )を返します。
                    変換失敗で r の値をそのまま返します。
      </pre>
  </dd>
<!-- -->
  <dt><a name="uu.module.color.coffee">uu.module.color.coffee</a> - return "#ffffff" style color</dt>
  <dd><p>uu.module.color.coffee(<i>r</i>, <i>g</i>, <i>b</i>) は
         与えられた色を解釈し、"#ffffff" スタイルの色文字列を返します。</p>
      <p><i>r</i> は数値以外にも様々な型を受け取ります。<i>r</i> が数値の場合のみ、g, b の値が使用されます。</p>
      <pre>
 @param Number/RGBAHash/HSVAHash  r - 色の赤成分を数値(0～255)で指定します。
                                      数字以外にも以下の型が指定可能です。
                                      1. RGBAHash( { r,g,b,a } )
                                      2. HSVAHash( { h,s,v,a } )
 @param Number                    g - 色の緑成分を数値(0～255)で指定します。
 @param Number                    b - 色の青成分を数値(0～255)で指定します。
 @return String                     - "#ffffff" スタイルの色文字列を返します。
      </pre>
  </dd>
<!-- -->
  <dt><a name="uu.module.color.rgb">uu.module.color.rgb</a> - return "rgb(0,0,0)" style color</dt>
  <dd><p>uu.module.color.rgb(<i>r</i>, <i>g</i>, <i>b</i>) は
         与えられた色を解釈し、"rgb(255,255,255)" スタイルの色文字列を返します。</p>
      <p><i>r</i> は数値以外にも様々な型を受け取ります。<i>r</i> が数値の場合のみ、g, b の値が使用されます。</p>
      <pre>
 @param Number/RGBAHash/HSVAHash  r - 色の赤成分を数値(0～255)で指定します。
                                      数字以外にも以下の型が指定可能です。
                                      1. RGBAHash( { r,g,b,a } )
                                      2. HSVAHash( { h,s,v,a } )
 @param Number                    g - 色の緑成分を数値(0～255)で指定します。
 @param Number                    b - 色の青成分を数値(0～255)で指定します。
 @return String                     - "rgb(255,255,255)" スタイルの色文字列を返します。
      </pre>
  </dd>
<!-- -->
  <dt><a name="uu.module.color.rgba">uu.module.color.rgba</a> - return "rgba(0,0,0,0)" style color</dt>
  <dd><p>uu.module.color.rgba(<i>r</i>, <i>g</i>, <i>b</i>, <i>a</i>) は
         与えられた色を解釈し、"rgba(255,255,255,1.0)" スタイルの色文字列を返します。</p>
      <p><i>r</i> は数値以外にも様々な型を受け取ります。<i>r</i> が数値の場合のみ、g, b, a の値が使用されます。</p>
      <pre>
 @param Number/RGBAHash/HSVAHash  r - 色の赤成分を数値(0～255)で指定します。
                                      数字以外にも以下の型が指定可能です。
                                      1. RGBAHash( { r,g,b,a } )
                                      2. HSVAHash( { h,s,v,a } )
 @param Number                    g - 色の緑成分を数値(0～255)で指定します。
 @param Number                    b - 色の青成分を数値(0～255)で指定します。
 @return String                     - "rgba(255,255,255,1.0)" スタイルの色文字列を返します。
      </pre>
  </dd>
<!-- -->
  <dt><a name="uu.module.color.complementary">uu.module.color.complementary</a> - return complementary-colors - 補色を返す</dt>
  <dd><p>uu.module.color.complementary(<i>hash</i>) は
         与えられた色から、補色を生成し返します。</p>
      <pre>
 @param RGBAHash/HSVAHash hash  - 色を RGBAHash( { r,g,b,a } ) または HSVAHash( { h,s,v,a } ) で指定します。
 @return RGBAHash               - RGBAHash( { r,g,b,a } ) を返します。
      </pre>
  </dd>
<!-- -->
  <dt><a name="uu.module.color.rgba2hsva">uu.module.color.rgba2hsva</a> - Convert RGBAHash to HSVAHash - RGBAHashをHSVAHashに変換</dt>
  <dd><p>uu.module.color.rgba2hsva(<i>rgba</i>) は
         RGBAHash を HSVAHash に変換します。</p>
      <pre>
 @param RGBAHash rgba  - RGBAHash( { r,g,b,a } )を指定します。
 @return HSVAHash      - HSVAHash( { h,s,v,a } )を返します。
      </pre>
  </dd>
<!-- -->
  <dt><a name="uu.module.color.hsva2rgba">uu.module.color.hsva2rgba</a> - Convert HSVAHash to RGBAHash - HSVAHashをRGBAHashに変換</dt>
  <dd><p>uu.module.color.hsva2rgba(<i>hsva</i>) は
         HSVAHash を RGBAHash に変換します。</p>
      <pre>
 @param HSVAHash hsva  - HSVAHash( { h,s,v,a } )を指定します。
 @return RGBAHash      - RGBAHash( { r,g,b,a } )を返します。
      </pre>
  </dd>
<!-- -->
  <dt><a name="uu.module.color.ratio">uu.module.color.ratio</a> - Arrangement Hue, Saturation and Value - 色相(H), 彩度(S), 明度(V)をアレンジ</dt>
  <dd><p>uu.module.color.ratio(<i>hash</i>, h = 0, s = 0, v = 0) は
         Hue(色相), Saturation(彩度), Value(明度:brightness)をアレンジします。
         <br />指定する値は絶対値ではなく増減値です。</p>
      <p><i>h</i> は、0～360までの色空間を持っており、360と0は連続した色空間として扱われます。
         <br />それに対し、<i>s</i> と <i>v</i> は連続した空間として扱われず、
         0～100 に収まらない値は、0～100に丸められます。</p>
      <pre>
 @param RGBAHash/HSVAHash hash  - HSVAHash( { h,s,v,a } )を指定します。
 @param Number            h     - Hueの増減値(-360～0～360)を指定します。省略可能です。
                                  計算結果が0～360を超えた場合は、0～360の値に収まるように補正します。
 @param Number            s     - Saturationの増減値(-100～0～100)を指定します。省略可能です。
                                  計算結果が0以下なら0に、100を超えた場合は100に補正します。
 @param Number            v     - Valueの増減値(-100～0～100)を指定します。省略可能です。
                                  計算結果が0以下なら0に、100を超えた場合は100に補正します。
 @return RGBAHash/HSVAHash      - RGBAHash( { r,g,b,a } ) または HSVAHash( { h,s,v,a } )を返します。
                                  hash が HSVAHash なら戻りも HSVAHash になります。
      </pre>
      <a href="./demo/module/uu.module.color.ratio.htm" class="run">DEMO</a>
      <pre class="eg">
var ns = uu.color;
var rgba    = ns.hash("chocolate"); // color
var hsva    = ns.rgba2hsva(rgba);
var v20down = ns.<b>ratio</b>(hsva, 0, 0, -20);
var v10down = ns.<b>ratio</b>(hsva, 0, 0, -10);
var v10up   = ns.<b>ratio</b>(hsva, 0, 0, 10);
var v20up   = ns.<b>ratio</b>(hsva, 0, 0, 20);
var rgba20down = ns.hsva2rgba(v20down);
var rgba10down = ns.hsva2rgba(v10down);
var rgba10up   = ns.hsva2rgba(v10up);
var rgba20up   = ns.hsva2rgba(v20up);
var rgba3      = ns.hsva2rgba(hsva);

uu.log("&lt;br /&gt;rgb          -&gt; %.2f, %.2f, %.2f", rgba.r, rgba.g, rgba.b);
uu.log("&lt;br /&gt;hsv          -&gt; %.2f, %.2f, %.2f", hsva.h, hsva.s, hsva.v);
uu.log("&lt;br /&gt;hsv: v20up   -&gt; %.2f, %.2f, %.2f", v20up.h, v20up.s, v20up.v);
uu.log("&lt;br /&gt;hsv: v10up   -&gt; %.2f, %.2f, %.2f", v10up.h, v10up.s, v10up.v);
uu.log("&lt;br /&gt;hsv: base    -&gt; %.2f, %.2f, %.2f", hsva.h, hsva.s, hsva.v);
uu.log("&lt;br /&gt;hsv: v10down -&gt; %.2f, %.2f, %.2f", v10down.h, v10down.s, v10down.v);
uu.log("&lt;br /&gt;hsv: v20down -&gt; %.2f, %.2f, %.2f", v20down.h, v20down.s, v20down.v);
uu.log("&lt;br /&gt;hsv -&gt; rgba  -&gt; %.2f, %.2f, %.2f", rgba.r, rgba.g, rgba.b);

uu.id("down20").style.backgroundColor = ns.rgb(rgba20down);
uu.id("down10").style.backgroundColor = ns.rgb(rgba10down);
uu.id("base").style.backgroundColor = ns.rgb(rgba);
uu.id("up10").style.backgroundColor = ns.rgb(rgba10up);
uu.id("up20").style.backgroundColor = ns.rgb(rgba20up);
      </pre>
  </dd>
</dl>

<hr />
<h2><a name="uu.module.effect">Effect</a></h2>
<p>簡単なアニメーション機能を提供します。</p>
<p>uu.module.effect は、最初から uupaa.js に組み込まれているモジュールです。</p>
<p>通常は、システム全体で共用するグローバルなインスタンス(<a href="./DOCUMENT.htm#uu.effect">uu.effect</a>)を使用し、
   特別な場合に、uu.module.effect をインスタンス化してください。</p>
<a href="./demo/module/uu.module.effect.htm" class="run">DEMO</a>
<ul>
  <li><a name="uu.module.effect.setDefaultSpeed">uu.module.effect.setDefaultSpeed</a> - </li>
  <li><a name="uu.module.effect.diet">uu.module.effect.diet</a> - Memory Compaction - リソースを開放</li>
  <li><a name="uu.module.effect.fade">uu.module.effect.fade</a> - Fadein, Fadeout - フェードイン, フェードアウト</li>
  <li><a name="uu.module.effect.move">uu.module.effect.move</a> - Move - 移動</li>
  <li><a name="uu.module.effect.scale">uu.module.effect.scale</a> - Scale - アンカー付きのリサイズ</li>
  <li><a name="uu.module.effect.bullet">uu.module.effect.bullet</a> - Bullet - 弾丸</li>
  <li><a name="uu.module.effect.puff">uu.module.effect.puff</a> - Puff - 拡大しながら消える</li>
  <li><a name="uu.module.effect.fold">uu.module.effect.fold</a> - Fold - 折りたたむ</li>
  <li><a name="uu.module.effect.shake">uu.module.effect.shake</a> - Shake - 左右に揺さぶる</li>
  <li><a name="uu.module.effect.shrink">uu.module.effect.shrink</a> - Shrink - 中心に向かって縮小する</li>
  <li><a name="uu.module.effect.glow">uu.module.effect.glow</a> - Glow - だんだん大きくなる</li>
  <li><a name="uu.module.effect.slideUp">uu.module.effect.slideUp</a> - Slide up - 上に折りたたむ</li>
  <li><a name="uu.module.effect.slideDown">uu.module.effect.slideDown</a> - Slide down - 下に広げる</li>
  <li><a name="uu.module.effect.pulsate">uu.module.effect.pulsate</a> - Pulsate - 点滅</li>
  <li><a name="uu.module.effect.dropOut">uu.module.effect.dropOut</a> - Drop out - 落下しながら消える</li>
  <li><a name="uu.module.effect+.wave">uu.module.effect+.wave</a> - Wave - 陽炎</li>
  <li><a name="uu.module.effect+.sunset">uu.module.effect+.sunset</a> - Sunset - 沈む夕日</li>
  <li><a name="uu.module.effect+.createWaveResource">uu.module.effect+.createWaveResource</a> - Precreate Wave, Sunset raster data - Wave, Sunset用のラスターデータを事前に作成</li>
</ul>




<hr />
<h2><a name="uu.module.fdc">Friendly Data Container</a></h2>
<p>FDCは仲間内で見せ合うデータを格納するためのコンテナです。</p>
<p>複数のクラス間で、一つのデータを共有していることを表現するために使用してください。
   <br />Friendlyには、C++ の Friend と「使いやすい」の二つの意味があります。
</p>

<hr />
<h2><a name="uu.module.skin">Skin</a></h2>
<p>Sorry undocumented</p>



<hr />
<h2><a name="uu.module.config">Configuration</a> - 設定</h2>
<p>システムのチューニング方法を提供します。</p>
<hr />
<dl>
<!-- -->
  <dt><a name="uu.module.config.importFromQueryString">uu.module.config.importFromQueryString</a></dt>
  <dd><p>uu.module.config.importFromQueryString() は
      <br />&lt;script <b>id="uupaa.js"</b> src="uupaa.js?<b>key=value</b>&amp;<b>...</b>"&gt; の QueryString(key=value)から設定を取り込みます。</p>
      <p>id="uupaa.js"が見つからない場合、設定値は無視されます。</p>
      <p>&lt;script <b>id="uupaa.js"</b> src="./uupaa.js?<b>module=dev,canvas</b>&amp;<b>debug=2</b>&amp;<b>cacheID=1</b>"&gt;
       これは、以下のように解釈されます。</p>
      <ul>
        <li>uu.module.config.module = "dev,canvas";</li>
        <li>uu.module.config.debug = 2;</li>
        <li>uu.module.config.cacheID = 1;</li>
      </ul>
      <p>uu.module.config.modulePath や uu.module.config.imagePath には、置換文字列 "{BASE}" が指定できます。
         <br />この文字列は、uu.module.config.basePath の値に置き換わります。</p>
  </dd>

<!-- -->
  <dt><a name="uu.module.config.load">uu.module.config.load</a></dt>
  <dd>uu.module.config.load(<i>boost</i> = true) は <a href="#uu.module.config.importFromQueryString">importFromQueryString</a> で読み込んだ設定を元に、
      モジュールの読み込みと、FirebugLiteの起動を行います。
      <pre>
 @param Boolean [boost] - 各ブラウザ用のBugifxモジュールを自動的に読み込む場合に true を指定します。
                          デフォルトはtrueです。
      </pre>
      各ブラウザ毎に自動的に読み込まれるファイルは以下となります。
      <ul>
        <li>IE: uu.module.ieboost.js</li>
        <li>Opera: なし</li>
        <li>Safari: なし</li>
        <li>Firefox: なし</li>
        <li>Google Chrome: なし</li>
      </ul>
  </dd>

<!-- -->
  <dt><a name="uu.module.config">Property Lists</a></dt>
  <dd>
      <table>
      <tr><th>Key</th><th>Value<br />Type</th><th>Default Value</th><th>Note</th></tr>
      <tr><td><a name="uu.module.config.basePath">basePath</a></td>
          <td>String</td>
          <td><a href="#uu.module.url.base">uu.url.base()</a></td>
          <td>置換文字列 "{BASE}" の値を指定
              <br />例: "basePath=http://uupaa-js.googlecode.com/svn/trunk/"</td></tr>
      <tr><td><a name="uu.module.config.modulePath">modulePath</a></td>
          <td>String</td>
          <td>"{BASE},{BASE}mini/"</td>
          <td>モジュール検索パスをカンマ区切りで指定
              <br />複数指定可能, パスの末尾に"/"が必要
              <br />絶対URL, 相対URL, file:///... などが指定可能
              <br />例: "modulePath=mini/"
              </td></tr>
      <tr><td><a name="uu.module.config.imagePath">imagePath</a></td><td>String</td>
          <td>"{BASE}img/"</td>
          <td>画像検索パスを文字列で指定
            <br />複数指定不可, パスの末尾に"/"が必要
            <br />例: "imagePath=http://excample.com/static/image/"
            </td></tr>
      <tr><td><a name="uu.module.config.repair">repair</a></td>
          <td>Number</td>
          <td>0x1</td>
          <td>AutoRepairMode(自動修復モード)
            <br />0x0: OFF
            <br />0x1: ON, repair excanvas.js
            <br />これらの値を組み合わせて指定する
            <br />例: "repair=1"
            </td></tr>
      <tr><td><a name="uu.module.config.debug">debug</a></td>
          <td>Number</td>
          <td>0x0</td>
          <td>DebugMode(デバッグモード)
            <br />0x0: OFF
            <br />0x1: ON
            <br />0x2: ON, AutoLoad <a href="./demo/module/uu.module.config.debug.0x2.htm">FirebugLite1.2</a>
            <br />これらの値を組み合わせて指定する
            <br />例: "debug=3"
            </td></tr>
      <tr><td><a name="uu.module.config.module">module</a></td>
          <td>String</td>
          <td>""</td>
          <td>自動的にロードするモジュールをカンマ区切りで指定
              <br />複数指定可能
              <br />例: "module=dev,canvas"</td></tr>
      <tr><td><a name="uu.module.config.cacheID">cacheID</a></td>
          <td>Number</td>
          <td>0</td>
          <td><a href="./SELECTOR.htm#uu.id">uu.id</a> の検索結果を
              <br />0: キャッシュしない(低速)
              <br />1: キャッシュする(高速)</td></tr>
      </table>
  </dd>
</dl>













<hr />
<h2><a name="uu.module.perf">Performance</a> - パフォーマンス</h2>
<p>パフォーマンス測定用の機能を提供します。</p>
<p>この機能を使用するには、dev モジュールが必要です。</p>
<hr />
<dl>
<!-- -->
  <dt><a name="uu.module.perf.run">uu.module.perf.run</a> - 測定</dt>
  <dd><p>uu.module.perf.run(<i>fn</i>, <i>loop</i> = 1, <i>set</i> = 1) は、
      <i>fn</i> を <i>loop</i> 回実行し実行時間を記録します。また <i>set</i> で指定された回数だけ 実行と実行時間の記録 を繰り返します。</p>
      <p>以前の実行結果は実行前にクリアされます(累積しません)。</p>
<pre>
 @param Function       fn      - 測定対象の関数やメソッドを指定します。
 @param Number         [loop]  - fnを評価する回数を指定します。デフォルトは1です。
 @param Number         [set]   - テストを繰り返す回数を指定します。デフォルトは1です。
</pre>
      <a href="demo/canvas/bench.htm" class="run">Run</a>
  </dd>
<!-- -->
  <dt><a name="uu.module.perf.report">uu.module.perf.report</a> - リポート</dt>
  <dd><p>uu.module.perf.report() は、実行結果の Hash( { total, avg, set, dump } ) を返します。</p>
<pre>
 @return Hash - 実行した結果の情報を Hash( { total, avg, set, dump } )で返します。
</pre>
      <table>
      <tr><th>key</th><th>value</th><th>value type</th></tr>
      <tr><td>total</td><td>合計時間</td><td>Number</td></tr>
      <tr><td>avg</td><td>平均値(average)</td><td>Number</td></tr>
      <tr><td>set</td><td>テスト回数</td><td>Number</td></tr>
      <tr><td>dump</td><td>各結果</td><td>NumberArray( [ Number, ... ] )</td></tr>
      </table>
  </dd>
</dl>

<hr />
<h2><a name="uu.module.log2">Log</a></h2>
<p>ログ機能を提供します。</p>
<p>この機能を使用するには、dev モジュールが必要です。</p>
<hr />
<dl>
<!-- -->
  <dt><a name="uu.module.log2.log">uu.module.log2.log</a> - ログ出力 - Logging</dt>
  <dd><p>uu.module.log2.log(<i>fmt</i>, ...) は sprintfの書式で引数を画面に出力します。</p>
      <p>出力先は、uu.log.id で変更可能です。デフォルトは id="uuLog" の要素に出力します。<br />
         出力先が存在しない場合は、document.bodyに要素を追加し、ログを出力します。</p>
      <p>ログを出力できないタイミング(uu.window.already===false)なら、出力内容を一旦プールし、
         次回 uu.log が呼ばれたタイミングで出力します。</p>
      <p>通常は、uu.log(fmt, mix ...) と記述することで、uu.module.log2.log の機能が使えます。</p>
  </dd>
<!-- -->
  <dt><a name="uu.module.log2.inspect">uu.module.log2.inspect</a> - オブジェクトを人間用に加工し出力する - Humanize output, Object Reflection</dt>
  <dd><p>uu.module.log2.inspect(<i>mix</i>, ...) は <i>mix</i>を人間が見てわかるような形に加工します。</p>
      <p>通常は、uu.log.dir(mix ...) と記述することで、uu.module.log2.inspect の機能が使えます。</p>
  </dd>
</dl>



<hr />
<h2><a name="uu.module.canvas2d">2D Canvas</a></h2>
<p>canvasの取り扱いを簡単にします。</p>
<a href="./demo/canvas/demo.htm" class="run">DEMO</a>
<hr />
<dl>
<!-- -->
  <dt><a name="uu.module.canvas2d.construct">uu.module.canvas2d.construct</a> - Initialize - 初期化</dt>
  <dd><p>uu.module.canvas2d.construct(<i>canvas</i>) は、<i>canvas</i>要素を受け取り、初期化を行います。</p>
      <p>IEで動的に生成したcanvas要素を指定する場合は、
          <a href="http://d.hatena.ne.jp/uupaa/20080723/1216748383">事前に初期化</a>を行ってください。</p>
      <pre>
 @param Element canvas - canvas要素を指定します。
      </pre>
  </dd>
<!-- -->
  <dt><a name="uu.module.canvas2d.ctx">uu.module.canvas2d.ctx</a>- 2D context - 2Dコンテキストの取得 </dt>
  <dd><p>uu.module.canvas2d.ctx は、2Dコンテキストへの参照です。</p>
      <p>2Dコンテキストにアクセスする必要がある場合に使用します。</p>
  </dd>
<!-- -->
  <dt><a name="uu.module.canvas2d.clear">uu.module.canvas2d.clear</a> - Clear rect - 矩形範囲のクリア</dt>
  <dd><p>uu.module.canvas2d.clear(<i>x</i> = 0, <i>y</i> = 0, <i>w</i> = canvas.width, <i>h</i> = canvas.height) は、
      <i>x, y, w, h</i>で指定された矩形範囲をクリアします。</p>
      <p>全ての引数を省略すると、キャンバス全体をクリアします。</p>
      <pre>
 @param Number x - x座標を指定します。省略可能で、デフォルトは0です。
 @param Number y - y座標を指定します。省略可能で、デフォルトは0です。
 @param Number w - 幅を指定します。省略可能で、デフォルトはcanvas.widthです。
 @param Number h - 高さを指定します。省略可能で、デフォルトはcanvas.heightです。
 @return this    - thisを返します。
      </pre>
  </dd>
<!-- -->
  <dt><a name="uu.module.canvas2d.scale">uu.module.canvas2d.scale</a> - Scale -  拡大/縮小率を指定</dt>
  <dd><p>uu.module.canvas2d.scale(<i>w</i>, <i>h</i>) は、拡大縮小率を<i>w, h</i>で指定します。</p>
      <pre>
 @param Number w - 水平方向の拡大/縮小率を指定します。2を指定すると倍, 0.5を指定すると半分になります。
 @param Number h - 垂直方向の拡大/縮小率を指定します。2を指定すると倍, 0.5を指定すると半分になります。
 @return this    - thisを返します。
      </pre>
  </dd>
<!-- -->
  <dt><a name="uu.module.canvas2d.translate">uu.module.canvas2d.translate</a> - Offset origin - 原点からのオフセットを指定</dt>
  <dd><p>uu.module.canvas2d.translate(<i>x</i>, <i>y</i>) は、原点(左上隅)からのオフセット値を<i>x, y</i>で指定します。</p>
      <pre>
 @param Number x - 原点からのx座標のオフセット値を指定します。
 @param Number h - 原点からのy座標のオフセット値を指定します。
 @return this    - thisを返します。
      </pre>
  </dd>
<!-- -->
  <dt><a name="uu.module.canvas2d.rotate">uu.module.canvas2d.rotate</a> - Rotate - キャンバスを回転</dt>
  <dd><p>uu.module.canvas2d.rotate(<i>angle</i>) は、キャンバスの回転角度を指定します。</p>
      <pre>
 @param Number angle - 回転角を0～359の数値(degree)かradianで指定します。
                       setStyle("degree", true)ならradianとして解釈します。
 @return this        - thisを返します。
      </pre>
  </dd>
<!-- -->
  <dt><a name="uu.module.canvas2d.setStyle">uu.module.canvas2d.setStyle</a> - Set style - スタイルを指定</dt>
  <dd><p>uu.module.canvas2d.setStyle(<i>name</i>, <i>value</i>) は、描画スタイルを設定します。</p>
      <pre>
 @param String/Hash name  - StyleName または Hash( { StyleName: value, ... } )を指定します。
                            StyleName の代りに ShortStyleName も指定できます。
 @param Mix         value - 値を指定します。
 @return this             - thisを返します。
      </pre>
      <table>
      <tr><th>StyleName</th><th>Short<br />StyleName</th><th>value type</th><th>value</th><th>default value</th></tr>
      <tr><td>color</td><td></td><td>String</td><td>strokeやfillがグラデーションを描画できない場合に、strokeやfillの代替色を指定
                                                    <br /><br />excanvas.jsでstrokeStyleにCanvasGradientやCanvasPatternを指定するとcolorが使用される</td><td>"black"</td></tr>
      <tr><td>fillStyle</td><td>fill</td><td>String<br />CanvasGradient<br />CanvasPattern</td><td>塗りつぶす色,グラデーション,画像パターンを指定</td><td>"black"</td></tr>
      <tr><td>strokeStyle</td><td>stroke</td><td>String<br />CanvasGradient<br />CanvasPattern</td><td>線を描画する色,グラデーション,画像パターンを指定</td><td>"black"</td></tr>
      <tr><td>lineWidth</td><td>width</td><td>Number</td><td>線の太さを指定</td><td>1</td></tr>
      <tr><td>lineCap</td><td>cap</td><td>String</td><td>線の終端方法を指定<br />"butt", "round", "square"</td><td>"butt"</td></tr>
      <tr><td>lineJoin</td><td>join</td><td>String</td><td>線と線のつなぎ方を指定<br />"round", "bevel", "miter"</td><td>"miter"</td></tr>
      <tr><td>miterLimit</td><td>miter</td><td>Number</td><td>太さを持つ線と線の接合点と線の外側までの距離を制限を指定<br />(接着部分のバリとり)</td><td>10.0</td></tr>
      <tr><td>shadowColor</td><td>shadow</td><td>String</td><td>影の色を指定</td><td>透明な黒</td></tr>
      <tr><td>shadowBlur</td><td>blur</td><td>Number</td><td>影のぼかしを指定</td><td>0</td></tr>
      <tr><td>shadowOffsetX</td><td>ox</td><td>Number</td><td>影のぼかしの水平方向に対するオフセットを指定</td><td>0</td></tr>
      <tr><td>shadowOffsetY</td><td>oy</td><td>Number</td><td>影のぼかしの垂直方向に対するオフセットを指定</td><td>0</td></tr>
      <tr><td>font</td><td></td><td></td><td>フォントの大きさ太さ,ファミリーを指定</td><td>10px sans-serif</td></tr>
      <tr><td>textAlign</td><td>align</td><td></td><td>テキストの水平方向の配置方法を指定<br />"start", "end", "left", "right", "center"</td><td>"start"</td></tr>
      <tr><td>textBaseline</td><td>baseline</td><td></td><td>テキストの垂直方向の位置あわせを指定<br />"top", "hanging", "middle", "alphabetic", "ideographic", "bottom"</td><td>"alphabetic"</td></tr>
      <tr><td>globalAlpha</td><td>alpha</td><td>Number</td><td>キャンバス全体の不透明度(0.0～1.0)を指定</td><td>1.0</td></tr>
      <tr><td><span style="font-size: small">globalCompositeOperation</span></td><td>mix</td><td>String</td><td>キャンバスの合成方法を指定<br />
                                                    <br />"source-over", "source-in", "source-out", "source-atop",
                                                          "destination-over", "destination-in", "destination-out", "destination-atop",
                                                          "copy", "xor", "lighter", "darker"</td><td>source-over</td></tr>
      <tr><td>fit</td><td></td><td>Boolean</td><td>drawImage()実行時にキャンバスサイズに合わせて自動的に画像を拡大縮小する/しないを指定<br />
                                                   false: 拡大縮小しない
                                                   <br />true: 拡大縮小する</td><td>false</td></tr>
      <tr><td>degree</td><td></td><td>Boolean</td><td>angle(角度)解釈方法を指定<br />
                                                      false: angleをradianとして解釈<br />
                                                      true: angleをdegree(0～360)として解釈</td><td>true</td></tr>
      </table>
      <table>
      <caption>setStyle("mix") - Mix operator</caption>
      <tr><th>DESTINATION<br />現在のキャンバス</th><th>SOURCE<br />これから描画する画像</th>
          <th></th><th></th><th></th></tr>
      <tr><td><canvas id="rect" width="160" height="160"></canvas></td>
          <td><canvas id="circle" width="110" height="110"></canvas></td><td></td><td></td><td></td></tr>
      <tr><th>source-over</th>
          <th>source-in</th>
          <th>source-out</th>
          <th>source-atop</th>
          <th></th></tr>
      <tr><td><canvas id="source-over" width="160" height="160"></canvas></td>
          <td><canvas id="source-in" width="160" height="160"></canvas></td>
          <td><canvas id="source-out" width="160" height="160"></canvas></td>
          <td><canvas id="source-atop" width="160" height="160"></canvas></td>
          <td></td></tr>
      <tr><th>destination-over</th>
          <th>destination-in</th>
          <th>destination-out</th>
          <th>destination-atop</th>
          <th>copy</th></tr>
      <tr><td><canvas id="destination-over" width="160" height="160"></canvas></td>
          <td><canvas id="destination-in" width="160" height="160"></canvas></td>
          <td><canvas id="destination-out" width="160" height="160"></canvas></td>
          <td><canvas id="destination-atop" width="160" height="160"></canvas></td>
          <td><canvas id="copy" width="160" height="160"></canvas></td></tr>
      <tr><th>xor</th>
          <th>lighter</th>
          <th>darker</th>
          <th></th>
          <th></th></tr>
      <tr><td><canvas id="xor" width="160" height="160"></canvas></td>
          <td><canvas id="lighter" width="160" height="160"></canvas></td>
          <td><canvas id="darker" width="160" height="160"></canvas></td>
          <td></td>
          <td></td></tr>
      </table>
  </dd>
<!-- -->
  <dt><a name="uu.module.canvas2d.style">uu.module.canvas2d.style</a> - Get Style - スタイルを取得</dt>
  <dd><p>uu.module.canvas2d.style(<i>name</i>) は、描画スタイルを取得します。</p>
      Sorry undocumented
  </dd>

</dl>


<script type="text/javascript">
// source
function circle() {
  var c2d = new uu.module.canvas2d(uu.id("circle"));
  c2d.clear().setStyle({ fill: "rgba(255, 70, 70, 0.5)" }).oval(55, 55, 0, 0, 55).
              setStyle({ fill: "rgba(255, 70, 70, 1.0)" }).oval(55, 55, 0, 0, 40);
  return c2d.ctx.canvas;
}
// dest
function rect() {
  var c2d = new uu.module.canvas2d(uu.id("rect"));
  c2d.clear().setStyle({ fill: "rgba(40, 120, 255, 0.5)" }).box(10, 10, 100, 100, 20).
              setStyle({ fill: "rgba(40, 120, 255, 1.0)" }).box(25, 25, 70, 70, 20);
  return c2d.ctx.canvas;
}

function boot() {
  var src = circle(), dest = rect();
  ["source-over", "source-in", "source-out", "source-atop",
   "destination-over", "destination-in", "destination-out", "destination-atop",
   "copy", "xor", "lighter", "darker"].forEach(function(v) {
    var c2d = new uu.module.canvas2d(uu.id(v));
    c2d.image(dest, 0, 0).setStyle("mix", v).image(src, 40, 40);
  });
}
uu.module("", "canvas", function() {
  uu.ready(boot, "WC");
});
</script>


</body>
</html>
