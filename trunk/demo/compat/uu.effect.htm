<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title>uupaa.js - uu.module.effect test</title>
<script type="text/javascript" src="../../uupaa.js"></script>
<style>
html, body {
  overflow: hidden;
}
#box1 {
  position: absolute;
  top: 200px;
  left: 300px;
  width: 100px;
  height: 100px;
  border: 1px gray solid;
  background-color: black;
  color: red;
}
#table1 {
  position: absolute;
  top: 200px;
  left: 350px;
  width: 100px;
  height: 100px;
  border: 1px olive solid;
  background-color: yellow;
  color: red;
}
</style>
</head>
<body>
<a href="../../README.htm#demo">README.htm</a> &gt; uu.effect.htm

<dl>
  <dt>uu.module.effect - エフェクト</dt>
  <dd>要素を自由な位置にドラッグできます。ホイールでサイズの変更も可能です。<br />
      ボタンをクリックするとエフェクトが始まります。エフェクトの速度は、[Speed]で調節できます。<br />
      moveはDirectionで移動方向を指定し動かします。scaleはAnchorで基準となる辺を指定し動かします。
      <br /><input type="button" value="初期化(reset)" onclick="reset2()" /> でリセットできます。<br />
  </dd>
</dl>
<div id="control-panel">
  <div>
    Target:
    <select id="tgt">
      <option>box1</option>
      <option>table1</option>
      <option>table1.caption</option>
      <option>table1.tfoot</option>
      <option>table1.thead</option>
      <option>table1.tbody</option>
      <option>table1.tbody.tr1</option>
      <option>table1.tbody.tr1.td1</option>
      <option>table1.tbody.tr1.td2</option>
      <option>table1.tbody.tr2</option>
    </select>
    <br />
    Speed:
    <select id="speed">
      <option value="100">100ms</option>
      <option value="quick">quick</option>
      <option value="fast">fast</option>
      <option value="mid" selected="selected">mid</option>
      <option value="slow">slow</option>
    </select>
    <br />
    Direction and Anchor:
    <select id="da">
      <option value="0">0:Center</option>
      <option value="1">1:↑</option>
      <option value="2">2:／</option>
      <option value="3">3:→</option>
      <option value="4">4:＼</option>
      <option value="5">5:↓</option>
      <option value="6">6:／</option>
      <option value="7">7:←</option>
      <option value="8">8:＼</option>
    </select>
  </div>

  <dl>
    <dt>Fade in / Fade out:</dt>
      <dd>
        <input type="button" value="fade   " onclick="uu.effect.fade(uu.id(get('tgt')), { speed: get('speed'), fn: reset })" />
        <input type="button" value="fadein " onclick="uu.effect.fadein(uu.id(get('tgt')), { speed: get('speed'), fn: reset })" />
        <input type="button" value="fadeout" onclick="uu.effect.fadeout(uu.id(get('tgt')), { speed: get('speed'), fn: reset })" />
        <br />
        |
        <input type="button" value="fade 0.2～0.8" onclick="uu.effect.fade(uu.id(get('tgt')), { speed: get('speed'), fn: reset, begin: 0.2, end: 0.8 })" />
        <input type="button" value="fade 0.8～0.2" onclick="uu.effect.fade(uu.id(get('tgt')), { speed: get('speed'), fn: reset, begin: 0.8, end: 0.2 })" />
      </dd>
    <dt>Scale up / Scale down:</dt>
      <dd>
        <input type="button" value=" 0 x 0 " onclick="uu.effect.scale(uu.id(get('tgt')), { speed: get('speed'), fn: reset, anchor: getInt('da'), w: 0, h: 0 })" />
        <input type="button" value="100x100" onclick="uu.effect.scale(uu.id(get('tgt')), { speed: get('speed'), fn: reset, anchor: getInt('da'), w: 100, h: 100 })" />
        <input type="button" value="200x200" onclick="uu.effect.scale(uu.id(get('tgt')), { speed: get('speed'), fn: reset, anchor: getInt('da'), w: 200, h: 200 })" />
      </dd>
    <dt>Move to:</dt>
      <dd>
        <input type="button" value="center" onclick="uu.effect.move(uu.id(get('tgt')), { speed: get('speed'), fn: reset })" />
        <input type="button" value="abs(100,100)" onclick="uu.effect.move(uu.id(get('tgt')), { speed: get('speed'), fn: reset, x: 100, y: 100 })" />
        <input type="button" value="rel(direction)" onclick="moveDirection(get('tgt'))" />
      </dd>
    <dt>Combination Effects:</dt>
      <dd>
        Ghost:
        <input type="button" value="puff" onclick="uu.effect.puff(uu.id(get('tgt')), { speed: get('speed'), fn: reset })" />
        |
        <input type="button" value="drop out" onclick="uu.effect.dropOut(uu.id(get('tgt')), { speed: get('speed'), fn: reset })" />
        <br />
        Attract:
        <input type="button" value="shake" onclick="uu.effect.shake(uu.id(get('tgt')), { speed: get('speed'), fn: reset })" />
        |
        <input type="button" value="pulsate" onclick="uu.effect.pulsate(uu.id(get('tgt')), { speed: get('speed'), fn: reset })" />
        |
        <input type="button" value="fold" onclick="uu.effect.fold(uu.id(get('tgt')), { speed: get('speed'), fn: reset })" />
        <br />
        Alias:
        <input type="button" value="shrink" onclick="uu.effect.shrink(uu.id(get('tgt')), { speed: get('speed'), fn: reset })" />
        |
        <input type="button" value="glow" onclick="uu.effect.glow(uu.id(get('tgt')), { speed: get('speed'), fn: reset })" />
        |
        <input type="button" value="blindUp" onclick="uu.effect.blindUp(uu.id(get('tgt')), { speed: get('speed'), fn: reset })" />
        |
        <input type="button" value="blindDown" onclick="uu.effect.blindDown(uu.id(get('tgt')), { speed: get('speed'), fn: reset })" />
      </dd>
  </dl>
</div>

<div id="box1">box1</div>

<table id="table1">
<caption id="table1.caption">table1.caption</caption>
<thead id="table1.thead"><tr><td>thead</td><td>thead</td></tr></thead>
<tfoot id="table1.tfoot"><tr><td>tfoot</td><td>tfoot</td></tr></tfoot>
<tbody id="table1.tbody">
  <tr id="table1.tbody.tr1">
    <td id="table1.tbody.tr1.td1">td1</td>
    <td id="table1.tbody.tr1.td2">td2</td>
  </tr>
  <tr id="table1.tbody.tr2"><td>td3</td><td>td4</td></tr>
</tbody>
</table>

<script>
function reset2() {
  var e = uu.id(get("tgt"));
  uu.css.set(e, {
    position: "absolute",
    top: 300,
    left: 300,
    width: 100,
    height: 100,
    border: "1px gray solid",
    opacity: 1.0,
    display: "show",
    visibility: "visible"
  });
}
function moveDirection(id) {
  var dir = getInt('da');
  var move = [[0,0],[0,-100],[100,-100],[100,0],[100,100],[0,100],[-100,100],[-100,0],[-100,-100]];
  uu.effect.move(uu.id(id), { speed: get('speed'), fn: reset, x: move[dir][0], y: move[dir][1], rel: true });
}
function reset(elm, cssText) {
//  elm.style.cssText = cssText;
}
function get(id) {
  var elm = uu.id(id), idx = elm.selectedIndex;
  return elm.options[idx].value || elm.options[idx].text;
}
function getInt(id) {
  return parseInt(get(id));
}
function boot() {
  // メッセージポンプ
  uu.module.pmvc.activate();

  uu.ctrl.regist({
    mousedown: function(msg, param1, param2) {
      if (param1.element.id === "box1") {
        uu.id("tgt").selectedIndex = 0;
      } else if (param1.element.id === "table1") {
        uu.id("tgt").selectedIndex = 1;
      }
    },
    mousemove: function(msg, param1, param2) {
//      window.status = "mousemove";
    },
    mouseup: function(msg, param1, param2) {
//      window.status = "mouseup";
    }
  });
  // メッセージフィルタ
  function msgFilter(msg) {
    return (msg === "mousedown" || msg === "mouseup") ? true : false;
  }

  // ドラッガブル
  // "C" = uu.ctrl
  new uu.module.drag.free(uu.id("box1"),   { msgto: "C", msgFilter: msgFilter });
  new uu.module.drag.free(uu.id("table1"), { msgto: "C", msgFilter: msgFilter });
}
uu.module.load("", "ui,effect,drag,pmvc", boot);

</script>

</body>
</html>
