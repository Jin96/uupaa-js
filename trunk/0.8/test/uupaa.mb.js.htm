<!DOCTYPE HTML><html lang="ja"><head><meta charset="UTF-8" />
<title>uupaa.js - unittest</title>

<script src="../uupaa.mb.js"></script>
</head><body>
<div style="display:none">
    <div id="div" class="class" title="title">text</div>

    <div id="_div" class="class" title="title">text</div>
    <a id="_a" href="/a"></a>
    <label id="_label" for="a" accesskey="a" tabindex="1"></label>
    <table><tr id="_tr" rowspan="2"><td id="_td" colspan="2">aa</td></tr></table>
</div>
<script>
uu.ready(function(uu) {

    uu.ok("uu.array()");
    (function() {
        var ary1 = [1, 2];
        var ref1 = ary1;
        uu.ok("[1][through] uu.array([1,2]) は引数で与えられた [1,2] をそのまま返す(複製しない)",
              uu.array(ary1), "===", ref1);
    })();
    uu.ok("[2][to ary] uu.array(12) は [12] を返す", uu.array(12), "==", [12]);
    uu.ok("[2][to ary] uu.array('12') は ['12'] を返す", uu.array('12'), "==", ['12']);
    uu.ok("[3][convert NodeList] uu.array(document.getElementsByTagName('HTML')) は NodeList を配列に変換できる。その結果は uu.query('html') と等しい",
            uu.array(document.getElementsByTagName('HTML')), "==", uu.query('html'));
    uu.ok("[3][convert NodeList] uu.array(document.getElementsByTagName('HTML')) は NodeList を配列に変換できる。その結果は [document.documentElement] と等しい",
            uu.array(document.getElementsByTagName('HTML')), "==", [document.documentElement]);
    (function() {
        function uuarytest1() {
          return uu.array(arguments);
        }
        var rv = uuarytest1(1, 2, 3);

        uu.ok("[4][convert arguments] uu.array(arguments) は 引数(1, 2, 3)を配列( [1, 2, 3] )に変換できる",
                rv, "==", [1, 2, 3]);
    })();

    uu.ok("uu.array.has()");
    uu.ok("[1][has array] uu.array.has([1, 2, 3], 1) は true", uu.array.has([1, 2, 3], 1), "is true");
    uu.ok("[1][has array] uu.array.has([1, 2, 3], '1') は false", uu.array.has([1, 2, 3], '1'), "is false");
    uu.ok("[1][has array] uu.array.has(['1', 2, 3], '1') は true", uu.array.has(['1', 2, 3], '1'), "is true");
    uu.ok("[1][has array] uu.array.has(['1', , 2, 3], 2) は true (粗い配列でもとりあえずOK)", uu.array.has(['1', , 2, 3], 2), "is true");
    uu.ok("[1][has array] uu.array.has(['1', , 2, 3], undefined) は false (undefined は検索できない)", uu.array.has(['1', , 2, 3], undefined), "is false");
    uu.ok("[1][has array] uu.array.has(['1', undefined, 2, 3], undefined) は false (undefined は検索できない)", uu.array.has(['1', undefined, 2, 3], undefined), "is false");
    uu.ok("[1][has array] uu.array.has([1, 2, 3], [1, 2]) は true", uu.array.has([1, 2, 3], [1, 2]), "is true");
    uu.ok("[2][has node] uu.array.has([document, document.body], document.body) は true", uu.array.has([document, document.body], document.body), "is true");
    uu.ok("[3][has node] uu.array.has([document, document.body, document.getElementsByTagName('head')[0]], [document, document.body]) は true", uu.array.has([document, document.body, document.getElementsByTagName('head')[0]], [document, document.body]), "is true");

    uu.ok("uu.array.size()");
    uu.ok("配列サイズは2", uu.array.size([ 1, 2 ]), "==", 2);
    uu.ok("uu.array.sort()");
    uu.ok("[1][num 0-9] uu.array.sort([11, 222, 4], '0-9') は 数字順(0→9)([4, 11, 222])にソートされる",
            uu.array.sort([4, 11, 222], "0-9"), "==", [4, 11, 222]);
    uu.ok("[2][num 9-0] uu.array.sort([11, 222, 4], '9-0') は 数字順(9→0)([222, 11, 4])にソートされる",
            uu.array.sort([4, 11, 222], "9-0"), "==", [222, 11, 4]);
    uu.ok("[3][ascii a-z] uu.array.sort(['z', 'a', 'b', 'c'], 'A-Z') は 英字順(A→Z)(['a', 'b', 'c', 'z'])にソートされる",
            uu.array.sort(['z', 'a', 'b', 'c'], "A-Z"), "==", ['a', 'b', 'c', 'z']);
    uu.ok("[4][ascii a-z] uu.array.sort(['z', 'a', 'b', 'c'], 'Z-A') は 英字順(Z→A)(['z', 'c', 'b', 'a'])にソートされる",
            uu.array.sort(['z', 'a', 'b', 'c'], "Z-A"), "==", ['z', 'c', 'b', 'a']);
    uu.ok("[5][user func] uu.array.clean([,,1,2,,]) は [1, 2]", uu.array.clean([,,1,2,,]), "==", [1, 2]);


    uu.ok("uu.array.clean()");

    (function() {
        var ary = [1, 2, 3];
        delete ary[1];

        uu.ok("uu.array.clean(var ary=[1,2,3]; delete ary[1]) == [1,3]。uu.array.clean は 欠落(delete)した要素や null をスキップする",
                uu.array.clean(ary), "==", [1, 3]);
    })();
    (function() {
        var ary = [1,2,,null,3];
        delete ary[1];

        uu.ok("uu.array.clean(var ary=[1,2,,null,3]; delete ary[1]) == [1,3]。uu.array.clean は 欠落(delete)した要素や null をスキップする",
            uu.array.clean(ary), "==", [1, 3]);
    })();
    uu.ok("uu.array.clean([,,1,2,,]) == [1, 2]", uu.array.clean([,,1,2,,]), "==", [1, 2]);
    uu.ok("uu.array.clean([,null,1,2,,]) == [1, 2]", uu.array.clean([,null,1,2,,]), "==", [1, 2]);
    uu.ok("uu.array.clean([null]) == []", uu.array.clean([null]), "==", []);
    uu.ok("uu.array.clean([void 0]) == []", uu.array.clean([void 0]), "==", []);
    uu.ok("uu.array.clean([]) == []", uu.array.clean([]), "==", []);

    uu.ok("uu.array.dump()");
    uu.ok('uu.array.dump([1, 2, 3]) == "010203"', uu.array.dump([1, 2, 3]), "==", "010203");
    uu.ok('uu.array.dump([1, 2, 3], "0x", ", 0x") == "0x01, 0x02, 0x03"', uu.array.dump([1, 2, 3], "0x", ", 0x"), "==", "0x01, 0x02, 0x03");

    uu.ok("Array.filter()");
    uu.ok("Array.filter([12, 5, 8, 130, 44], function(v) { return v >= 10; }) は [12, 130, 44] を返す",
            [12, 5, 8, 130, 44].filter(function(v) { return v >= 10; }), "==", [12, 130, 44]);
    uu.ok("Array.every()");
    uu.ok("Array.every([12, 5, 8, 130, 44], function(v) { return v >= 10; }) は false を返す",
            [12, 5, 8, 130, 44].every(function(v) { return v >= 10; }), "is false");
    uu.ok("Array.every([12, 54, 18, 130, 44], function(v) { return v >= 10; }) は true を返す",
            [12, 54, 18, 130, 44].every(function(v) { return v >= 10; }), "is true");
    uu.ok("Array.some()");
    uu.ok("Array.some([12, 5, 8, 130, 44], function(v) { return v < 10; }) は true を返す",
            [12, 5, 8, 130, 44].some(function(v) { return v < 10; }), "is true");
    uu.ok("Array.some([12, 54, 18, 130, 44], function(v) { return v < 10; }) は false を返す",
            [12, 54, 18, 130, 44].some(function(v) { return v < 10; }), "is false");
    uu.ok("Array.map()");
    uu.ok("Array.map([1, 2, 3, 4, 5], function(v) { return v * 2; }) は [2, 4, 6, 8, 10] を返す",
            [1, 2, 3, 4, 5].map(function(v) { return v * 2; }), "==", [2, 4, 6, 8, 10]);
    uu.ok("uu.attr()");
    uu.ok("[1][get all pair] uu.attr(uu.id('div')) は Hash を返す(結果はブラウザ依存)",
            uu.attr(uu.id('div')), "is hash");
    uu.ok("[2][get pair] uu.attr(uu.id('div'), 'id') は 'div' } と等しい",
            uu.attr(uu.id('div'), 'id'), "==", 'div');

    if (uu.attr(uu.id('div'), 'title', 'hoge') !== uu.id('div')) {
        uu.ok("[3][set pair] uu.attr(uu.id('div'), 'title', 'hoge') は node を返し、title は hoge に設定される",
                uu.attr(uu.id('div'), 'title', 'hoge'), "is fail");
    } else {
        uu.ok("[3][set pair] uu.attr(uu.id('div'), 'title', 'hoge') は node を返し、title は hoge に設定される",
                uu.attr(uu.id('div'), 'title'), "==", 'hoge');
    }

    if (uu.attr(uu.id('div'), { 'class': 'A1', title: 'title' }) !== uu.id('div')) {
        uu.ok("[4][set pair] uu.attr(uu.id('div'), { 'class': 'A1', title: 'title' }) は node を返し、className は A1 に、 title は title に設定される",
                uu.attr(uu.id('div'), { 'class': 'A1', title: 'title' }), "is fail");
    } else {
        uu.ok("[4][set pair] uu.attr(uu.id('div'), { 'class': 'A1', title: 'title' }) は node を返し、className は A1 に、 title は title に設定される",
                uu.attr(uu.id('div'), 'title'), "==", 'title');
    }

    (function() {
        var e;
        document.body.appendChild(e = uu.a({ href: "http://example.com/", title: "long" }, "link"));
        var v = uu.attr(e, "href");

        uu.ok("[IE][FIX] hrefが絶対URLなら、設定値をそのまま取得する、uu.attr({ href: 'http://example.com/' })",
                v, "==", "http://example.com/");
    })();

    (function() {
        var e;
        document.body.appendChild(e = uu.a({ href: "../dummy.jpg", title: "long" }, "link"));
        var v = uu.attr(e, "href");

        uu.ok("[IE][FIX] hrefが相対URLでも、設定値をそのまま取得する(フルパスに変換しない)、uu.attr({ href: '../dummy.jpg' })",
            v, "==", "../dummy.jpg");
    })();

    uu.ok("[get class] uu.attr(uu.id('_div'), 'class') は 'class' } と等しい",
            uu.attr(uu.id('_div'), 'class'), "==", 'class');
    uu.ok("[get className] uu.attr(uu.id('_div'), 'className') は 'class' } と等しい",
            uu.attr(uu.id('_div'), 'className'), "==", 'class');
    uu.ok("[get for] uu.attr(uu.id('_label'), 'for') は 'a' } と等しい",
            uu.attr(uu.id('_label'), 'for'), "==", 'a');
    uu.ok("[get htmlFor] uu.attr(uu.id('_label'), 'htmlFor') は 'a' } と等しい",
            uu.attr(uu.id('_label'), 'htmlFor'), "==", 'a');
    uu.ok("[get colspan] uu.attr(uu.id('_td'), 'colspan') は '2' } と等しい",
            uu.attr(uu.id('_td'), 'colspan'), "==", '2');
    uu.ok("[get colSpan] uu.attr(uu.id('_td'), 'colSpan') は '2' } と等しい",
            uu.attr(uu.id('_td'), 'colSpan'), "==", '2');
    uu.ok("[get rowspan] uu.attr(uu.id('_tr'), 'rowspan') は '2' } と等しい",
            uu.attr(uu.id('_tr'), 'rowspan'), "==", '2');
    uu.ok("[get rowSpan] uu.attr(uu.id('_tr'), 'rowSpan') は '2' } と等しい",
            uu.attr(uu.id('_tr'), 'rowSpan'), "==", '2');
    uu.ok("[get accesskey] uu.attr(uu.id('_label'), 'accesskey') は 'a' } と等しい",
            uu.attr(uu.id('_label'), 'accesskey'), "==", 'a');
    uu.ok("[get accessKey] uu.attr(uu.id('_label'), 'accessKey') は 'a' } と等しい",
            uu.attr(uu.id('_label'), 'accessKey'), "==", 'a');
    uu.ok("[get tabindex] uu.attr(uu.id('_label'), 'tabindex') は '1' } と等しい",
            uu.attr(uu.id('_label'), 'tabindex'), "==", '1');
    uu.ok("[get tabIndex] uu.attr(uu.id('_label'), 'tabIndex') は '1' } と等しい",
            uu.attr(uu.id('_label'), 'tabIndex'), "==", '1');

    uu.ok("uu.attr() - set attr");
    (function() {
        uu.attr(uu.id('div'), { title: 'unittest' });

        var rv = uu.attr(uu.id('div'), 'title');

        uu.ok("[1][set some attrs] uu.attr(uu.id('div'), { title: 'unittest' }) で設定された値と uu.attr(uu.id('div'), 'title') の結果は等しい",
                "unittest", "==", rv);
    })();

    uu.ok("uu.Class()");
    (function() {
        uu.Class("UNITTEST1");

        var obj1 = uu("UNITTEST1");
        var obj2 = uu("UNITTEST1");

        uu.ok("uu.Class は複数回生成すると別々のインスタンスを返す", obj1, "!=", obj2);
    })();

    uu.ok("uu.Class.singleton()");
    (function() {
        uu.Class.singleton("UNITTEST2");
        var obj1 = uu("UNITTEST2");
        var obj2 = uu("UNITTEST2");

        uu.ok("uu.Class.singleton は複数回生成しても同じインスタンスを返す",
                obj1, "==", obj2);
    })();

    uu.ok("uu(new Class)");
    (function() {
        uu.Class("UNITTEST1"); // define

        var obj1 = uu("UNITTEST1");

        uu.ok("[1][create instance] uu('UNITTEST1', 1, 2) は new uu.Class('UNITTEST1', 1, 2) の結果(インスタンス)を返す",
                obj1, "instanceof", uu.Class.UNITTEST1);
    })();

    uu.ok("uu.klass.has()");
    (function() {
        uu.id('div').className = "";
        uu.klass.add(uu.id('div'), "A1 A2 A3");
        uu.ok("uu.klass.has(uu.id('div')) ( 'A1 A2 A3') は 'A1 A3' を含んでいる",
            uu.klass.has(uu.id('div'), "A1 A3"), "is true");


        uu.id('div').className = "";
        uu.klass.add(uu.id('div'), "A1 A2 A3");
        uu.ok("uu.klass.has(uu.id('div')) ( 'A1 A2 A3') は ' A2 ' を含んでいる",
            uu.klass.has(uu.id('div'), " A2 "), "is true");


        uu.id('div').className = "";
        uu.klass.add(uu.id('div'), "あ い う");
        uu.ok("uu.klass.has(uu.id('div')) ( 'あ い う') は ' い ' を含んでいる",
            uu.klass.has(uu.id('div'), " い "), "is true");


        uu.id('div').className = "";
        uu.klass.add(uu.id('div'), "うい");
        uu.ok("uu.klass.has(uu.id('div')) ( 'うい') は 'い' を含んでいない",
            uu.klass.has(uu.id('div'), "い"), "is false");
    })();


    uu.ok("uu.klass.add()");
    (function() {
        uu.id('div').className = "";
        uu.klass.add(uu.id('div'), "A1 A2 A3");
        uu.klass.add(uu.id('div'), "A4 A1");

        uu.ok("uu.klass.add(uu.id('div')) ( ' A1 A2 A3' ) に 'A4 A1' を足すと ' A1 A2 A3 A4 A1' になる",
            uu.id('div').className, "==", ' A1 A2 A3 A4 A1');
    })();

    uu.ok("uu.klass.remove()");
    (function() {
        uu.id('div').className = "A1 A2 A3 A4 A1";
        uu.klass.remove(uu.id('div'), "A1  A4");
        uu.ok("uu.klass.remove(uu.id('div')) ( 'A1 A2 A3 A4 A1' )から( 'A1　　A4' )を引くと 'A2 A3' になる",
            uu.id('div').className, "==", 'A2 A3');


        uu.id('div').className = "B1 B2";
        uu.klass.remove(uu.id('div'), "A1 A2 A3 A4 A1");
        uu.ok("uu.klass.remove(uu.id('div')) ( 'B1 B2' )から 存在しないクラス( 'A1 A2 A3 A4 A1' )を引いてもエラーにならない",
            uu.id('div').className, "==", 'B1 B2');
    })();


    uu.ok("uu.klass.toggle()");
    (function() {
        uu.id('div').className = "A1 A2 B1 B2";
        uu.klass.toggle(uu.id('div'), "A2 B2");
        uu.ok("uu.klass.toggle(uu.id('div')) ( 'A1 A2 B1 B2' ) から 'A2 B2' をトグルすると、'A1 B1' になる",
            uu.id('div').className, "==", 'A1 B1');


        uu.id('div').className = "A1 B1";
        uu.klass.toggle(uu.id('div'), "A2 B2");
        uu.ok("uu.klass.toggle(uu.id('div')) ( 'A1 B1' ) から 'A2 B2' をトグルすると、'A1 B1 A2 B2' になる",
            uu.id('div').className, "==", 'A1 B1 A2 B2');
    })();

    uu.ok("uu.hash()");
    (function() {
        var hash = { key: 'value' };

        uu.ok("[1][through] uu.hash({ key: 'value' }) はハッシュをそのままスルーし { key: 'value' } を返す",
            uu.hash(hash), "===", hash);

        uu.ok("[2][to hash] uu.hash('key', 123) == { key: 123 }",
            uu.hash('key', 123), "==", { key: 123 });
    })();

    uu.ok("uu.hash.has()");
    (function() {
        uu.ok("uu.hash.has({ a: 1, b: 2, c: 3 }, { a: 1, b: 2 }) == true",
            uu.hash.has({ a: 1, b: 2, c: 3 }, { a: 1, b: 2 }), "is true");
        uu.ok("uu.hash.has({ a: 1, b: 2, c: 3 }, { a: '1', b: 2 }) == false",
            uu.hash.has({ a: 1, b: 2, c: 3 }, { a: '1', b: 2 }), "is false");
        uu.ok("uu.hash.has({ a: function() { return 'a'}, b: 2, c: 3 }, { a: function() { return 'a'}, b: 2 }) == true",
            uu.hash.has({ a: function() { return 'a'}, b: 2, c: 3 }, { a: function() { return 'a'}, b: 2 }), "is true");
        uu.ok("uu.hash.has({ a: function() { return 'b'}, b: 2, c: 3 }, { a: function() { return 'a'}, b: 2 }) == true  無名関数は同じものとして比較するため true になる",
            uu.hash.has({ a: function() { return 'b'}, b: 2, c: 3 }, { a: function() { return 'a'}, b: 2 }), "is true");

        function hoge() {
            return "b";
        }
        function huga() {
            return "c";
        }

        uu.ok("uu.hash.has({ a: function hoge() { return 'b'}, b: 2, c: 3 }, { a: function huga() { return 'a'}, b: 2 }) == false  有名関数はfunction.name を比較するため false になる",
            uu.hash.has({ a: hoge, b: 2, c: 3 }, { a: huga, b: 2 }), "is false");
    })();

    uu.ok("uu.hash.size()");
    uu.ok("ハッシュサイズは2",
            uu.hash.size({ aaa: 1, bbb: 2 }), "==", 2);

    uu.ok("uu.keys()");
    uu.ok("{ key: 1, key2: 2 } から key の配列[key, key2]を生成する",
            uu.keys({ key: 1, key2: 2 }), "==", ["key", "key2"]);

    uu.ok("uu.values()");
    uu.ok("{ key: 1, key2: 2 } から値の配列[1,2]を生成する",
            uu.values({ key: 1, key2: 2 }), "==", [1, 2]);
    uu.ok("uu.hash.indexOf()");
    uu.ok("uu.hash.indexOf({ a: 1, b: 2, c: 2 }, 2) == 'b'",
            uu.hash.indexOf({ a: 1, b: 2, c: 2 }, 2), "==", 'b');
    uu.ok("uu.array.toHash()");
    uu.ok("['key', 'key2'] と ['1', '2'] から { key: '1', key2: '2' } を生成する",
            uu.array.toHash(['key', 'key2'], ['1', '2']), "==", { key: '1', key2: '2' });
    uu.ok("['key', 'key2'] と ['1', '2'] から { key: 1, key2: 2 } を生成する(value を数値化)",
            uu.array.toHash(['key', 'key2'], ['1', '2'], 1), "==", { key: 1, key2: 2 });
    uu.ok("['key', 'key2'] と '1' から { key: '1', key2: '1' } を生成する",
            uu.array.toHash(['key', 'key2'], '1'), "==", { key: '1', key2: '1' });
    uu.ok("['key', 'key2'] と '1' から { key: 1, key2: 1 } を生成する(value を数値化)",
            uu.array.toHash(['key', 'key2'], '1', 1), "==", { key: 1, key2: 1 });


    uu.ok("MessagePump");
    (function() {
        uu.Class("MSGBOXTEST1", {
          msgbox: function(msg, param) {
  //          uu.puff("got msg: %s %s", msg, param);
            return 1;
          }
        });
        uu.Class("MSGBOXTEST2", {
          msgbox: function(msg, param) {
  //          uu.puff("got msg: %s %s", msg, param);
            return 2;
          }
        });
        var obj1 = uu("MSGBOXTEST1");
        var obj2 = uu("MSGBOXTEST2");

        var rv1 = uu.msg.send(obj1, "obj1 == obj2", "p1");
        var rv2 = uu.msg.send(obj2, "obj2 == obj1", "p1");

        uu.ok("MSGBOXTEST1 と MSGBOXTEST2 にユニキャストすると [1] と [2] が帰ってくる",
            rv1[0] === 1, "&&", rv2[0] === 2);
    })();


    uu.ok("uu.node.add()");
    (function() {
        var fg = '\
<div id="ctx">\
  <div id="first">first</div>\
  <div id="prev">prev</div>\
  <div id="tgt">tgt\
    <div id="firstChild">firstChild</div>\
    <div><div id="onlyChild"></div></div>\
    <div id="lastChild">lastChild</div>\
  </div>\
  <div id="next">next</div>\
  <div id="last">last</div>\
</div>';

        uu.ok("uu.node.add('<div id=\"ctx\">...</div>') is node",
            uu.node.add(fg), "is node");
    })();

    uu.ok("uu.node.has()");
    uu.ok("uu.node.has(uu.id('ctx'), uu.id('tgt')) == true",
            uu.node.has(uu.id('ctx'), uu.id('tgt')), "is true");
    uu.ok("uu.node.has(uu.id('ctx'), uu.id('ctx')) == false",
            uu.node.has(uu.id('ctx'), uu.id('ctx')), "is false");
    uu.ok("uu.node.has(uu.id('ctx'), document.body) == false",
            uu.node.has(uu.id('ctx'), document.body), "is false");


    uu.ok("uu.node.children()");
    uu.ok("uu.node.children(uu.id('tgt'))",
            uu.node.children(uu.id('tgt')).length, "==", 3);


    uu.ok("uu.node.remove()");
    uu.ok("uu.node.remove(uu.id('ctx'))",
            uu.node.remove(uu.id('ctx')), "is node");

    uu.ok("uu.data()");
    (function() {
        uu.ok("[1][get all pair] uu.data(document.body) で bodyに格納したデータが取り出せる(Hash が返る)",
                uu.data(document.body), "is hash");


        uu.data(document.body, 'key', 'value');
        var rv = uu.data(document.body, 'key');
        uu.ok("[2][get pair] uu.data(document.body, 'key', 'value') で body に設定されたデータ(key)を取り出せる",
                rv, "==", 'value');


        uu.data(document.body, 'key', 'value'); // set
        uu.data(document.body, 'key', null);    // remove
        var rv = uu.data(document.body, 'key'); // get
        uu.ok("[3][set pair] uu.data(document.body, 'key', null) で body に設定されているデータ(key)を削除できる",
            rv, "is null");


        uu.ok("uu.data.clear()");


        uu.data.clear(document.body, 'key');
        var rv = uu.data(document.body, 'key');
        uu.ok("[1][clear data] uu.data.clear(document.body, 'key') で key に関連するデータを消せる(null になる)",
            rv, "is null");


        uu.data(document.body, 'key', { hoge: 1, huga: 2 });
        uu.data.clear(document.body, 'key');
        var rv = uu.data(document.body, 'key');
        uu.ok("[1][clear data] uu.data.clear(document.body, 'key') で key に関連するデータを消せる(value = { hoge: 1, huga: 2 })",
            rv, "is null");


        uu.data.clear(document.body, 'key');
        var rv = uu.data(document.body, 'key');
        uu.ok("[1][clear data] uu.data.clear(document.body, 'key') で key に関連するデータを消せる(value = null)",
            rv, "is null");


        uu.data(document.body, 'key', { hoge: 1, huga: 2 });
        uu.data.clear(document.body);
        var rv = uu.data(document.body, 'key');
        uu.ok("[2][clear all data] uu.data.clear(document.body) ノードに保存したデータを全て消せる",
            rv, "is null");
    })();


    uu.ok("uu.fix()");
    uu.ok('uu.fix("-webkit-shadow") == "-webkit-shadow"',
            uu.fix("-webkit-shadow"), "==", "-webkit-shadow");
    if (uu.webkit) {
        uu.ok('uu.fix("-webkit-box-shadow") == "WebkitBoxShadow"',
                uu.fix("-webkit-box-shadow"), "==", "WebkitBoxShadow");
    }
    if (uu.gecko) {
        uu.ok('uu.fix("-moz-appearance") == "MozAppearance"',
                uu.fix("-moz-appearance"), "==", "MozAppearance");
    }
    if (uu.ie) {
        uu.ok('uu.fix("-ms-block-progression") == "msBlockProgression"',
                uu.fix("-ms-block-progression"), "==", "msBlockProgression");
    }
    if (uu.opera) {
        uu.ok('uu.fix("-o-transition-property") == "OTransitionProperty"',
                uu.fix("-o-transition-property"), "==", "OTransitionProperty");
    }

    uu.ok('uu.fix("background-color") == "backgroundColor"',
            uu.fix("background-color"), "==", "backgroundColor");
    uu.ok('uu.fix("float") == "cssFloat" or "styleFloat"(IE6, IE7)',
            uu.fix("float"), "==", uu.ie && uu.ver < 8 ? "styleFloat" : "cssFloat")

    if (uu.ver.ie6 || uu.ver.ie7) {
        uu.ok('uu.fix("for") == "for"',
                uu.fix("for"), "!=", "for");
    } else {
        uu.ok('uu.fix("for") == "for"',
                uu.fix("for"), "==", "for");
    }

    if (uu.ver.ie6 || uu.ver.ie7) {
        uu.ok('uu.fix("htmlFor") == "for"',
                uu.fix("htmlFor"), "!=", "for");
    } else {
        uu.ok('uu.fix("htmlFor") == "for"',
                uu.fix("htmlFor"), "==", "for");
    }

    uu.ok('uu.fix("d") == "display"',
            uu.fix("d"), "==", "display");
    uu.ok('uu.fix("w") == "width"',
            uu.fix("w"), "==", "width");
    uu.ok('uu.fix("h") == "height"',
            uu.fix("h"), "==", "height");
    uu.ok('uu.fix("x") == "left"',
            uu.fix("x"), "==", "left");
    uu.ok('uu.fix("l") == "left"',
            uu.fix("l"), "==", "left");
    uu.ok('uu.fix("y") == "top"',
            uu.fix("y"), "==", "top");
    uu.ok('uu.fix("t") == "top"',
            uu.fix("t"), "==", "top");
    uu.ok('uu.fix("o") == "opacity"',
            uu.fix("o"), "==", "opacity");
    uu.ok('uu.fix("c") == "color"',
            uu.fix("c"), "==", "color");
    uu.ok('uu.fix("bg") == "background"',
            uu.fix("bg"), "==", "background");
    uu.ok('uu.fix("bgc") == "backgroundColor"',
            uu.fix("bgc"), "==", "backgroundColor");
    uu.ok('uu.fix("bgi") == "backgroundImage"',
            uu.fix("bgi"), "==", "backgroundImage");
    uu.ok('uu.fix("z") == "zIndex"',
            uu.fix("z"), "==", "zIndex");
    uu.ok('uu.fix("fs") == "fontSize"',
            uu.fix("fs"), "==", "fontSize");

    uu.ok("uu.trim()");
    uu.ok("uu.trim('nospace') == 'nospace'",
            uu.trim('nospace'), "==", 'nospace');
    uu.ok("uu.trim('has space') == 'has space'",
            uu.trim('has space'), "==", 'has space');
    uu.ok("uu.trim('  has  space  ') == 'has  space'",
            uu.trim('  has  space  '), "==", 'has space');
    uu.ok("uu.trim('') == ''",
            uu.trim(''), "==", '');
    uu.ok("uu.trim('  diet  inner  space  ') == 'diet inner space'",
            uu.trim('  diet  inner  space  '), "==", 'diet inner space');

    uu.ok("uu.trim.tag()");
    uu.ok('uu.trim.tag(" <h1>A</h1>  B  <p>C</p> ") == "A B C"',
            uu.trim.tag(" <h1>A</h1>  B  <p>C</p> "), "==", "A B C");
    uu.ok('uu.trim.tag("A B C</p> ") == "A B C"',
            uu.trim.tag("A B C</p> "), "==", "A B C");
    uu.ok('uu.trim.tag("<div>A B C</p> ") == "A B C"',
        uu.trim.tag("<div>A B C</p> "), "==", "A B C");
    uu.ok('uu.trim.tag("<div><p>A</p></div> B<p>  C</p> ") == "A B C"',
        uu.trim.tag("<div><p>A</p></div> B<p>  C</p> "), "==", "A B C");

    uu.ok("uu.trim.func()");
    uu.ok('uu.trim.func(\' url("http://...") \') == \'"http://..."\'',
        uu.trim.func(' url("http://...")' ), "==", '"http://..."');
    uu.ok("uu.trim.func(\"url('http://...')\") == \"'http://...'\"",
        uu.trim.func("url('http://...')"), "==", "'http://...'");
    uu.ok("uu.trim.quote(uu.trim.func(\"url('http://...')\")) == 'http://...'",
        uu.trim.quote(uu.trim.func("url('http://...')")), "==", "http://...");
    uu.ok("uu.trim.func('rgba(1, 2, 3, 0)') == \"1, 2, 3, 0\"",
        uu.trim.func('rgba(1, 2, 3, 0)'), "==", "1, 2, 3, 0");
    uu.ok("uu.trim.func('http://...') == \"http://...\" 関数() で囲まれていない場合は何もしない",
        uu.trim.func('http://...'), "==", "http://...");


    uu.ok("uu.trim.quote()");

    uu.ok("uu.trim.quote(\" 'has  space' \") == \"has  space\"",
        uu.trim.quote(" 'has  space' "), "==", "has  space");
      uu.ok('uu.trim.quote(\' "has  space" \') == "has  space"',
        uu.trim.quote(' "has  space" '), "==", "has  space");


    uu.ok("uu.hash()");

    var hash = uu.hash('key,a,key2,b');
    uu.ok("[3][split , str] uu.hash('key,a,key2,b') == { key: 'a', key2: 'b' }",
        hash, "==", { key: 'a', key2: 'b' });

    var dateHash = uu.date();
    uu.ok("uu.date");
    uu.ok("uu.date() は DateHash を返す",
        dateHash, "is hash");

    uu.ok("uu.date().ISO() は現在時刻を ISO8601 形式で返す",
        uu.date().ISO(), "is string");

    uu.ok("uu.date().GMT() は現在時刻を GMT (RFC1123) 形式で返す",
        uu.date().GMT(), "is string");

    (function() {
        var now = new Date;
        now.setMilliseconds(0); // ms を切り落として比較する

        var dateHash = uu.date(now);

        var isoString = dateHash.ISO();
        var rv = uu.date(isoString);

        uu.ok("uu.date(uu.date(new Date).ISO()) で元に戻る",
            dateHash.time, "==", rv.time);
    })();
    (function() {
        var now = new Date;
        now.setMilliseconds(0); // ms を切り落として比較する

        var dateHash = uu.date(now);

        var isoString = dateHash.GMT();
        var rv = uu.date(isoString);

        uu.ok("uu.date(uu.date(new Date).GMT()) で元に戻る",
            dateHash.time, "==", rv.time);
    })();

    uu.ok("Type");
    uu.ok("null は null 型",                        null,       "is null");
    uu.ok("void 0 は undefined 型(is undefined)",   void 0,     "is undefined");
    uu.ok("{} は hash 型(is hash)",                 {},         "is hash");
    uu.ok("[] は array 型(is array)",               [],         "is array");
    uu.ok("[] は array 型(is array)",               [],         "is array");
    uu.ok("false は boolean 型(is boolean)",        false,      "is boolean");
    uu.ok("true は boolean 型(is boolean)",         true,       "is boolean");
    uu.ok("123 は number 型(is number)",            123,        "is number");
    uu.ok("-123.4 は number 型(is number)",         -123.4,     "is number");
    uu.ok("1 / 0 は number 型(is number)",          1 / 0,      "is number");
    uu.ok("0 / 0 は number 型(is number)",          0 / 0,      "is number");
    uu.ok("'' は string 型(is string)",             '',         "is string");
    uu.ok("function(){} は function 型",            function(){}, "is function");
    uu.ok("document.body は node 型",               document.body, "is node");
    uu.ok("document.getElementsByTagName('body') は fake 型",
                                                    document.getElementsByTagName('body'), "is FakeArray");
    uu.ok("new Date は date 型",                    new Date,   "is date");
    uu.ok("uu.type(123) は Number 型 の戻り値を返す",
                                                    uu.type(123), "is number");
    uu.ok("uu.type(123) === uu.type.STRING は false",
                                                    uu.type(123) === uu.type.STRING, "is false");
    uu.ok("new Boolean(false) は boolean 型",
                                                    new Boolean(false), "is boolean");
    uu.ok("new Number(1) は number 型",
                                                    new Number(''), "is number");
    uu.ok("new String('') は string 型",
                                                    new String(''), "is string");

    uu.ok("Array.isArray()");
    uu.ok("Array.isArray([]) is true",          Array.isArray([]), "is true");
    uu.ok("Array.isArray(new Array) is true",   Array.isArray(new Array), "is true");
    uu.ok("Array.isArray(Array()) is true",     Array.isArray(Array()), "is true");
    uu.ok("Array.isArray('abc'.match(/(a)+/g)) is true",
                                                Array.isArray('abc'.match(/(a)+/g)), "is true");
    uu.ok("Array.isArray((function(){ return Array.isArray(arguments); })()) is false",
                                                (function(){ return Array.isArray(arguments); })(), "is false");
    uu.ok("Array.isArray() is false",           Array.isArray(), "is false");
    uu.ok("Array.isArray(null) is false",       Array.isArray(null), "is false");
    uu.ok("Array.isArray(undefined) is false",  Array.isArray(undefined), "is false");
    uu.ok("Array.isArray(true) is false",       Array.isArray(true), "is false");
    uu.ok("Array.isArray(false) is false",      Array.isArray(false), "is false");
    uu.ok("Array.isArray('a string') is false", Array.isArray('a string'), "is false");
    uu.ok("Array.isArray({}) is false",         Array.isArray({}), "is false");
    uu.ok("Array.isArray({length: 5}) is false",Array.isArray({length: 5}), "is false");
    uu.ok("Array.isArray({__proto__: Array.prototype, length:1, 0:1, 1:2}) is false",
                                                Array.isArray({__proto__: Array.prototype, length:1, 0:1, 1:2}), "is false");


    uu.ok("2010-04-29");
    (function() {
        uu.Class("SyntaxSugar", function() {
            this.val = 1;
        });

        uu.Class("FullSyntax", {
            init: function() {
                this.val = 1;
            }
        });

        var obj1 = uu("SyntaxSugar");
        var obj2 = uu("FullSyntax");

        uu.ok("uu.Class('SyntaxSugar', function() {\n this.val = 1;\n})\nは\nuu.Class('FullSyntax', {\ninit: function() {\nthis.val = 1;\n}\n})\nのシンタックスシュガーとして機能する",
            obj1.val, "==", obj2.val);
    })();

    uu.ok("Array.reduce");
    (function() {
        var rv = [0,1,2,3,4].reduce(function(p, c, i){ return p + c; });
        uu.ok("[0,1,2,3,4].reduce(function(p, c, i){ return p + c; })",
            rv, "==", 10);


        var rv = [0,1,2,3,4].reduce(function(p, c, i){ return p + c; }, 10);
        uu.ok("[0,1,2,3,4].reduce(function(p, c, i){ return p + c; }, 10)",
            rv, "==", 20);


        var rv = [0, 1, 2, 3].reduce(function(a, b){ return a + b; });
        uu.ok("[0, 1, 2, 3].reduce(function(a, b){ return a + b; })",
            rv, "==", 6);


        var rv = [[0,1], [2,3], [4,5]].reduce(function(a,b) { return a.concat(b); }, []);
        uu.ok("[[0,1], [2,3], [4,5]].reduce(function(a,b) { return a.concat(b); }, [])",
            rv, "==", [0, 1, 2, 3, 4, 5]);
    })();

    uu.ok("Array.reduceRight");
    (function() {
        var rv = [0,1,2,3,4].reduceRight(function(p, c, i){ return p + c; });
        uu.ok("[0,1,2,3,4].reduceRight(function(p, c, i){ return p + c; })",
            rv, "==", 10);


        var rv = [0,1,2,3,4].reduceRight(function(p, c, i){ return p + c; }, 10);
        uu.ok("[0,1,2,3,4].reduceRight(function(p, c, i){ return p + c; }, 10)",
            rv, "==", 20);


        var rv = [0, 1, 2, 3].reduceRight(function(a, b){ return a + b; });
        uu.ok("[0, 1, 2, 3].reduceRight(function(a, b){ return a + b; })",
            rv, "==", 6);


        var rv = [[0,1], [2,3], [4,5]].reduceRight(function(a,b) { return a.concat(b); }, []);
        uu.ok("[[0,1], [2,3], [4,5]].reduceRight(function(a,b) { return a.concat(b); }, [])",
            rv, "==", [4, 5, 2, 3, 0, 1] );
    })();

    uu.ok("End Of Test");
    uu.ok();
});
</script></body></html>
