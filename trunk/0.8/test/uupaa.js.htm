<!doctype html><html><head><meta charset="UTF-8" />
<title></title>
<style>
.uutest ol { background-color:dodgerblue;color:white }
.uutest li { padding:5px;border:1px solid #ccc }
.uutest .li0 { background-color:red   }
.uutest .li1 { background-color:green }
.uutest .li2 { background-color:red   }
.uutest .li3 { background-color:#0b0  }
.uutestinfo { position:fixed;top:10px;right:10px;font-size:xx-large }
.uutestinfo a { border: 3px outset gray;padding:3px;background-color:red;color:white }
.uutestinfo .score { color:black;text-shadow:gray 1px 1px 1px }
.uutestinfo .ngzone {}
</style>

<script src="../src/uupaa.js"></script>
<script src="../src/Codec/Codec.js"></script>
<script src="../src/Query/uu.query.js"></script>
<script src="../src/uu.test.js"></script>
</head><body>
<div style="display:none">
    <div id="div" class="class" title="title">text</div>

    <div id="_div" class="class" title="title">text</div>
    <a id="_a" href="/a"></a>
    <label id="_label" for="a" accesskey="a" tabindex="1"></label>
    <table><tr id="_tr" rowspan="2"><td id="_td" colspan="2">aa</td></tr></table>
</div>
<script>
uu.ready(function(uu) {
  uu.test({
    "uu.array()": "",
      "[1][through] uu.array([1,2]) は引数で与えられた [1,2] をそのまま返す(複製しない)": function() {
        var ary1 = [1, 2];
        var ref1 = ary1;

        return [uu.array(ary1), "===", ref1];
      },
      "[2][to ary] uu.array(12) は [12] を返す": function() {
        return [uu.array(12), "==", [12]];
      },
      "[2][to ary] uu.array('12') は ['12'] を返す": function() {
        return [uu.array('12'), "==", ['12']];
      },
      "[3][convert NodeList] uu.array(document.getElementsByTagName('HTML')) は NodeList を配列に変換できる。その結果は uu.query('html') と等しい": function() {
        return [uu.array(document.getElementsByTagName('HTML')), "==", uu.query('html')];
      },
      "[3][convert NodeList] uu.array(document.getElementsByTagName('HTML')) は NodeList を配列に変換できる。その結果は [document.documentElement] と等しい": function() {
        return [uu.array(document.getElementsByTagName('HTML')), "==", [document.documentElement]];
      },
      "[4][convert arguments] uu.array(arguments) は 引数(1, 2, 3)を配列( [1, 2, 3] )に変換できる": function() {
        function uuarytest1() {
          return uu.array(arguments);
        }
        var rv = uuarytest1(1, 2, 3);
        return [rv, "==", [1, 2, 3]];
      },
    "uu.array.has()": "",
      "[1][has array] uu.array.has([1, 2, 3], 1) は true": function() {
        return [uu.array.has([1, 2, 3], 1), "is true"];
      },
      "[1][has array] uu.array.has([1, 2, 3], '1') は false": function() {
        return [uu.array.has([1, 2, 3], '1'), "is false"];
      },
      "[1][has array] uu.array.has(['1', 2, 3], '1') は true": function() {
        return [uu.array.has(['1', 2, 3], '1'), "is true"];
      },
      "[1][has array] uu.array.has(['1', , 2, 3], 2) は true (粗い配列でもとりあえずOK)": function() {
        return [uu.array.has(['1', , 2, 3], 2), "is true"];
      },
      "[1][has array] uu.array.has(['1', , 2, 3], undefined) は false (undefined は検索できない)": function() {
        return [uu.array.has(['1', , 2, 3], undefined), "is false"];
      },
      "[1][has array] uu.array.has(['1', undefined, 2, 3], undefined) は false (undefined は検索できない)": function() {
        return [uu.array.has(['1', undefined, 2, 3], undefined), "is false"];
      },
      "[1][has array] uu.array.has([1, 2, 3], [1, 2]) は true": function() {
        return [uu.array.has([1, 2, 3], [1, 2]), "is true"];
      },
      "[2][has node] uu.array.has([document, document.body], document.body) は true": function() {
        return [uu.array.has([document, document.body], document.body), "is true"];
      },
      "[3][has node] uu.array.has([document, document.body, document.getElementsByTagName('head')[0]], [document, document.body]) は true": function() {
        return [uu.array.has([document, document.body, document.getElementsByTagName('head')[0]], [document, document.body]), "is true"];
      },

    "uu.array.size()": "",
      "配列サイズは2": function() {
        return [uu.array.size([ 1, 2 ]), "==", 2];
      },

    "uu.array.sort()": "",
      "[1][num 0-9] uu.array.sort([11, 222, 4], '0-9') は 数字順(0→9)([4, 11, 222])にソートされる": function() {
        return [uu.array.sort([4, 11, 222], "0-9"), "==", [4, 11, 222]];
      },
      "[2][num 9-0] uu.array.sort([11, 222, 4], '9-0') は 数字順(9→0)([222, 11, 4])にソートされる": function() {
        return [uu.array.sort([4, 11, 222], "9-0"), "==", [222, 11, 4]];
      },
      "[3][ascii a-z] uu.array.sort(['z', 'a', 'b', 'c'], 'A-Z') は 英字順(A→Z)(['a', 'b', 'c', 'z'])にソートされる": function() {
        return [uu.array.sort(['z', 'a', 'b', 'c'], "A-Z"), "==", ['a', 'b', 'c', 'z']];
      },
      "[4][ascii a-z] uu.array.sort(['z', 'a', 'b', 'c'], 'Z-A') は 英字順(Z→A)(['z', 'c', 'b', 'a'])にソートされる": function() {
        return [uu.array.sort(['z', 'a', 'b', 'c'], "Z-A"), "==", ['z', 'c', 'b', 'a']];
      },
      "[5][user func] uu.array.clean([,,1,2,,]) は [1, 2]": function() {
        return [uu.array.clean([,,1,2,,]), "is", [1, 2]];
      },
    "uu.array.clean()": "",
      "uu.array.clean(var ary=[1,2,3]; delete ary[1]) == [1,3]。uu.array.clean は 欠落(delete)した要素や null をスキップする": function() {
        var ary = [1, 2, 3];
        delete ary[1];
        return [uu.array.clean(ary), "==", [1, 3]];
      },
      "uu.array.clean(var ary=[1,2,,null,3]; delete ary[1]) == [1,3]。uu.array.clean は 欠落(delete)した要素や null をスキップする": function() {
        var ary = [1,2,,null,3];
        delete ary[1];
        return [uu.array.clean(ary), "==", [1, 3]];
      },

      "uu.array.clean([,,1,2,,]) == [1, 2]": function() {
        return [uu.array.clean([,,1,2,,]), "==", [1, 2]];
      },
      "uu.array.clean([,null,1,2,,]) == [1, 2]": function() {
        return [uu.array.clean([,null,1,2,,]), "==", [1, 2]];
      },
      "uu.array.clean([null]) == []": function() {
        return [uu.array.clean([null]), "==", []];
      },
      "uu.array.clean([void 0]) == []": function() {
        return [uu.array.clean([void 0]), "==", []];
      },
      "uu.array.clean([]) == []": function() {
        return [uu.array.clean([]), "==", []];
      },
    "uu.array.unique()": "",
      "[1][unique elements] uu.array.unique([<body>, <head>, <body>]) は [<body>, <head>]": function() {
        var body = document.body,
            head = document.head;
        return [uu.array.unique([body, head, body]), "==", [body, head]];
      },
      "[1][unique elements] uu.array.unique([0, 1, 2, 3, 3, 2, 1, 0]) は [0, 1, 2, 3]": function() {
        return [uu.array.unique([0, 1, 2, 3, 3, 2, 1, 0]), "==", [0, 1, 2, 3]];
      },
      "[2][unique literals] uu.array.unique([0, 1, 2, 3, 3, 2, 1, 0], 1) は [0, 1, 2, 3]": function() {
        return [uu.array.unique([0, 1, 2, 3, 3, 2, 1, 0], 1), "==", [0, 1, 2, 3]];
      },
      "uu.array.unique(var ary=[1,2,,null,3,3,2,1,0]; delete ary[1]) は [1, 3, 2, 0]。\nuu.array.unique は 欠落(delete)した要素や null をスキップする": function() {
        var ary = [1,2,,null,3,3,2,1,0];
        delete ary[1];

        return [uu.array.unique(ary), "==", [1, 3, 2, 0]];
      },


/*
    "uu.array.indexOf()": "",
      "uu.array.indexOf([1,2,3], 1) は 0 を返す": function() {
        return [uu.array.indexOf([1,2,3], 1), "is", 0];
      },
      "uu.array.indexOf([<body>, <head>], <head>) は 1 を返す": function() {
        return [uu.array.indexOf([document.body, document.head], document.head), "is", 1];
      },
      "uu.array.indexOf([<body>, <head>], <html>) は -1 (not found) を返す": function() {
        return [uu.array.indexOf([document.body, document.head], document.documentElement), "is", -1];
      },
 */
    "Array.filter()": "",
      "Array.filter([12, 5, 8, 130, 44], function(v) { return v >= 10; }) は [12, 130, 44] を返す": function() {
        return [[12, 5, 8, 130, 44].filter(function(v) { return v >= 10; }), "is", [12, 130, 44]];
      },
    "Array.every()": "",
      "Array.every([12, 5, 8, 130, 44], function(v) { return v >= 10; }) は false を返す": function() {
        return [[12, 5, 8, 130, 44].every(function(v) { return v >= 10; }), "is false"];
      },
      "Array.every([12, 54, 18, 130, 44], function(v) { return v >= 10; }) は true を返す": function() {
        return [[12, 54, 18, 130, 44].every(function(v) { return v >= 10; }), "is true"];
      },
    "Array.some()": "",
      "Array.some([12, 5, 8, 130, 44], function(v) { return v < 10; }) は true を返す": function() {
        return [[12, 5, 8, 130, 44].some(function(v) { return v < 10; }), "is true"];
      },
      "Array.some([12, 54, 18, 130, 44], function(v) { return v < 10; }) は false を返す": function() {
        return [[12, 54, 18, 130, 44].some(function(v) { return v < 10; }), "is false"];
      },
    "Array.map()": "",
      "Array.map([1, 2, 3, 4, 5], function(v) { return v * 2; }) は [2, 4, 6, 8, 10] を返す": function() {
        return [[1, 2, 3, 4, 5].map(function(v) { return v * 2; }), "is", [2, 4, 6, 8, 10]];
      },
    "uu.attr()": "",
      "[1][get all pair] uu.attr(uu.id('div')) は Hash を返す(結果はブラウザ依存)": function() {
        return [uu.attr(uu.id('div')), "is hash"];
      },
      "[2][get pair] uu.attr(uu.id('div'), 'id') は 'div' } と等しい": function() {
        return [uu.attr(uu.id('div'), 'id'), "==", 'div'];
      },
      "[3][set pair] uu.attr(uu.id('div'), 'title', 'hoge') は node を返し、title は hoge に設定される": function() {
        var node = uu.id('div');
        if (uu.attr(node, 'title', 'hoge') !== node) {
          return [uu.attr(node, 'title', 'hoge'), "is fail"];
        }
        return [uu.attr(node, 'title'), "==", 'hoge'];
      },
      "[4][set pair] uu.attr(uu.id('div'), { 'class': 'A1', title: 'title' }) は node を返し、className は A1 に、 title は title に設定される": function() {
        var node = uu.id('div');
        if (uu.attr(node, { 'class': 'A1', title: 'title' }) !== node) {
          return [uu.attr(node, { 'class': 'A1', title: 'title' }), "is fail"];
        }
        return [uu.attr(node, 'title'), "==", 'title'];
      },

      "[IE][FIX] hrefが絶対URLなら、設定値をそのまま取得する、uu.attr({ href: 'http://example.com/' })": function() {
        var e;
        document.body.appendChild(e = uu.a({ href: "http://example.com/", title: "long" }, "link"));
        var v = uu.attr(e, "href");
        return [v, "==", "http://example.com/"];
      },
      "[IE][FIX] hrefが相対URLでも、設定値をそのまま取得する(フルパスに変換しない)、uu.attr({ href: '../dummy.jpg' })": function() {
        var e;
        document.body.appendChild(e = uu.a({ href: "../dummy.jpg", title: "long" }, "link"));
        var v = uu.attr(e, "href");
        return [v, "==", "../dummy.jpg"];
      },

      "[get class] uu.attr(uu.id('_div'), 'class') は 'class' } と等しい": function() {
        return [uu.attr(uu.id('_div'), 'class'), "==", 'class'];
      },
      "[get className] uu.attr(uu.id('_div'), 'className') は 'class' } と等しい": function() {
        return [uu.attr(uu.id('_div'), 'className'), "==", 'class'];
      },
      "[get for] uu.attr(uu.id('_label'), 'for') は 'a' } と等しい": function() {
        return [uu.attr(uu.id('_label'), 'for'), "==", 'a'];
      },
      "[get htmlFor] uu.attr(uu.id('_label'), 'htmlFor') は 'a' } と等しい": function() {
        return [uu.attr(uu.id('_label'), 'htmlFor'), "==", 'a'];
      },
      "[get colspan] uu.attr(uu.id('_td'), 'colspan') は '2' } と等しい": function() {
        return [uu.attr(uu.id('_td'), 'colspan'), "==", '2'];
      },
      "[get colSpan] uu.attr(uu.id('_td'), 'colSpan') は '2' } と等しい": function() {
        return [uu.attr(uu.id('_td'), 'colSpan'), "==", '2'];
      },
      "[get rowspan] uu.attr(uu.id('_tr'), 'rowspan') は '2' } と等しい": function() {
        return [uu.attr(uu.id('_tr'), 'rowspan'), "==", '2'];
      },
      "[get rowSpan] uu.attr(uu.id('_tr'), 'rowSpan') は '2' } と等しい": function() {
        return [uu.attr(uu.id('_tr'), 'rowSpan'), "==", '2'];
      },
      "[get accesskey] uu.attr(uu.id('_label'), 'accesskey') は 'a' } と等しい": function() {
        return [uu.attr(uu.id('_label'), 'accesskey'), "==", 'a'];
      },
      "[get accessKey] uu.attr(uu.id('_label'), 'accessKey') は 'a' } と等しい": function() {
        return [uu.attr(uu.id('_label'), 'accessKey'), "==", 'a'];
      },
      "[get tabindex] uu.attr(uu.id('_label'), 'tabindex') は '1' } と等しい": function() {
        return [uu.attr(uu.id('_label'), 'tabindex'), "==", '1'];
      },
      "[get tabIndex] uu.attr(uu.id('_label'), 'tabIndex') は '1' } と等しい": function() {
        return [uu.attr(uu.id('_label'), 'tabIndex'), "==", '1'];
      },



    "uu.attr() - set attr": "",
      "[1][set some attrs] uu.attr(uu.id('div'), { title: 'unittest' }) で設定された値と uu.attr(uu.id('div'), 'title') の結果は等しい": function() {
        uu.attr(uu.id('div'), { title: 'unittest' });
        var rv = uu.attr(uu.id('div'), 'title');
        return ["unittest", "==", rv];
      },

    "uu.Class()": "",
      "uu.Class は複数回生成すると別々のインスタンスを返す": function() {
        uu.Class("UNITTEST1");

        var obj1 = uu("UNITTEST1");
        var obj2 = uu("UNITTEST1");

        return [obj1, "!=", obj2];
      },
    "uu.Class.singleton()": "",
      "uu.Class.singleton は複数回生成しても同じインスタンスを返す": function() {
        uu.Class.singleton("UNITTEST2");
        var obj1 = uu("UNITTEST2");
        var obj2 = uu("UNITTEST2");

        return [obj1, "==", obj2];
      },
/*
    "uu.Class.guid()": "",
      "uu.Class.guid はユニークな ID を返す": function() {
        uu.Class("UNITTEST3");

        var obj1 = uu("UNITTEST3");
        var obj2 = uu("UNITTEST3");

        return [uu.Class.guid(obj1), "<", uu.Class.guid(obj2)];
      },
      "singleton クラスなら uu.Class.guid は同じ ID を返す": function() {
        uu.Class.singleton("UNITTEST4");
        var obj1 = uu("UNITTEST4");
        var obj2 = uu("UNITTEST4");

        return [uu.Class.guid(obj1), "==", uu.Class.guid(obj2)];
      },
 */
    "uu(new Class)": "",
      "[1][create instance] uu('UNITTEST1', 1, 2) は new uu.Class('UNITTEST1', 1, 2) の結果(インスタンス)を返す": function() {
        uu.Class("UNITTEST1"); // define
        var obj1 = uu("UNITTEST1");

        return [obj1, "is instance"];
      },

    "uu.klass.has()": "",
      "uu.klass.has(uu.id('div')) ( 'A1 A2 A3') は 'A1 A3' を含んでいる": function() {
        uu.id('div').className = "";
        uu.klass.add(uu.id('div'), "A1 A2 A3");

        return [uu.klass.has(uu.id('div'), "A1 A3"), "is true"];
      },
      "uu.klass.has(uu.id('div')) ( '') は '' を含んでいない": function() {
        uu.id('div').className = "";
        uu.klass.add(uu.id('div'), "");

        return [uu.klass.has(uu.id('div'), ""), "is false"];
      },
      "uu.klass.has(uu.id('div')) ( 'A1 A2 A3') は ' A2 ' を含んでいる": function() {
        uu.id('div').className = "";
        uu.klass.add(uu.id('div'), "A1 A2 A3");

        return [uu.klass.has(uu.id('div'), " A2 "), "is true"];
      },
      "uu.klass.has(uu.id('div')) ( 'あ い う') は ' い ' を含んでいる": function() {
        uu.id('div').className = "";
        uu.klass.add(uu.id('div'), "あ い う");

        return [uu.klass.has(uu.id('div'), " い "), "is true"];
      },
      "uu.klass.has(uu.id('div')) ( 'うい') は 'い' を含んでいない": function() {
        uu.id('div').className = "";
        uu.klass.add(uu.id('div'), "うい");

        return [uu.klass.has(uu.id('div'), "い"), "is false"];
      },


    "uu.klass.add()": "",
/*
      "uu.klass.add(uu.id('div')) ( 'A1 A2 A3' ) に 'A4　　　A1　' を足すと 'A1 A2 A3 A4 A1' になる": function() {
        uu.id('div').className = "";
        uu.klass.add(uu.id('div'), "A1 A2 A3");
        uu.klass.add(uu.id('div'), "A4   A1 ");

        return [uu.id('div').className, "==", 'A1 A2 A3 A4 A1'];
      },
 */
      "uu.klass.add(uu.id('div')) ( ' A1 A2 A3' ) に 'A4 A1' を足すと ' A1 A2 A3 A4 A1' になる": function() {
        uu.id('div').className = "";
        uu.klass.add(uu.id('div'), "A1 A2 A3");
        uu.klass.add(uu.id('div'), "A4 A1");

        return [uu.id('div').className, "==", ' A1 A2 A3 A4 A1'];
      },

    "uu.klass.remove()": "",
      "uu.klass.remove(uu.id('div')) ( 'A1 A2 A3 A4 A1' )から( 'A1　　A4' )を引くと 'A2 A3' になる": function() {
        uu.id('div').className = "A1 A2 A3 A4 A1";
        uu.klass.remove(uu.id('div'), "A1  A4");

        return [uu.id('div').className, "==", 'A2 A3'];
      },
      "uu.klass.remove(uu.id('div')) ( 'B1 B2' )から 存在しないクラス( 'A1 A2 A3 A4 A1' )を引いてもエラーにならない": function() {
        uu.id('div').className = "B1 B2";
        uu.klass.remove(uu.id('div'), "A1 A2 A3 A4 A1");

        return [uu.id('div').className, "==", 'B1 B2'];
      },
    "uu.klass.toggle()": "",
      "uu.klass.toggle(uu.id('div')) ( 'A1 A2 B1 B2' ) から 'A2 B2' をトグルすると、'A1 B1' になる": function() {
        uu.id('div').className = "A1 A2 B1 B2";
        uu.klass.toggle(uu.id('div'), "A2 B2");

        return [uu.id('div').className, "==", 'A1 B1'];
      },
      "uu.klass.toggle(uu.id('div')) ( 'A1 B1' ) から 'A2 B2' をトグルすると、'A1 B1 A2 B2' になる": function() {
        uu.id('div').className = "A1 B1";
        uu.klass.toggle(uu.id('div'), "A2 B2");

        return [uu.id('div').className, "==", 'A1 B1 A2 B2'];
      },

// -----------------------
    "uu.hash()": "",
      "[1][through] uu.hash({ key: 'value' }) はハッシュをそのままスルーし { key: 'value' } を返す": function() {
        var hash1 = { key: 'value' };
        var hash2 = uu.hash(hash1);

        return [hash2, "===", hash1];
      },
      "[2][to hash] uu.hash('key', 123) == { key: 123 }": function() {
        var hash = uu.hash('key', 123);

        return [hash, "==", { key: 123 }];
      },

/*
    "uu.hash.num()": "",
      "uu.hash.num('key,0,key2,1') == { key: 0, key2: 1 }": function() {
        var hash = uu.hash.num('key,0,key2,1');

        return [hash, "==", { key: 0, key2: 1 }];
      },
 */

    "uu.hash.has()": "",
      "uu.hash.has({ a: 1, b: 2, c: 3 }, { a: 1, b: 2 }) == true": function() {
        return [uu.hash.has({ a: 1, b: 2, c: 3 }, { a: 1, b: 2 }), "is true"];
      },
      "uu.hash.has({ a: 1, b: 2, c: 3 }, { a: '1', b: 2 }) == false": function() {
        return [uu.hash.has({ a: 1, b: 2, c: 3 }, { a: '1', b: 2 }), "is false"];
      },
      "uu.hash.has({ a: function() { return 'a'}, b: 2, c: 3 }, { a: function() { return 'a'}, b: 2 }) == true": function() {
        return [uu.hash.has({ a: function() { return 'a'}, b: 2, c: 3 }, { a: function() { return 'a'}, b: 2 }), "is true"];
      },
      "uu.hash.has({ a: function() { return 'b'}, b: 2, c: 3 }, { a: function() { return 'a'}, b: 2 }) == false": function() {
        return [uu.hash.has({ a: function() { return 'b'}, b: 2, c: 3 }, { a: function() { return 'a'}, b: 2 }), "is false"];
      },
    "uu.hash.size()": "",
      "ハッシュサイズは2": function() {
        return [uu.hash.size({ aaa: 1, bbb: 2 }), "==", 2];
      },
    "uu.keys()": "",
      "{ key: 1, key2: 2 } から key の配列[key, key2]を生成する": function() {
        return [uu.keys({ key: 1, key2: 2 }), "==", ["key", "key2"]];
      },
    "uu.values()": "",
      "{ key: 1, key2: 2 } から値の配列[1,2]を生成する": function() {
        return [uu.values({ key: 1, key2: 2 }), "==", [1, 2]];
      },
    "uu.hash.indexOf()": "",
      "uu.hash.indexOf({ a: 1, b: 2, c: 2 }, 2) == 'b'": function() {
        return [uu.hash.indexOf({ a: 1, b: 2, c: 2 }, 2), "==", 'b'];
      },
    "uu.array.toHash()": "",
      "['key', 'key2'] と ['1', '2'] から { key: '1', key2: '2' } を生成する": function() {
        return [uu.array.toHash(['key', 'key2'], ['1', '2']), "==", { key: '1', key2: '2' }];
      },
      "['key', 'key2'] と ['1', '2'] から { key: 1, key2: 2 } を生成する(value を数値化)": function() {
        return [uu.array.toHash(['key', 'key2'], ['1', '2'], 1), "==", { key: 1, key2: 2 }];
      },
      "['key', 'key2'] と '1' から { key: '1', key2: '1' } を生成する": function() {
        return [uu.array.toHash(['key', 'key2'], '1'), "==", { key: '1', key2: '1' }];
      },
      "['key', 'key2'] と '1' から { key: 1, key2: 1 } を生成する(value を数値化)": function() {
        return [uu.array.toHash(['key', 'key2'], '1', 1), "==", { key: 1, key2: 1 }];
      },
/*
    "uu.hash.hasValue()": "",
      "uu.hash.hasValue({ a: 1, b: 2 }, 2) == true": function() {
        return [uu.hash.hasValue({ a: 1, b: 2 }, 2), "is true"];
      },

    "uu.img.load()": "",
      "uu.img.load('../img/cover01.jpg')": function() {
        return [uu.img.load('../img/cover01.jpg'), "is true"];
      },
 */


// -----------------------
    "MessagePump": "",
      "MSGBOXTEST1 と MSGBOXTEST2 にユニキャストすると [1] と [2] が帰ってくる": function() {
        uu.Class("MSGBOXTEST1", {
          msgbox: function(msg, param) {
  //          uu.puff("got msg: %s %s", msg, param);
            return 1;
          }
        });
        uu.Class("MSGBOXTEST2", {
          msgbox: function(msg, param) {
  //          uu.puff("got msg: %s %s", msg, param);
            return 2;
          }
        });
        var obj1 = uu("MSGBOXTEST1");
        var obj2 = uu("MSGBOXTEST2");

        var rv1 = uu.msg.send(obj1, "obj1 == obj2", "p1");
        var rv2 = uu.msg.send(obj2, "obj2 == obj1", "p1");

        return [rv1[0] === 1, "&&", rv2[0] === 2];
      },
// -----------------------
    "uu.node.add()": "",
      "uu.node.add('<div id=\"ctx\">...</div>') is node": function() {
        var fg = '\
<div id="ctx">\
  <div id="first">first</div>\
  <div id="prev">prev</div>\
  <div id="tgt">tgt\
    <div id="firstChild">firstChild</div>\
    <div><div id="onlyChild"></div></div>\
    <div id="lastChild">lastChild</div>\
  </div>\
  <div id="next">next</div>\
  <div id="last">last</div>\
</div>';
        return [uu.node.add(fg), "is node"];
      },
    "uu.nore.has()": "",
      "uu.node.has(uu.id('ctx'), uu.id('tgt')) == true": function() {
        return [uu.node.has(uu.id('ctx'), uu.id('tgt')), "is true"];
      },
      "uu.node.has(uu.id('ctx'), uu.id('ctx')) == false": function() {
        return [uu.node.has(uu.id('ctx'), uu.id('ctx')), "is false"];
      },
      "uu.node.has(uu.id('ctx'), document.body) == false": function() {
        return [uu.node.has(uu.id('ctx'), document.body), "is false"];
      },


    "uu.nore.find(firstSibling)": "",
      "uu.node.find(uu.id('tgt'), '^') == uu.id('first')": function() {
        return [uu.node.find(uu.id('tgt'), '^'), "==", uu.id('first')];
      },
    "uu.nore.find(previousSibling)": "",
      "uu.node.find(uu.id('tgt'), '-') == uu.id('prev')": function() {
        return [uu.node.find(uu.id('tgt'), '-'), "==", uu.id('prev')];
      },
    "uu.nore.find(nextSibling)": "",
      "uu.node.find(uu.id('tgt'), '+') == uu.id('next')": function() {
        return [uu.node.find(uu.id('tgt'), '+'), "==", uu.id('next')];
      },
    "uu.nore.find(lastSibling)": "",
      "uu.node.find(uu.id('tgt'), '$') == uu.id('last')": function() {
        return [uu.node.find(uu.id('tgt'), '$'), "==", uu.id('last')];
      },
    "uu.nore.find(firstChild)": "",
      "uu.node.find(uu.id('tgt'), '.^') == uu.id('firstChild')": function() {
        return [uu.node.find(uu.id('tgt'), '.^'), "==", uu.id('firstChild')];
      },
    "uu.nore.find(lastChild)": "",
      "uu.node.find(uu.id('tgt'), '.$') == uu.id('lastChild')": function() {
        return [uu.node.find(uu.id('tgt'), '.$'), "==", uu.id('lastChild')];
      },


    "uu.nore.count()": "",
      "uu.node.count(uu.id('tgt'))": function() {
        return [uu.node.count(uu.id('tgt')), "==", 3];
      },


    "uu.nore.remove()": "",
      "uu.node.remove(uu.id('ctx'))": function() {
        return [uu.node.remove(uu.id('ctx')), "is node"];
      },

    "uu.data()": "",
      "[1][get all pair] uu.data(document.body) で bodyに格納したデータが取り出せる(Hash が返る)": function() {
        var rv = uu.data(document.body);

        return [rv, "is hash"];
      },
      "[2][get pair] uu.data(document.body, 'key', 'value') で body に設定されたデータ(key)を取り出せる": function() {
        uu.data(document.body, 'key', 'value');
        var rv = uu.data(document.body, 'key');

        return [rv, "==", 'value'];
      },
      "[3][set pair] uu.data(document.body, 'key', null) で body に設定されているデータ(key)を削除できる": function() {
        uu.data(document.body, 'key', 'value'); // set
        uu.data(document.body, 'key', null);    // remove
        var rv = uu.data(document.body, 'key'); // get

        return [rv, "is null"];
      },
    "uu.data.clear()": "",
      "[1][clear data] uu.data.clear(document.body, 'key') で key に関連するデータを消せる(null になる)": function() {
        uu.data.clear(document.body, 'key');

        var rv = uu.data(document.body, 'key');

        return [rv, "is null"];
      },
      "[1][clear data] uu.data.clear(document.body, 'key') で key に関連するデータを消せる(value = { hoge: 1, huga: 2 })": function() {
        uu.data(document.body, 'key', { hoge: 1, huga: 2 });
        uu.data.clear(document.body, 'key');

        var rv = uu.data(document.body, 'key');

        return [rv, "is null"];
      },
      "[1][clear data] uu.data.clear(document.body, 'key') で key に関連するデータを消せる(value = null)": function() {
        uu.data.clear(document.body, 'key');

        var rv = uu.data(document.body, 'key');

        return [rv, "is null"];
      },

      "[2][clear all data] uu.data.clear(document.body) ノードに保存したデータを全て消せる": function() {
        uu.data(document.body, 'key', { hoge: 1, huga: 2 });
        uu.data.clear(document.body);

        var rv = uu.data(document.body, 'key');

        return [rv, "is null"];
      },

// -----------------------
    "uu.fix()": "",
      'uu.fix("-webkit-shadow") == "-webkit-shadow"': function() {
        return [uu.fix("-webkit-shadow"), "==", "-webkit-shadow"];
      },
      'uu.fix("-webkit-box-shadow") == "WebkitBoxShadow"': function() {
        return uu.webkit ? [uu.fix("-webkit-box-shadow"), "==", "WebkitBoxShadow"]
                         : ["WebKit ONLY", "==", "WebKit ONLY"];

      },
      'uu.fix("-moz-appearance") == "MozAppearance"': function() {
        return uu.gecko ? [uu.fix("-moz-appearance"), "==", "MozAppearance"]
                        : ["Gecko ONLY", "==", "Gecko ONLY"];
      },
      'uu.fix("-ms-block-progression") == "msBlockProgression"': function() {
        return uu.ie ? [uu.fix("-ms-block-progression"), "==", "msBlockProgression"]
                     : ["IE ONLY", "==", "IE ONLY"];
      },
      'uu.fix("-o-transition-property") == "OTransitionProperty"': function() {
        return uu.opera ? [uu.fix("-o-transition-property"), "==", "OTransitionProperty"]
                        : ["OPERA ONLY", "==", "OPERA ONLY"];
      },

      'uu.fix("background-color") == "backgroundColor"': function() {
        return [uu.fix("background-color"), "==", "backgroundColor"];
      },
      'uu.fix("float") == "cssFloat" or "styleFloat"(IE6, IE7)': function() {
        return [uu.fix("float"), "==", uu.ie && uu.ver < 8 ? "styleFloat" : "cssFloat"];
      },
      'uu.fix("for") == "for"': function() {
        if (uu.ver.ie6 || uu.ver.ie7) {
            return [uu.fix("for"), "!=", "for"];
        }
        return [uu.fix("for"), "==", "for"];
      },
      'uu.fix("htmlFor") == "for"': function() {
        if (uu.ver.ie6 || uu.ver.ie7) {
            return [uu.fix("htmlFor"), "!=", "for"];
        }
        return [uu.fix("htmlFor"), "==", "for"];
      },

      'uu.fix("d") == "display"': function() {
        return [uu.fix("d"), "==", "display"];
      },
      'uu.fix("w") == "width"': function() {
        return [uu.fix("w"), "==", "width"];
      },
      'uu.fix("h") == "height"': function() {
        return [uu.fix("h"), "==", "height"];
      },
      'uu.fix("x") == "left"': function() {
        return [uu.fix("x"), "==", "left"];
      },
      'uu.fix("l") == "left"': function() {
        return [uu.fix("l"), "==", "left"];
      },
      'uu.fix("y") == "top"': function() {
        return [uu.fix("y"), "==", "top"];
      },
      'uu.fix("t") == "top"': function() {
        return [uu.fix("t"), "==", "top"];
      },
      'uu.fix("o") == "opacity"': function() {
        return [uu.fix("o"), "==", "opacity"];
      },
      'uu.fix("c") == "color"': function() {
        return [uu.fix("c"), "==", "color"];
      },
      'uu.fix("bg") == "background"': function() {
        return [uu.fix("bg"), "==", "background"];
      },
      'uu.fix("bgc") == "backgroundColor"': function() {
        return [uu.fix("bgc"), "==", "backgroundColor"];
      },
      'uu.fix("bgi") == "backgroundImage"': function() {
        return [uu.fix("bgi"), "==", "backgroundImage"];
      },
      'uu.fix("z") == "zIndex"': function() {
        return [uu.fix("z"), "==", "zIndex"];
      },
      'uu.fix("fs") == "fontSize"': function() {
        return [uu.fix("fs"), "==", "fontSize"];
      },

    "uu.fix.unicode()": "",
      "uu.fix.unicode('\\u0073\\u0074\\u0072\\u0069\\u006e\\u0067', 0) == 'string'": function() {
        return [uu.fix.unicode('\\u0073\\u0074\\u0072\\u0069\\u006e\\u0067', 0), "==", 'string'];
      },
      "uu.fix.unicode('st\\u0073\\u0074\\u0072\\u0069\\u006e\\u0067', 0) == 'ststring'": function() {
        return [uu.fix.unicode('st\\u0073\\u0074\\u0072\\u0069\\u006e\\u0067', 0), "==", 'ststring'];
      },
      "uu.fix.unicode('\\u3043\\u3044\\u3045', 0) == 'ぃいぅ'": function() {
        return [uu.fix.unicode('\\u3043\\u3044\\u3045', 0), "==", 'ぃいぅ'];
      },

    "uu.trim()": "",
      "uu.trim('nospace') == 'nospace'": function() {
        return [uu.trim('nospace'), "==", 'nospace'];
      },
      "uu.trim('has space') == 'has space'": function() {
        return [uu.trim('has space'), "==", 'has space'];
      },
      "uu.trim('  has  space  ') == 'has  space'": function() {
        return [uu.trim('  has  space  '), "==", 'has  space'];
      },
      "uu.trim('') == ''": function() {
        return [uu.trim(''), "==", ''];
      },
    "uu.trim.tag()": "",
      'uu.trim.tag(" <h1>A</h1>  B  <p>C</p> ") == "A B C"': function() {
        return [uu.trim.tag(" <h1>A</h1>  B  <p>C</p> "), "==", "A B C"];
      },
      'uu.trim.tag("A B C</p> ") == "A B C"': function() {
        return [uu.trim.tag("A B C</p> "), "==", "A B C"];
      },
      'uu.trim.tag("<div>A B C</p> ") == "A B C"': function() {
        return [uu.trim.tag("<div>A B C</p> "), "==", "A B C"];
      },
      'uu.trim.tag("<div><p>A</p></div> B<p>  C</p> ") == "A B C"': function() {
        return [uu.trim.tag("<div><p>A</p></div> B<p>  C</p> "), "==", "A B C"];
      },
    "uu.trim.url()": "",
      "uu.trim.url('url(\"http://...\")') == \"http://...\"": function() {
        return [uu.trim.url('url("http://...")'), "==", "http://..."];
      },
      "uu.trim.url(\"url('http://...')\") == \"http://...\"": function() {
        return [uu.trim.url("url('http://...')"), "==", "http://..."];
      },
      "uu.trim.url('http://...') == \"http://...\"": function() {
        return [uu.trim.url('http://...'), "==", "http://..."];
      },
    "uu.trim.inner()": "",
      "uu.trim.inner('  diet  inner  space  ') == 'diet inner space'": function() {
        return [uu.trim.inner('  diet  inner  space  '), "==", 'diet inner space'];
      },
    "uu.trim.quote()": "",
      "uu.trim.quote(\" 'has  space' \") == \"has  space\"": function() {
        return [uu.trim.quote(" 'has  space' "), "==", "has  space"];
      },
      'uu.trim.quote(\' "has  space" \') == "has  space"': function() {
        return [uu.trim.quote(' "has  space" '), "==", "has  space"];
      },
    "uu.trim.bracket()": "",
      "uu.trim.bracket('  div  ') == 'div'": function() {
        return [uu.trim.bracket('  div  '), "==", 'div'];
      },
      "uu.trim.bracket('  <div>  ') == 'div'": function() {
        return [uu.trim.bracket('  <div>  '), "==", 'div'];
      },
      "uu.trim.bracket('  [bracket]  ') == 'div'": function() {
        return [uu.trim.bracket('  [bracket]  '), "==", 'bracket'];
      },
      "uu.trim.bracket('  (bracket)  ') == 'div'": function() {
        return [uu.trim.bracket('  (bracket)  '), "==", 'bracket'];
      },
      "uu.trim.bracket('  {bracket}  ') == 'div'": function() {
        return [uu.trim.bracket('  {bracket}  '), "==", 'bracket'];
      },
    "uu.split()": "",
      "uu.split(' A  B  C ') == ['A', 'B', 'C'] スペース区切りでトークンを切り出す(左右のスペースをトリムするので、IEの String.split() バグを無視できる)": function() {
        return [uu.split(' A  B  C '), "==", ['A', 'B', 'C']];
      },
    "uu.split.comma()": "",
      "uu.split.comma(' A,B,C ') == ['A', 'B', 'C'] カンマ区切りでトークンを切り出す(左右のスペースをトリムする)": function() {
        return [uu.split.comma(' A,B,C '), "==", ['A', 'B', 'C']];
      },
      "uu.split.comma(' ,A, B ,C, ') == ['A', 'B', 'C'] カンマ区切りでトークンを切り出す(左右のスペースをトリムする)": function() {
        return [uu.split.comma(' ,A, B ,C, '), "==", ['A', 'B', 'C']];
      },
    "uu.split.toHash()": "",
      "[3][split , str] uu.split.toHash('key,a,key2,b') == { key: 'a', key2: 'b' }": function() {
        var hash = uu.split.toHash('key,a,key2,b');

        return [hash, "==", { key: 'a', key2: 'b' }];
      },
      "[4][split ; str] uu.split.toHash('key;a;key2;b', ';', 0) == { key: 'a', key2: 'b' }": function() {
        var hash = uu.split.toHash('key;a;key2;b', ';', 0);

        return [hash, "==", { key: 'a', key2: 'b' }];
      },
      "[5][split , num] uu.split.toHash('key,0,key2,1', ',', 1) == { key: 0, key2: 1 }": function() {
        var hash = uu.split.toHash('key,0,key2,1', ',', 1);

        return [hash, "==", { key: 0, key2: 1 }];
      },

    "uu.date": "",
      "uu.date() は DateHash を返す": function() {
        var dateHash = uu.date();

        return [dateHash, "is hash"];
      },
      "uu.date().ISO() は現在時刻を ISO8601 形式で返す": function() {
        return [uu.date().ISO(), "is string"];
      },
      "uu.date().RFC() は現在時刻を RFC1123 形式で返す": function() {
        return [uu.date().RFC(), "is string"];
      },
      "uu.date().GMT() は現在時刻を GMT (RFC1123) 形式で返す": function() {
        return [uu.date().GMT(), "is string"];
      },

      "uu.date(uu.date(new Date).ISO()) で元に戻る": function() {
        var now = new Date;
        now.setMilliseconds(0); // ms を切り落として比較する

        var dateHash = uu.date(now);

        var isoString = dateHash.ISO();
        var rv = uu.date(isoString);

        return [dateHash.time, "==", rv.time];
      },
      "uu.date(uu.date(new Date).RFC()) で元に戻る": function() {
        var now = new Date;
        now.setMilliseconds(0); // ms を切り落として比較する

        var dateHash = uu.date(now);

        var isoString = dateHash.RFC();
        var rv = uu.date(isoString);

        return [dateHash.time, "==", rv.time];
      },

// -----------------------
    "Type": "",
      "null は null 型":        function() { return [null,    "is null"];     },
      "void 0 は undefined 型(is undefined)": function() { return [void 0,  "is undefined"];},
      "{} は hash 型(is hash)":  function() { return [{},      "is hash"];     },
      "[] は array 型(is array)":  function() { return [[],    "is array"];      },
      "[] は array 型(is array)":function() { return [[],      "is array"];    },
      "false は boolean 型(is boolean)":    function() { return [false,   "is boolean"];     },
      "true は boolean 型(is boolean)":     function() { return [true,    "is boolean"];  },
      "123 は number 型(is number)":       function() { return [123,     "is number"];   },
      "-123.4 は number 型(is number)":    function() { return [-123.4,  "is number"];   },
      "1 / 0 は number 型(is number)":     function() { return [1 / 0,   "is number"];   },
      "0 / 0 は number 型(is number)":     function() { return [0 / 0,   "is number"];   },
      "'' は string 型(is string)":        function() { return ['',      "is string"];   },
      "function(){} は function 型(is function)":
                                function() { return [function(){}, "is function"]; },
      "document.body は node 型":
                                function() { return [document.body, "is node"]; },
      "document.getElementsByTagName('body') は fake 型(is FakeArray)":
                                function() { return [document.getElementsByTagName('body'), "is FakeArray"]; },

      "new Date は date 型":    function() { return [new Date, "is date"]; },
      "uu.type(123, uu.type.STRING | uu.type.NUMBER) は boolean 型 の戻り値を返す":
                                function() { return [uu.type(123, uu.type.STRING | uu.type.NUMBER), "is boolean"]; },
      "new Boolean(false) は boolean 型":
                                function() { return [new Boolean(false), "is boolean"];   },
      "new Number(1) は number 型":
                                function() { return [new Number(''), "is number"];   },
      "new String('') は string 型":
                                function() { return [new String(''), "is string"];   },

    "Array.isArray()": "",
      // from V8 unit test
      // http://code.google.com/p/v8/source/browse/branches/bleeding_edge/test/mjsunit/third_party/array-isarray.js?spec=svn3060&r=3060
      "Array.isArray([]) is true": function() {
          return [Array.isArray([]), "is true"];
      },
      "Array.isArray(new Array) is true": function() {
          return [Array.isArray(new Array), "is true"];
      },
      "Array.isArray(Array()) is true": function() {
          return [Array.isArray(Array()), "is true"];
      },
      "Array.isArray('abc'.match(/(a)*/g)) is true": function() {
          return [Array.isArray('abc'.match(/(a)*/g)), "is true"];
      },
      "Array.isArray((function(){ return Array.isArray(arguments); })()) is false": function() {
          return [(function(){ return Array.isArray(arguments); })(), "is false"];
      },
      "Array.isArray() is false": function() {
          return [Array.isArray(), "is false"];
      },
      "Array.isArray(null) is false": function() {
          return [Array.isArray(null), "is false"];
      },
      "Array.isArray(undefined) is false": function() {
          return [Array.isArray(undefined), "is false"];
      },
      "Array.isArray(true) is false": function() {
          return [Array.isArray(true), "is false"];
      },
      "Array.isArray(false) is false": function() {
          return [Array.isArray(false), "is false"];
      },
      "Array.isArray('a string') is false": function() {
          return [Array.isArray('a string'), "is false"];
      },
      "Array.isArray({}) is false": function() {
          return [Array.isArray({}), "is false"];
      },
      "Array.isArray({length: 5}) is false": function() {
          return [Array.isArray({length: 5}), "is false"];
      },
      "Array.isArray({__proto__: Array.prototype, length:1, 0:1, 1:2}) is false": function() {
          return [Array.isArray({__proto__: Array.prototype, length:1, 0:1, 1:2}), "is false"];
      },
    "2010-04-29": "",
        "uu.Class('SyntaxSugar', function() {\n this.val = 1;\n})\nは\nuu.Class('FullSyntax', {\ninit: function() {\nthis.val = 1;\n}\n})\nのシンタックスシュガーとして機能する": function() {

            uu.Class("SyntaxSugar", function() {
                this.val = 1;
            });

            uu.Class("FullSyntax", {
                init: function() {
                    this.val = 1;
                }
            });

            var obj1 = uu("SyntaxSugar");
            var obj2 = uu("FullSyntax");

            return [obj1.val, "==", obj2.val];
        },

    "Array.reduce": "",
        "[0,1,2,3,4].reduce(function(p, c, i){ return p + c; })": function() {
            var rv = [0,1,2,3,4].reduce(function(p, c, i){ return p + c; });
            return [rv, "==", 10];
        },
        "[0,1,2,3,4].reduce(function(p, c, i){ return p + c; }, 10)": function() {
            var rv = [0,1,2,3,4].reduce(function(p, c, i){ return p + c; }, 10);
            return [rv, "==", 20];
        },
        "[0, 1, 2, 3].reduce(function(a, b){ return a + b; })": function() {
            var rv = [0, 1, 2, 3].reduce(function(a, b){ return a + b; });
            return [rv, "==", 6];
        },
        "[[0,1], [2,3], [4,5]].reduce(function(a,b) { return a.concat(b); }, [])": function() {
            var rv = [[0,1], [2,3], [4,5]].reduce(function(a,b) { return a.concat(b); }, []);
            return [rv, "==", [0, 1, 2, 3, 4, 5]];
        },

    "Array.reduceRight": "",
        "[0,1,2,3,4].reduceRight(function(p, c, i){ return p + c; })": function() {
            var rv = [0,1,2,3,4].reduceRight(function(p, c, i){ return p + c; });
            return [rv, "==", 10];
        },
        "[0,1,2,3,4].reduceRight(function(p, c, i){ return p + c; }, 10)": function() {
            var rv = [0,1,2,3,4].reduceRight(function(p, c, i){ return p + c; }, 10);
            return [rv, "==", 20];
        },
        "[0, 1, 2, 3].reduceRight(function(a, b){ return a + b; })": function() {
            var rv = [0, 1, 2, 3].reduceRight(function(a, b){ return a + b; });
            return [rv, "==", 6];
        },
        "[[0,1], [2,3], [4,5]].reduceRight(function(a,b) { return a.concat(b); }, [])": function() {
            var rv = [[0,1], [2,3], [4,5]].reduceRight(function(a,b) { return a.concat(b); }, []);
            return [rv, "==", [4, 5, 2, 3, 0, 1] ];
        },

/*
        "[].reduceRight(function(p, c, i){ return p + c; })": function() {
            var rv = [].reduceRight(function(p, c, i){ return p + c; });
            return [rv, "is FAIL"];
        },
 */

    "End Of Test": ""
  });
});
</script></body></html>
