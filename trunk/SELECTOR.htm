<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title>uupaa.js - Selector</title>
<style type="text/css">@import url(./README.css);</style>
</head>
<body>
<p>
   | <a href="http://code.google.com/p/uupaa-js/">Project Home(Google Code)</a>
   | <a href="./README.htm#demo">DEMO</a>
   | <a href="./CHANGELOG.htm">ChangeLog</a>
   | <a href="./LICENSE.htm">License</a> |<br />
   | <a href="./INDEX.htm">Index</a>
   | <a href="./DOCUMENT.htm">Document</a>
   | <a href="./SELECTOR.htm">Selector</a>
   | <a href="./MODULE.htm">Module</a>
   | <a href="./GLOSSARY.htm">Glossary</a>
   |
</p>
<a href="./README.htm">README</a> &gt; <a href="./INDEX.htm">INDEX</a> &gt; SELECTOR<br />
<hr />
<a href="#uu.id">ID</a> |
<a href="#uu.tag">Tag/Element</a> |
<a href="#uu.klass">Class</a> |
<a href="#uu.attr">Attribute</a> |
<a href="#uu.xpath">XPath</a> |
<a href="#uu.css">CSS</a> |
<a href="#uu.nodeType">Node Type</a> |
<a href="#uu.textNode">Text Node</a> |
<hr />
<dl>
<!-- -->
  <dt><a name="uu.id">ID Selector</a> - IDセレクタ</dt>
  <dd>
    <p>uu.id(<i>id</i>, <i>really</i> = false) は <i>id</i> と一致するid属性を持つ要素を検索し、
       <a href="./GLOSSARY.htm#Element">Element</a> を返します。</p>
    <p><i>really</i> が true ならキャッシュを使用せず、実際に検索を行います。
      <br /><i>really</i> が false でキャッシュがあればキャッシュされた値を高速に返します(実測で2～130倍高速)。
    </p>
    <p>IDセレクタは、常にCSSセレクタより高速です。</p>
    <p><b>注意点:</b>
      <br />要素を動的に生成/削除し、それらが同じIDを使いまわすようなケースでは、
      <i>really</i> に 1を指定し、キャッシュに影響されないようなロジックを組んでください。
      <br />(そのようなケースでは、uu.id を使用せずに、document.getElementById() を直接使用したほうが良いでしょう)
    </p>
    <pre>
 @param String id      - IDを指定します。
 @param Boolean really - キャッシュを使用する場合は false を、
                         実際に検索する場合に true を指定します。
                         デフォルトは false です。true を指定した場合でも検索結果をキャッシュします。
 @return Element/null  - 検索成功で要素の参照を返します。失敗で null を返します。
                         reallyがfalseでキャッシュが存在する場合は、キャッシュされた値を返します。
    </pre>
    <a href="demo/selector/uu.id.htm" class="run">Run</a>
    <pre class="eg">
  &lt;div id="ID1"&gt;hoge&lt;/div&gt;
  &lt;div id="ID2"&gt;huga&lt;/div&gt;

    uu.log(<b>uu.id</b>("ID1").innerText); // "hoge"  with cache
    uu.log(<b>uu.id</b>("ID2").innerText); // "huga"  with cache
    uu.log(<b>uu.id</b>("ID2").innerText); // "huga"  with cache
    uu.log(<b>uu.id</b>("ID2", 1).innerText); // "huga"  without cache
    uu.log(<b>uu.id</b>("ID2", 0).innerText); // "huga"  with cache
    uu.log(uu._cacheID); // キャッシュをダンプ
    </pre>
  </dd>
<!-- -->
  <dt><a name="uu.tag">Tag/Element Selector</a> - タグ(要素)セレクタ</dt>
  <dd>
    <p>uu.tag(<i>tagName</i>, <i>context</i> = document) は
       <i>context</i> 以下のノードツリーから <i>tagName</i> と一致する要素を検索し、
          見つかった要素の配列( <a href="./GLOSSARY.htm#ElementArray">ElementArray</a> )を返します。</p>
    <p>ワイルドカード("*")を指定すると全てのタグを検索します。</p>
    <p>Tag/Elementセレクタは、常にCSSセレクタより高速です。</p>
    <pre>
 @param String  tagName   - タグ名を指定します。
                            ワイルドカード("*")を指定すると、全てのタグを検索します。
 @param Element [context] - 検索開始位置(コンテキスト)を指定します。デフォルトはdocumentです。
                            documentを指定するとノードツリーの先頭から全ての要素を検索します。
 @return ElementArray     - 検索成功で<a href="./GLOSSARY.htm#ElementArray">ElementArray</a>( [element, ...] )を返します。
                            失敗で空のElementArray( [] )を返します。
    </pre>
    <a href="demo/selector/uu.tag.htm" class="run">Run</a>
    <pre class="eg">
&lt;div&gt;
  &lt;p&gt;hoge&lt;/p&gt;
  &lt;p&gt;huga&lt;/p&gt;
&lt;/div&gt;
&lt;div id="example"&gt;
  &lt;div id="p1" class="aaa bbb"&gt;p1&lt;/div&gt;
  &lt;div id="p2" class="aaa ccc"&gt;p2&lt;/div&gt;
  &lt;div id="p3" class="bbb ccc"&gt;p3&lt;/div&gt;
&lt;/div&gt;

    uu.tag("p").forEach(function(v) {
      uu.log(v.innerText); // "hoge", "huga"
    });
    uu.tag("div", uu.id("example")).forEach(function(v) {
      uu.log(v.id); // p1, p2, p3
    });
    </pre>
  </dd>
<!-- -->
  <dt><a name="uu.klass">Class Selector</a> - クラスセレクタ</dt>
  <dd>
    <p>uu.klass(<i>className</i>, <i>context</i> = document, <i>tag</i> = undefined) は
       <i>context</i> 以下のノードツリーから、次に示す2つの条件を満たす要素を検索し、
          見つかった要素の配列( <a href="./GLOSSARY.htm#ElementArray">ElementArray</a> )を返します。</p>
    <ol>
      <li><i>className</i> が スペースを含まない文字列なら、element.className と <i>className</i> の値が完全に一致すること</li>
      <li><i>className</i> が スペースで区切られたクラス名の集合なら、element.className が <i>className</i> で指定されたクラス名を全て含んでいること</li>
    </ol>
    <p><i>className</i> には、スペース区切りで複数のクラス名を指定可能です。
      <br />要素(&lt;div class="bbb ccc aaa"&gt;&lt;/div&gt;)を検索するには、
      <br />uu.klass("aaa bbb") や uu.klass("aaa ccc") とすることができます。
    </p>
    <p>Classセレクタは、常にCSSセレクタより高速です。</p>
    <pre>
 @param String  className - クラス名を指定します。スペース区切りで複数のクラス名を指定することもできます。
 @param Element [context] - 検索開始位置(コンテキスト)を指定します。デフォルトはdocumentです。
                            documentを指定するとノードツリーの先頭から全ての要素を検索します。
 @return ElementArray     - 検索成功で<a href="./GLOSSARY.htm#ElementArray">ElementArray</a>( [element, ...] )を返します。
                            失敗で空のElementArray( [] )を返します。
    </pre>
    <a href="demo/selector/uu.klass.htm" class="run">Run</a>
    <pre class="eg">
&lt;div&gt;
  &lt;div class="white note"&gt;white&lt;/div&gt;
  &lt;div <b>class="death note"</b>&gt;death&lt;/div&gt;
  &lt;div class="super note"&gt;super&lt;/div&gt;
  &lt;div class="note"&gt;note&lt;/div&gt;
&lt;/div&gt;
&lt;script&gt;
    <b>uu.klass</b>("note death").forEach(function(v) {
      uu.log(v.innerText); // "death"
    });
&lt;/script&gt;
    </pre>
  </dd>
<!-- -->
  <dt><a name="uu.attr">Attribute Selector</a> - 属性セレクタ</dt>
  <dd>
    <p>uu.attr(<i>expr</i>, <i>context</i> = document) は
       <i>context</i> 以下のノードツリーから <i>expr</i> と一致する属性や、擬似要素/擬似クラスが一致する要素を検索し
       見つかった要素の配列( <a href="./GLOSSARY.htm#ElementArray">ElementArray</a> )を返します。</p>
    <p>uu.attrは、JavaScriptプロパティを検索し、見つからない場合にAttributeを検索します。これはブラウザ間の処理の違いを吸収するためです。</p>
    <p>複数の class 属性を検索する場合は、<a href="#uu.klass">uu.klass</a> を使用してください。
       uu.attr は 複数の class 属性を検索するように設計されていません。</p>
    <p>uu.attr は、<a href="#uu.id">uu.id</a> や <a href="#uu.tag">uu.tag</a> よりも低速ですが、
       <a href="#uu.css">uu.css</a>, <a href="#uu.xpath">uu.xpath</a> よりも手軽で、使う機会の多いセレクタです。</p>
    <pre>
 @param String  expr      - 検索式を指定します。
                            式1: E[@A]      - 式1は属性 A を持っている要素 E を検索します。E[@A] の @ は省略可能です。
                            式2: E[@A="V"]  - 式2は属性 A の値 V が一致する要素 E を検索します。E[@A="V"] の @ は省略可能です。
                            式3: E[:P]      - 式3は擬似要素/擬似クラス P が一致する要素 E を検索します。
                            E には要素名(div や ul)を指定します。"*"も指定可能です。"*"を指定すると全ての要素名を検索対象にします。
                            A には属性名(class や title)を指定します。属性名に"class"を指定すると、"className"が指定されたものとして扱います。
                            = には "^=", "$=", "*=", "!=" も指定可能です。"=" は完全一致, "^="は先頭から一致, "$="は末尾から一致, "*="はどこかが一致, "!=" は完全不一致の要素を選択します。
                            V には検索する値を指定します。
                            P には擬似クラスの名前を指定します。

                            例: uu.attr('div[@class*="widget"]'), uu.attr("*[title]"),
                                uu.attr('input[:checked]'),       uu.attr("option[:selected]");

 @param Element [context] - 検索開始位置(コンテキスト)を指定します。デフォルトは document です。
                            document を指定するとノードツリーの先頭から全ての要素を検索します。
 @return ElementArray     - 検索成功で <a href="./GLOSSARY.htm#ElementArray">ElementArray</a>( [element, ...] ) を返します。
                            失敗で空の ElementArray( [] )を返します。
    </pre>
    <table>
    <tr><th><i>expr</i></th><th>内容</th></tr>
    <tr><td>uu.attr('div[id]')     </td><td>id 属性を持つ div 要素と一致します。
                                          <hr />&lt;div id="V1"&gt; &lt;div id="V2"&gt;
                                          <br />uu.attr("div[id]").forEach(function(v) { alert(v.id); }); // "V1", "V2"
                                          </td></tr>
    <tr><td>uu.attr('div[id!=""]') </td><td>id 属性を持つが値が空ではない div 要素と一致します。
                                          <hr />&lt;div id="V1"&gt; &lt;div id="V2"&gt;
                                          <br />uu.attr('div[id!=""]').forEach(function(v) { alert(v.id); }); // "V1", "V2"
                                          </td></tr>
    <tr><td>uu.attr('*[id="V1"]')  </td><td>id 属性の値が V1 と完全に一致する全要素と一致します。
                                          <hr />&lt;div id="V1"&gt; &lt;div id="V2"&gt;
                                          <br />uu.attr('div[id="V1"]').forEach(function(v) { alert(v.id); }); // "V1"
                                          </td></tr>
    <tr><td>uu.attr('div[id^="V"]')</td><td>id 属性の値が V で始まる div 要素と一致します。
                                          <hr />&lt;div id="V1"&gt; &lt;div id="V2"&gt;
                                          <br />uu.attr('div[id^="V"]').forEach(function(v) { alert(v.id); }); // "V1", "V2"
                                    </td></tr>
    <tr><td>uu.attr('div[id$="1"]')</td><td>id 属性の値が 1 で終わる div 要素と一致します。
                                          <hr />&lt;div id="V1"&gt; &lt;div id="V2"&gt;
                                          <br />uu.attr('div[id$="1"]').forEach(function(v) { alert(v.id); }); // "V1"
                                    </td></tr>
    <tr><td>uu.attr('div[id*="V"]')</td><td>id 属性の値が V を含む div 要素と一致します。
                                          <hr />&lt;div id="V1"&gt; &lt;div id="V2"&gt;
                                          <br />uu.attr('div[id*="V"]').forEach(function(v) { alert(v.id); }); // "V1", "V2"
                                    </td></tr>
    <tr><td>uu.attr('div[class~="W"]')</td><td>id 属性の値がスペース区切りのリストで、
                                          <br />W がリストに含まれている div 要素と一致します。
                                          <hr />&lt;div id="V1" class="V W X Y Z"&gt; &lt;div id="V2" class="W"&gt;
                                          <br />uu.attr('div[@class~="W"]').forEach(function(v) { alert(v.id); }); // "V1", "V2"
                                          <hr />複数の class 属性(例: class="W" と class="Z"を含む要素)を同時に検索するには
                                          <br /><a href="#uu.klass">uu.klass</a> を使用してください。
                                    </td></tr>
    <tr><td><a href="./demo/selector/enabled.htm" class="run">uu.attr("*[:enabled]")</a></td><td>要素のdisabled属性がfalseの要素と一致します。<br />　</td></tr>
    <tr><td><a href="./demo/selector/disabled.htm" class="run">uu.attr("*[:disabled]")</a></td><td>要素のdisabled属性がtrueの要素と一致します。<br />　</td></tr>
    <tr><td><a href="./demo/selector/checked.htm" class="run">uu.attr("input[:checked]")</a></td><td>input type="radio" か input type="checkbox"の要素で、checked属性がtrueの要素と一致します。<br />:checkedはinput属性専用です。</td></tr>
    <tr><td><a href="./demo/selector/selected.htm" class="run">uu.attr("option[:selected]")</a></td><td>要素のselected属性がtrueの要素と一致します。<br />:selectedはoption要素専用です。</td></tr>
    <tr><td>uu.attr("*[:visible]")</td><td>:hidden の条件と一致しない、全ての要素と一致します。</td></tr>
    <tr><td>uu.attr("*[:hidden]")</td><td>input type="hidden" か display属性が"none" か visibility属性が"hidden" な要素と一致します。</td></tr>
    <tr><td><a href="./demo/selector/animated.htm" class="run">uu.attr("*[:animated]")</a></td><td>uu.module.effectでアニメーション動作中の要素と一致します。<br />　</td></tr>

    </table>
    <p>属性値の比較はJavaScriptプロパティと、
       HTMLにインラインで記述されている独自の属性("originalattr"など)に対して安全です。
       <br /><a href="http://d.hatena.ne.jp/uupaa/20080620">Webページ構築後にsetAttribute()で設定された値に対しては安全ではありません</a>。</p>
    <a href="demo/selector/uu.attr.htm" class="run">Run</a>
    <pre class="eg">
&lt;div&gt;
  &lt;div <b>originalattr</b>="aa-<b>attr</b>"&gt;hoge&lt;/div&gt;
  &lt;p <b>originalattr</b>="bb-<b>attr</b>"&gt;huga&lt;/p&gt;
  &lt;pre <b>class</b>="aaa <b>bbb</b> ccc"&gt;classNames&lt;/pre&gt;
  &lt;pre <b>class</b>="<b>rotate</b>10 angle20 alpha"&gt;widget&lt;/pre&gt;
&lt;/div&gt;
&lt;script&gt;
    uu.forEach(uu.attr('p[@originalattr*="attr"]'), function(v) {
      uu.log(v.tagName); // "p"
    });
    uu.forEach(uu.attr('*[@originalattr$="attr"]'), function(v) {
      uu.log(v.innerText); // "hoge", "huga"
    });
    uu.forEach(uu.attr('*[@originalattr$="attr"]'), function(v) {
      uu.log(v.tagName); // "div", "p"
    });
    uu.forEach(uu.attr("*[@originalattr]"), function(v) {
      uu.log(v.innerText); // "hoge", "huga"
    });
    uu.forEach(uu.attr('pre[@class~="bbb"]'), function(v) {
      uu.log(v.innerText); // "classNames"
    });
    uu.forEach(uu.attr('pre[@class*="rotate"]'), function(v) {
      uu.log(v.innerText); // "widget"
    });
&lt;/script&gt;
    </pre>
  </dd>

<!-- -->
  <dt><a name="uu.xpath">XPath Selector</a> - XPathセレクタ</dt>
  <dd>
    <p>uu.xpath(<i>expr</i>, <i>context</i> = document, <i>sort</i> = true) は
       <i>context</i> 以下のノードツリーから XPath式(<i>expr</i>)に一致する要素を検索し、
       見つかった要素のスナップショットを配列( <a href="./GLOSSARY.htm#ElementArray">ElementArray</a> )で返します。
    </p>
    <pre>
 @param String  expr      - XPathの評価式(ロケーションパス)を指定します。
 @param Element [context] - 検索開始位置(コンテキスト)を指定します。デフォルトはdocumentです。
                            documentを指定するとノードツリーの先頭から全ての要素を検索します。
                            コンテキストを指定した場合は、exprに"//"ではなく"./"で始まる文字列を指定します。
 @param Boolean [sort]    - 検索結果をソートする場合は true, しない場合はfalseを指定します。
                            省略可能です。デフォルトはtrueです。
 @return ElementArray     - <a href="./GLOSSARY.htm#ElementArray">ElementArray</a>( [ element, ... ] )を返します。
                            返される値は、ある時点のスナップショットです(静的な情報であり、ノードツリーの変化には追従しない)
    </pre>
    <a href="demo/selector/uu.xpath.htm" class="run">Run</a>
    <pre class="eg">
&lt;div&gt;
  &lt;p id="<b>hoge</b>"&gt;hoge&lt;/p&gt;
  &lt;p id="<b>huga</b>"&gt;huga&lt;/p&gt;
&lt;/div&gt;
&lt;script&gt;
    uu.forEach(<b>uu.xpath</b>("//p[@id]", document), function(v) {
      uu.log(v.id); // "hoge", "huga"
    });
&lt;/script&gt;
    </pre>
  </dd>

<!-- -->
  <dt><a name="uu.css">CSS Selector</a> - CSSセレクタ</dt>
  <dd>
    <p>uu.css(<i>expr</i>, <i>context</i> = document) は
       <i>context</i> 以下のノードツリーから <i>expr</i> に一致する要素を検索し、
       見つかった要素の配列( <a href="./GLOSSARY.htm#ElementArray">ElementArray</a> )を返します。</p>
    <p>特定のノード以下の要素を検索する場合は、<i>context</i> を指定します。
       全ノードを検索する場合は、<i>context</i> の指定を省略できます。</p>
    <p><a href="#List_of_CSS_Selectors">使用可能なCSSセレクタの一覧</a>をご覧ください。</p>
    <p>HTMLDocument(content-type: text/html)なら タグの大小文字を無視して検索を行います(uu.css("a")で&lt;a&gt;も&lt;A&gt;もヒットする)
       <br />XMLLDocument(content-type: text/xml, application/xml, application/xhtml+xml) なら タグの大小文字は区別します。</p>
    <p>擬似要素のセミコロンは1つでも2つでも同じ結果になります(:before と ::before は同じ)。</p>
    <p>擬似要素(::first-line, ::first-letter, ::before, ::after)はエラーになりませんが、擬似要素の指定が無かったものとして扱います(div &gt; a::after は div &gt; a と同じ結果になります。</p>
    <ul>
      <li><a href="http://www.w3.org/TR/2005/WD-css3-selectors-20051215/">CSS Selectors(CSSセレクタの仕様)(英語)</a></li>
      <li><a href="http://zng.info/specs/css3-selectors.html">CSS Selectors(CSSセレクタの仕様)(日本語)</a></li>
      <li><a href="http://d.hatena.ne.jp/uupaa/20081011/1223723093">開発日記(制限事項等の記載もあり)</a></li>
      <li><a href="http://pigs.sourceforge.jp/blog/200810070000/slickspeed/frameworks/test.html" class="run">CSSセレクタの精度をテスト</a></li>
      <li><a href="http://pigs.sourceforge.jp/blog/200810070000/slickspeed/" class="run">CSSセレクタの速度をテスト(途中で止まる場合は要リロード)</a></li>
    </ul>
    <pre>
 @param String  expr      - CSSセレクタを指定します。
 @param Element [context] - 検索開始位置(コンテキスト)を指定します。デフォルトはdocumentです。
                            documentを指定するとノードツリーの先頭から全ての要素を検索します。
 @return ElementArray     - 検索成功で<a href="./GLOSSARY.htm#ElementArray">ElementArray</a>( [element, ...] )を返します。
                            失敗で空のElementArray( [] )を返します。
 @throws TypeError "uu.css(...)" 使用できないセレクタを指定した
    </pre>

    <a href="demo/selector/uu.css.htm" class="run">Run</a>
    <p>要素を検索する(タグの大文字小文字を無視する), contextを指定して要素を絞り込む</p>
    <pre class="eg">
&lt;p&gt;content-type: text/html&lt;/p&gt;
&lt;div&gt;
  &lt;div id="one"&gt;
    &lt;p&gt;p1&lt;/p&gt;
    &lt;p&gt;p2&lt;/p&gt;
  &lt;/div&gt;
  &lt;DIV id="two"&gt;
    &lt;P&gt;p3&lt;/P&gt;
    &lt;P&gt;p4&lt;/P&gt;
  &lt;/DIV&gt;
&lt;/div&gt;

  <b>uu.css</b>("p:nth-last-of-type(1)", uu.id("two")).forEach(function(v) {
    uu.log(v.innerText); // "p4"
  });
  <b>uu.css</b>("#one &gt; P:nth-last-of-type(1)").forEach(function(v) {
    uu.log(v.innerText); // "p2"
  });
    </pre>
    <a href="demo/selector/uu.css2.htm" class="run">Run</a>
    <p>一つ飛びにリストを着色する(ゼブラカラー), 上/下から3つを着色する, 特定位置のノードだけ着色する</p>
    <pre>
&lt;div class="zebra"&gt;
 &lt;ul&gt;
  &lt;li&gt;list1&lt;/li&gt;
  &lt;li&gt;list2&lt;/li&gt;
  &lt;li&gt;list3&lt;/li&gt;
  &lt;li&gt;list4&lt;/li&gt;
  &lt;li&gt;list5&lt;/li&gt;
  &lt;li&gt;list6&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;div class="top3"&gt;
 &lt;ul&gt;
  &lt;li&gt;list1&lt;/li&gt;
  &lt;li&gt;list2&lt;/li&gt;
  &lt;li&gt;list3&lt;/li&gt;
  &lt;li&gt;list4&lt;/li&gt;
  &lt;li&gt;list5&lt;/li&gt;
  &lt;li&gt;list6&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;div class="worst3"&gt;
 &lt;ul&gt;
  &lt;li&gt;list1&lt;/li&gt;
  &lt;li&gt;list2&lt;/li&gt;
  &lt;li&gt;list3&lt;/li&gt;
  &lt;li&gt;list4&lt;/li&gt;
  &lt;li&gt;list5&lt;/li&gt;
  &lt;li&gt;list6&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;div class="no5"&gt;
 &lt;ul&gt;
  &lt;li&gt;list1&lt;/li&gt;
  &lt;li&gt;list2&lt;/li&gt;
  &lt;li&gt;list3&lt;/li&gt;
  &lt;li&gt;list4&lt;/li&gt;
  &lt;li&gt;list5&lt;/li&gt;
  &lt;li&gt;list6&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;

  <b>uu.css</b>("div.zebra ul>li:nth-child(even)").forEach(function(v) {
   v.style.backgroundColor = "silver";
  });
  <b>uu.css</b>("div.top3 ul>li:nth-child(-n+3)").forEach(function(v) {
   v.style.backgroundColor = "silver";
  });
  <b>uu.css</b>("div.worst3 ul>li:nth-last-child(-n+3)").forEach(function(v) {
   v.style.backgroundColor = "silver";
  });
  <b>uu.css</b>("div.no5 ul&gt;li:nth-child(5)").forEach(function(v) {
   v.style.backgroundColor = "silver";
  });
    </pre>
  </dd>

<!-- -->
<!--
  <dt><a name="uu.pseudo">Pseudo Selector</a> - 擬似セレクタ</dt>
  <dd>
    <p>uu.pseudo(<i>expr</i>, <i>context</i> = document, <i>tag</i> = undefined) は
       <i>context</i> 以下のノードツリーから <i>expr</i> に一致する要素を検索し、
       見つかった要素の配列( <a href="./GLOSSARY.htm#ElementArray">ElementArray</a> )を返します。</p>
    <p><a href="#List_of_Pseudo_Selectors">使用可能な擬似セレクタの一覧</a>をご覧ください。</p>
    <pre>
 @param String  expr      - 擬似セレクタを指定します。
 @param Element [context] - 検索開始位置(コンテキスト)を指定します。デフォルトはdocumentです。
                            documentを指定するとノードツリーの先頭から全ての要素を検索します。
 @param String  [tag]     - 指定したtagのみ検索対象とする場合に指定します。
                            exprが":checked"の場合は、tagの指定が無効になります。
 @return ElementArray     - 検索成功で<a href="./GLOSSARY.htm#ElementArray">ElementArray</a>( [element, ...] )を返します。
                            失敗で空のElementArray( [] )を返します。
    </pre>
    <p>属性値の比較はJavaScriptプロパティと、
       HTMLにインラインで記述されている独自の属性("originalattr"など)に対して安全です。
       <br /><a href="http://d.hatena.ne.jp/uupaa/20080620">Webページ構築後にsetAttribute()で設定された値に対しては安全ではありません</a>。</p>
    <a href="demo/selector/uu.pseudo.htm" class="run">Run</a> |
    <a href="demo/selector/selector.htm" class="run">擬似セレクタのテスト</a>
    <pre class="eg">
      var e = uu.id("checkbox1");
      e.checked = true;
      var rv = uu.pseudo(":checked"); // "checkbox1"

      // FirefoxとSafariでは、以下のコードは正しく機能しない場合があります。
      e.setAttribute("checked", "checked");
      var rv = uu.pseudo(":checked"); // "checkbox1"
    </pre>
  </dd>
 -->
<!-- -->
  <dt><a name="uu.nodeType">NodeType Selector</a> - ノードタイプセレクタ</dt>
  <dd><p>uu.node(<i>nodeType</i>, <i>context</i> = document, <i>depth</i> = 0) は、
      <i>context</i> 以下のノードツリーから <i>nodeType</i> が一致する要素を検索し、
      見つかった要素の配列( <a href="./GLOSSARY.htm#ElementArray">ElementArray</a> )を返します。</p>
      <p><i>depth</i>に1以上の値を指定すると、再帰的に子孫ノードを検索します。
         <br /><i>depth</i> = 0 なら、<i>context</i> 以下のノードについてのみ検索を行います。
         <br />全ての階層について検索を行う場合は、十分に大きな値(例: 999)を指定します。
         </p>
      <p><i>nodeType</i>に指定可能な<a href="./GLOSSARY.htm#NodeType">ノードタイプ</a>値は、
         <br />1(ELEMENT_NODE), 3(TEXT_NODE), 8(COMMENT_NODE)です。</p>
      <pre>
 @param Number  [nodeType] - 検索する<a href="./GLOSSARY.htm#NodeType">ノードタイプ</a>を指定します。デフォルトは1(ELEMENT_NODE)です。
 @param Element [context]  - 検索開始位置(コンテキスト)を指定します。デフォルトはdocumentです。
                             documentを指定するとノードツリーの先頭から全ての要素を検索します。
 @param Number  [depth]    - 到達可能な深度を指定します。
                             0以上の値を指定すると子孫ノードを再帰的に検索/列挙します。
                             0を指定すると表層のみを検索します。デフォルトは0です。
 @return ElementArray      - 検索成功で<a href="./GLOSSARY.htm#ElementArray">ElementArray</a>( [element, ...] )を返します。
                             失敗で空のElementArray( [] )を返します。
      </pre>
  </dd>
<!-- -->
  <dt><a name="uu.textNode">TextNode Selector</a> - Textノードセレクタ</dt>
  <dd><p>uu.text(<i>context</i> = document, <i>depth</i> = 0) は、
      <i>context</i> 以下のノードツリーから TEXT_NODEを検索し、
      見つかったTEXT_NODEの配列( <a href="./GLOSSARY.htm#ElementArray">ElementArray</a> )を返します。</p>
      <pre>
 @param Element [context] - 検索開始位置(コンテキスト)を指定します。デフォルトはdocumentです。
                            documentを指定するとノードツリーの先頭から全ての要素を検索します。
 @param Number  [depth]   - 到達可能な深度を指定します。
                            0以上の値を指定すると子孫ノードを再帰的に検索/列挙します。
                            0を指定すると表層のみを検索します。デフォルトは0です。
 @return ElementArray     - 検索成功で<a href="./GLOSSARY.htm#ElementArray">ElementArray</a>( [element, ...] )を返します。
                            失敗で空のElementArray( [] )を返します。
      </pre>
  </dd>

  <dt><a name="List_of_CSS_Selectors">uu.css で使用可能なCSSセレクタの一覧 - List of the available CSS selectors</a></dt>
  <dd>
    <p><a href="#uu.css">uu.css</a>で指定可能な CSS セレクタの一覧です。
<!--
       <a href="http://docs.jquery.com/Selectors">jQuery独自セレクタ(外部サイト)</a> も使用することができます。
 -->
    </p>
    <table>
    <tr><th>CSS Selectors           </th><th>Substitute<br />より高速な代替方法</th><th>Note</th></tr>
    <tr><td>uu.css('*')             </td><td>uu.tag('*')</td><td>Universal selector<hr />全ての要素と一致します。</td></tr>
    <tr><td>uu.css('#id')           </td><td>uu.id('id')</td><td>ID selectors<hr />属性id が "id" の要素と一致します。</td></tr>
    <tr><td>uu.css('.classA')<br />
            uu.css('.classA.classB')</td><td>uu.klass('classA')<br />uu.klass('classA classB')</td>
                                         <td>Class selectors<hr />属性classが"classA"を含んでいる要素と一致します。
                                             <br />classAとclassBが指定されている場合は両方を含んでいる要素と一致します。</td></tr>
    <tr><td>uu.css('<i>E</i>')       </td><td>uu.tag('<i>E</i>')</td><td>Type selectors<hr />全ての要素Eと一致します。</td></tr>
    <tr><td>uu.css('<i>E, F, G</i>') </td><td>　</td><td>Selectors group<hr />複数のセレクタを一度に指定できます。<br />個々のセレクタの評価結果を纏めて返します。<br />重複する要素は一つにまとめます。<br />いずれかのセレクタの評価が失敗すると全て失敗します(空の配列を返します)。</td></tr>
    <tr><td>uu.css('<i>E F</i>')    </td><td>uu.tag('<i>F</i>', <i>E</i>)</td><td>Descendant combinator<hr />要素Eの子孫の全ての要素Fと一致します。</td></tr>
    <tr><td>uu.css('<i>E > F</i>')   </td><td>　</td><td>Child combinator<hr />要素Eの子供の要素Fと一致します。</td></tr>
    <tr><td>uu.css('<i>E + F</i>')</td><td>　</td><td>Adjacent sibling combinator<hr />要素EとFが兄弟で、要素Eと隣接する要素Fと一致します。<br />最大で1つ要素がヒットします。</td></tr>
    <tr><td>uu.css('<i>E ~ F</i>')</td><td>　</td><td>General sibling combinator<hr />要素EとFが兄弟で、要素Eの後に存在する要素Fと一致します。<br />複数の要素がヒットする可能性があります。</td></tr>
    <tr><td>uu.css('<i>E[A]</i>')    </td><td>uu.attr('<i>E[A]</i>')</td><td>Attribute selectors<hr />属性Aを持つ全ての要素Eと一致します。属性の値は問いません。</td></tr>
    <tr><td>uu.css('<i>E[A="V"]</i>')</td><td>uu.attr('<i>E[A="V"]</i>')</td><td>Attribute selectors<hr />属性Aの値がVの全ての要素Eと一致します。</td></tr>
    <tr><td>uu.css('<i>E[A~="V"]</i>')</td><td>uu.attr('<i>E[A~="V"]</i>')</td><td>Attribute selectors<hr />属性Aの値がスペース区切りのリストで、<br />リストがVを含む全ての要素Eと一致します。</td></tr>
    <tr><td>uu.css('<i>E[A|="V"]</i>')</td><td>　</td><td>Attribute selectors<hr />属性Aの値がハイフン区切りのリストで、<br />"V"または"V-"で始まる単語を含む全ての要素Eと一致します。</td></tr>
    <tr><td>uu.css('<i>E[A^="V"]</i>')</td><td>uu.attr('<i>E[A^="V"]</i>')</td><td>Attribute selectors<hr />属性Aの値がVで始まる全ての要素Eと一致します。</td></tr>
    <tr><td>uu.css('<i>E[A$="V"]</i>')</td><td>uu.attr('<i>E[A$="V"]</i>')</td><td>Attribute selectors<hr />属性Aの値がVで終わる全ての要素Eと一致します。</td></tr>
    <tr><td>uu.css('<i>E[A*="V"]</i>')</td><td>uu.attr('<i>E[A*="V"]</i>')</td><td>Attribute selectors<hr />属性Aの値がVを含む全ての要素Eと一致します。</td></tr>
    <tr><td>uu.css('<i>E[A!="V"]</i>')</td><td>uu.attr('<i>E[A!="V"]</i>')</td><td>Attribute selectors<hr />属性Aの値がVと一致しない全ての要素Eと一致します。</td></tr>
    <tr><td>uu.css('<i>E</i>:not(expr)')      </td><td></td><td>exprに一致しない要素Eと一致します。<br />expr には "*" , "#id" および ".class" を指定可能です。</td></tr>
    <tr><td>uu.css(':root')           </td><td>uu.tag('html')<br />document.documentElement</td><td>Pseudo-class<hr />ルート要素(HTML要素)と一致します。</td></tr>
    <tr><td>uu.css('<i>E</i>:first-child')</td><td>　</td><td>Pseudo-class<hr />最初の子要素と一致します。</td></tr>
    <tr><td>uu.css('<i>E</i>:last-child')</td><td>　</td><td>Pseudo-class<hr />最後の子要素と一致します。</td></tr>
    <tr><td>uu.css('<i>E</i>:only-child')</td><td>　</td><td>Pseudo-class<hr />一人っ子と一致します。</td></tr>
    <tr><td>uu.css('<i>E</i>:nth-child(<a href="#anb"><i>an+b</i></a>)')     </td><td>　</td><td>Pseudo-class<hr />先頭から数えて<br />(n|even|odd|an+b)番目の兄弟要素と一致します。</td></tr>
    <tr><td>uu.css('<i>E</i>:nth-last-child(<a href="#anb"><i>an+b</i></a>)')</td><td>　</td><td>Pseudo-class<hr />末尾から数えて<br />(n|even|odd|an+b)番目の兄弟要素と一致します。</td></tr>
    <tr><td>uu.css('<i>E</i>:first-of-type')</td><td>　</td><td>Pseudo-class<hr />E要素と同じ要素名の兄弟で、最初の兄弟と一致します。</td></tr>
    <tr><td>uu.css('<i>E</i>:last-of-type')</td><td>　</td><td>Pseudo-class<hr />E要素と同じ要素名の兄弟で、最後の兄弟と一致します。</td></tr>
    <tr><td>uu.css('<i>E</i>:only-of-type')</td><td>　</td><td>Pseudo-class<hr />要素Eの親からみてユニークなEであれば一致します。<br />兄弟にEがいれば一致しません。</td></tr>
    <tr><td>uu.css('<i>E</i>:nth-of-type(<a href="#anb"><i>an+b</i></a>)')     </td><td>　</td><td>Pseudo-class<hr />E要素と同じ要素名の兄弟を先頭から数えて<br />(n|even|odd|an+b)番目の兄弟要素と一致します。</td></tr>
    <tr><td>uu.css('<i>E</i>:nth-last-of-type(<a href="#anb"><i>an+b</i></a>)')</td><td>　</td><td>Pseudo-class<hr />E要素と同じ要素名の兄弟を末尾から数えて<br />(n|even|odd|an+b)番目の兄弟要素と一致します。</td></tr>
    <tr><td>uu.css('<i>E</i>:empty')</td><td>　</td><td>Pseudo-class<hr />独身(子要素やテキストノードを持たない要素E)と一致します。</td></tr>
    <tr><td>uu.css('<i>E</i>:lang(en)')</td><td>　</td><td>Pseudo-class<hr />要素のlang属性が"en"や"en-US"な要素と一致します。</td></tr>
    <tr><td>uu.css('<i>E</i>:contains("Hello")')</td><td>　</td><td>Pseudo-class<hr />"Hello"を含んでいるテキストノードを持つ要素と一致します。</td></tr>
    <tr><td>uu.css('<i>E</i>:enabled')</td><td>　</td><td>Pseudo-class<hr />disabled 属性に "disabled" 以外の値が設定されている要素と一致します。</td></tr>
    <tr><td>uu.css('<i>E</i>:disabled')</td><td>　</td><td>Pseudo-class<hr />disabled 属性に "disabled" が設定されている要素と一致します。</td></tr>
    <tr><td>uu.css('<i>E</i>:checked')</td><td>　</td><td>Pseudo-class<hr />チェックされている要素(radiobox, checkbox)と一致します。</td></tr>
    <tr><td>uu.css('<i>E</i>:contains("foo")')</td><td>　</td><td>Pseudo-class<hr />テキストノードが "foo" を含んでいる要素と一致します。</td></tr>
    <tr><td>uu.css('<i>E</i>:link')</td><td>　</td><td>Pseudo-class<hr />未訪問のリンクを持つ要素と一致します。</td></tr>
    <tr><td>uu.css('<i>E</i>:visited')</td><td>　</td><td>Pseudo-class<hr />訪問済みのリンクを持つ要素と一致します。</td></tr>
    <tr><td>uu.css('<i>E</i>:hover')</td><td>　</td><td>Pseudo-class<hr />マウスカーソルの真下に位置する要素Eと一致します。<br />IE等の一部のブラウザでは、Eにa要素のみ指定可能です。</td></tr>
    <tr><td>uu.css('<i>E</i>:focus')</td><td>　</td><td>Pseudo-class<hr />フォーカスを持っている要素と一致します。<br />IE等の一部のブラウザでは、Eにa要素やフォーム部品のみ指定可能です。</td></tr>
    <tr><td>uu.css('<i>E</i>:target')</td><td>　</td><td>Pseudo-class<hr />ページのURIのhashが示すid(またはname)属性を持つ要素と一致します。
                                                                            <br />ページのURIが ./index.html#topic1 の時に、
                                                                            <br />&lt;a id="topic1"&gt;&lt;/a&gt; や
                                                                            <br /> &lt;a name="topic1"&gt;&lt;/a&gt; とマッチします。</td></tr>
    <tr><td>uu.css('<i>E</i>:first-line')<br />
            uu.css('<i>E</i>::first-line')</td><td>　</td><td>Pseudo-element<hr />要素の先頭行と一致します。
                                                                            <br />実際には要素の先頭行を持つ要素と一致します。
                                                                            <br />つまり、div&gt;ul::first-line は div&gt;ul と同じ結果になります。</td></tr>
    <tr><td>uu.css('<i>E</i>:first-letter')<br />
            uu.css('<i>E</i>::first-letter')</td><td>　</td><td>Pseudo-element<hr />要素の先頭文字と一致します。
                                                                            <br />実際には要素の先頭文字を持つ要素と一致します。
                                                                            <br />つまり、div&gt;ul::first-letter は div&gt;ul と同じ結果になります。</td></tr>
    <tr><td>uu.css('<i>E</i>:before')<br />
            uu.css('<i>E</i>::before')</td><td>　</td><td>Pseudo-element<hr />要素の前に追加される擬似的な要素と一致します。
                                                                            <br />実際には要素の先頭行を持つ要素と一致します。
                                                                            <br />つまり、div&gt;ul::before は div&gt;ul と同じ結果になります。</td></tr>
    <tr><td>uu.css('<i>E</i>:after')<br />
            uu.css('<i>E</i>::after')</td><td>　</td><td>Pseudo-element<hr />要素の後ろに追加される擬似的な要素と一致します。
                                                                            <br />実際には要素の先頭文字を持つ要素と一致します。
                                                                            <br />つまり、div&gt;ul::after は div&gt;ul と同じ結果になります。</td></tr>
    </table>
<!--
    <table>
    <tr><th><a name="List_of_jQuery_Selectors">jQuery Selectors</a></th><th>Substitute<br />代替セレクタ</th><th>Note</th></tr>
    <tr><td>:first        </td><td>uu.tag("<i>E</i>")[0]</td><td>最初の要素と一致します。</td></tr>
    <tr><td>:last         </td><td>uu.tag("<i>E</i>")[length - 1]</td><td>最後の要素と一致します。</td></tr>
    <tr><td>:even         </td><td>:nth-child(even)</td><td>偶数番目の要素と一致します。</td></tr>
    <tr><td>:odd          </td><td>:nth-child(odd)</td><td>奇数番目の要素と一致します。</td></tr>
    <tr><td>:eq(index)    </td><td>:nth-child(index)</td><td>ルート要素から検索し、index番目の要素と一致します。</td></tr>
    <tr><td>:gt(index)    </td><td>none</td><td>ルート要素から検索し、index番超の要素と一致します。<br />:gt(4) は5番目以上と一致し4番目は含みません。</td></tr>
    <tr><td>:lt(index)    </td><td>none</td><td>ルート要素から検索し、index番未満の要素と一致します。<br />:lt(4) は3番目以下と一致し4番目は含みません。</td></tr>
    <tr><td>:header       </td><td>uu.tag("h1") + uu.tag("h2") +
                                   <br />uu.tag("h3") + uu.tag("h4") +
                                   <br />uu.tag("h5") + uu.tag("h6")</td><td>ルート要素から検索し、<br />h1,h2,h3,h4,h5,h6要素と一致します。</td></tr>
    <tr><td>:contains(text)</td><td>none</td><td>テキストノードがtextを含んでいる要素と一致します。</td></tr>
    <tr><td>:parent       </td><td>none</td><td>親要素から見て、<br />テキストノードを含んでいる全ての子要素と一致します。</td></tr>
    <tr><td>:input        </td><td>uu.tag("input") +
                                   <br />uu.tag("textarea") +
                                   <br />uu.tag("select") +
                                   <br />uu.tag("button")</td><td>全てのinput, textarea, select, button要素と一致します。</td></tr>
    <tr><td>:text         </td><td>uu.attr("input[@text]")</td><td>input type="text"の要素と一致します。</td></tr>
    <tr><td>:password     </td><td>uu.attr("input[@password]")</td><td>input type="password"の要素と一致します。</td></tr>
    <tr><td>:radio        </td><td>uu.attr("input[@radio]")</td><td>input type="radio"の要素と一致します。</td></tr>
    <tr><td>:checkbox     </td><td>uu.attr("input[@checkbox]")</td><td>input type="checkbox"の要素と一致します。</td></tr>
    <tr><td>:submit       </td><td>uu.attr("input[@submit]")</td><td>input type="submit"の要素と一致します。</td></tr>
    <tr><td>:image        </td><td>uu.attr("input[@image]")</td><td>input type="image"の要素と一致します。</td></tr>
    <tr><td>:reset        </td><td>uu.attr("input[@reset]")</td><td>input type="reset"の要素と一致します。</td></tr>
    <tr><td>:button       </td><td>uu.attr("input[@button]")</td><td>input type="button"の要素と一致します。</td></tr>
    <tr><td>:file         </td><td>uu.attr("input[@file]")</td><td>input type="file"の要素と一致します。</td></tr>
    </table>
 -->
  </dd>
  <dt><a name="anb">:nth-child 系の式(an+b)について</a></dt>
  <dd>
    <p>:nth-child(an+b), :nth-last-child(an+b), :nth-of-type(an+b), :nth-last-of-type(an+b) の an+b には計算式を指定します。
      <br />テーブルやリストの行をゼブラカラーにする場合などに多用されます。
    </p>
    <p>a には 繰り返し方法を数値で指定します。a=2 なら 2で割り切れる順番の要素を選択し、a=3なら3で割り切れる順番の要素を選択します。aを省略すると 1 が指定されたものとして扱います。
      <br />b には 先頭からのオフセットを数値で指定します。b=0なら先頭の要素を選択し、b=1なら先頭から2番目の要素を選択します。bを省略すると 0が指定されたものとして扱います。
    </p>
    <ul>
      <li>uu.css("<i>E</i>:nth-child(3)"): 先頭から数えて4番目の兄弟要素と一致します。</li>
      <li>uu.css("<i>E</i>:nth-child(even)"): 先頭から数えて偶数番目の兄弟要素と一致します。0,2,4...番目の要素が"even"と一致します。</li>
      <li>uu.css("<i>E</i>:nth-child(odd)"): 先頭から数えて奇数番目の兄弟要素と一致します。1,3,5...番目の要素が"odd"と一致します。</li>
      <li>uu.css("<i>E</i>:nth-child(2n)"): "even"と同じです。</li>
      <li>uu.css("<i>E</i>:nth-child(2n+1)"): "odd"と同じです。</li>
      <li>uu.css("<i>E</i>:nth-child(4n+1)"): 4で割って余りが0の番号を持つ要素を選択します。</li>
      <li>uu.css("<i>E</i>:nth-child(4n+2)"): 4で割って余りが1の番号を持つ要素を選択します。</li>
      <li>uu.css("<i>E</i>:nth-child(4n+3)"): 4で割って余りが2の番号を持つ要素を選択します。</li>
      <li>uu.css("<i>E</i>:nth-child(4n+4)"): 4で割って余りが3の番号を持つ要素を選択します。</li>
      <li>uu.css("<i>E</i>:nth-child(-n+3)"): 先頭から要素を3つ選択します。</li>
      <li>uu.css("<i>E</i>:nth-last-child(-n+3)"): 末尾から要素を3つ選択します。</li>
    </ul>
  </dd>
</dl>

</body>
</html>
