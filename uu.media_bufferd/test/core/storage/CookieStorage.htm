<!DOCTYPE html><html lang="ja"><head><meta charset="UTF-8" />
<title>uu.storage</title>
<script>
window.uuconfig = {
    storage:    {
        order:  "CM"            // String: storage order
    }
};
</script>
<script src="../../../src/uupaa.js"></script>
<script>
uu.ready(function(uu) {
    uu.id("setpair").disabled = false;
    uu.id("refresh").disabled = false;
}, "storage", function(uu, storage) {
    uu.text(uu.id("backend"), storage.info().backend);
    updateSize();
});

function getRandomKeyValuePair() {
    uu.id("key").value = "key" + ((Math.random() * 100000) | 0);
    uu.id("val").value = "val" + ((Math.random() * 100000) | 0);
}

function updateView() {
    var hash = uu.storage.item();
    var info = uu.storage.info();

    uu.form.value(uu.id("all"), uu.json(hash));
    uu.text(uu.id("pairs"), info.pair + " pairs");
}

function updateSize() {
    var info = uu.storage.info();
    var node = uu.id("size");
    var remain = info.max - info.used;

    if (remain < 0) {
        node.style.color = "red";
    } else {
        node.style.color = "black";
    }
    if (info.max === Number.MAX_VALUE) {
        uu.text(node, "used: 0bytes, max: Number.MAX_VALUE, free: unknown");
        uu.id("limittest").disabled = true;

    } else if (info.max > 1024 * 1024) {
        uu.text(node,
            uu.format("used: @bytes(@MB), max: @MB, remain: @bytes(@MB)",
                      info.used,
                      (info.used / 1024 / 1024).toFixed(2),
                      (info.max  / 1024 / 1024).toFixed(2),
                      remain,
                      (remain / 1024 / 1024).toFixed(2)));

    } else {
        uu.text(node,
            uu.format("used: @bytes, max: @bytes, free: @bytes",
                      info.used,
                      info.max,
                      remain));
    }
}

function getPair() {
    var val = uu.storage.item(uu.id("key").value);

    uu.id("val").value = val;

    updateView();
}

function setPair(rand, norefresh) {
    if (rand) {
        getRandomKeyValuePair();
    }
    if (!uu.storage.item(uu.id("key").value, uu.id("val").value)) {
        alert("fail");
        return;
    }
    if (!norefresh) {
        updateView();
    }
    updateSize();
}

function removeEdgePair(last) {
    var info = uu.storage.info();
    var key = uu.storage.key(last ? info.pair - 1 : 0) || "", val = "";

    if (key) {
        val = uu.storage.item(key);
    }
    uu.id("key").value = key;
    uu.id("val").value = val;

    uu.storage.clear(key);
    updateView();
    updateSize();
}

function removePair() {
    var key = uu.id("key").value;

    uu.storage.clear(key);
    updateView();
    updateSize();
}

function clearAllPairs() {
    uu.storage.clear();
    updateView();
    updateSize();
    uu.id("setpair").disabled = false;
    uu.id("refresh").disabled = false;
}

function limitTest() {
    clearAllPairs();

    var info = uu.storage.info();
    var used = ((info.max - info.used) - 80) | 0; // 80 margin
    var spam = Array(used + 1).join("0");

    if (!uu.storage.item("a", spam)) {
        updateSize();
        alert("test fail");
    } else {
        updateSize();
        alert("test ok");
        uu.id("setpair").disabled = true;
//        uu.id("refresh").disabled = true;
    }
}
</script>
</head><body>
<p>
    <a href="Storage.htm">Storage</a> |
    <a href="LocalStorage.htm">LocalStorage</a> |
    <a href="FlashStorage.htm">FlashStorage</a> |
    <a href="IEStorage.htm">IEStorage</a> |
    <a href="CookieStorage.htm">CookieStorage</a> |
    <a href="MemStorage.htm">MemStorage</a>
</p>
<h1 id="backend" style="text-shadow: gray 3px 3px 3px">Plz Wait...</h1>
<input id="refresh" type="button" value="refresh" onclick="updateView(); updateSize();" />
|
<input id="setpair" type="button" value="add new pair" onclick="setPair(1, 0)" />
<input type="button" value="remove first pair" onclick="removeEdgePair(0)" />
<input type="button" value="remove last pair" onclick="removeEdgePair(1)" />
<input type="button" value="remove pair" onclick="removePair()" />
| <input type="button" value="clear all pairs" onclick="clearAllPairs()" />
<br />
<br />
key/value: <input id="key" type="text" value="key" />
<input id="val" type="text" value="val" />
<input type="button" value="update value / create new pair" onclick="setPair(0)" />
<input type="button" value="get value from key" onclick="getPair()" />
<br /><span id="pairs">unknown</span>
<br /><span id="size">unknown</span>
<br />
<textarea id="all" cols="60" rows="5"></textarea><br />
<br />
<p>test:</p>
<input id="limittest" type="button" value="limit test" onclick="limitTest()" /> -&gt;
<input type="button" value="add pair(no refresh)" onclick="setPair(1, 1)" />

</body></html>
