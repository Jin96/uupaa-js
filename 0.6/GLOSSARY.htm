<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title>uupaa.js - Glossary</title>
<style type="text/css">@import url(./README.css);</style>
</head>
<body>
<h2>GLOSSARY - 用語集</h2>
<dl>
  <dt><a name="Pollution">Pollution</a> - Global name space pollution, Prototype object pollution - グローバルネームスペース汚染, prototype汚染</dt>
    <dd><p>JavaScript は最初から存在するオブジェクト(ビルトインオブジェクト)の拡張が可能です。</p>
<pre class="eg">
<u>// Numberオブジェクトを拡張し「奇数ならtrueを返す」メソッドを追加する</u>
Number.prototype.odd = function() {
  return !!(this.valueOf() % 2);
}
</pre>
        <p>これは JavaScript の魅力の1つであり OOP 的な観点からも有益に見えるものですが、これには落とし穴があります。
           <br />安易な拡張を繰り返すと ライブラリ併用時の衝突や、
           Array + for in ループで拡張された(意図しない)プロパティが列挙され、ループ処理が使えなくなる等の副作用が露呈するのです。</p>
        <p>やりすぎた拡張は「プロトタイプ汚染」と呼ばれます。JavaScript という言語が持つ優れた拡張性は、汚染とのトレードオフなのです。</p>
        <p>ブラウザ上で動作する JavaScript では、トップレベルオブジェクト(window オブジェクト)が常に存在します。
          <br />トップレベルオブジェクトはどこからでもアクセス可能なネームスペース(スコープ)に属す特別なオブジェクトです。
          <br />window オブジェクトに何かを追加するということは、グローバル関数やグローバル変数を追加したことになります。</p>
<pre class="eg">
<u>// ブラウザ上で動作する JavaScript では</u>
<u>// var hoge = 1; は、window.hoge = 1; と同じ</u>
&lt;script&gt;
var hoge = 1;
alert(hoge === window.hoge); <u>// true</u>
&lt;/script&gt;
</pre>
        <p>コンセプトの異なる複数のライブラリを組み合わせた場合に、トップレベルオブジェクト以下の名前空間(グローバルネームスペース)が汚染され、ライブラリの衝突が発生するケースがあります。
           <br />特に、window.$ や window.$$ などは、多くのライブラリが似て非なる実装を行っているため、簡単に衝突します。</p>
        <p>以下が uupaa.js によるグローバルネームスペースの拡張リストです。<br />
           ライブラリ併用による衝突が発生しないように配慮してあります。</p>
        <dl>
          <dt>window(Global Object)</dt>
            <dd>
              <p>uu で始まるキーワードは uupaa.js が使用します。</p>
              <ul>
                  <li>window.uu - uupaa.js 用ネームスペース</li>
                  <li>window.uuClass - クラス用ネームスペース</li>
                  <li>window.uuConst - 定数格納用ネームスペース</li>
                  <li>window.uuConfig - 設定格納用ネームスペース</li>
              </ul>
            </dd>
          <dt>Array.prototype</dt>
            <dd>
              <p>ECMA-262の仕様を非モダンブラウザでも使用可能にします。</p>
              <ul>
                <li><a href="https://developer.mozilla.org/ja/Core_JavaScript_1.5_Reference/Global_Objects/Array/indexOf">MDC::Array.prototype.indexOf</a><i> - (JavaScript 1.5準拠)</i></li>
                <li><a href="https://developer.mozilla.org/ja/Core_JavaScript_1.5_Reference/Global_Objects/Array/lastIndexOf">MDC::Array.prototype.lastIndexOf</a><i> - (JavaScript 1.5準拠)</i></li>
                <li><a href="https://developer.mozilla.org/ja/Core_JavaScript_1.5_Reference/Global_Objects/Array/forEach">MDC::Array.prototype.forEach</a><i> - (JavaScript 1.6準拠)</i></li>
                <li><a href="https://developer.mozilla.org/ja/Core_JavaScript_1.5_Reference/Global_Objects/Array/filter">MDC::Array.prototype.filter</a><i> - (JavaScript 1.6準拠)</i></li>
                <li><a href="https://developer.mozilla.org/ja/Core_JavaScript_1.5_Reference/Global_Objects/Array/every">MDC::Array.prototype.every</a><i> - (JavaScript 1.6準拠)</i></li>
                <li><a href="https://developer.mozilla.org/ja/Core_JavaScript_1.5_Reference/Global_Objects/Array/some">MDC::Array.prototype.some</a><i> - (JavaScript 1.6準拠)</i></li>
                <li><a href="https://developer.mozilla.org/ja/Core_JavaScript_1.5_Reference/Global_Objects/Array/map">MDC::Array.prototype.map</a><i> - (JavaScript 1.6準拠)</i></li>
                <li><a href="https://developer.mozilla.org/ja/Core_JavaScript_1.5_Reference/Objects/Array/reduce">MDC::Array.prototype.reduce</a><i> - (JavaScript 1.8準拠)</i></li>
                <li><a href="https://developer.mozilla.org/ja/Core_JavaScript_1.5_Reference/Objects/Array/reduceRight">MDC::Array.prototype.reduceRight</a><i> - (JavaScript 1.8準拠)</i></li>
              </ul>
            </dd>
          <dt>String.prototype</dt>
            <dd>
              <p>多用される機能を取り込みます。</p>
              <ul>
                <li><a href="https://developer.mozilla.org/Ja/Core_JavaScript_1.5_Reference/Global_Objects/String/Trim">MDC::String.prototype.trim</a><i> - (Firefox 3.1 由来の拡張)</i></li>
                <li><a href="https://developer.mozilla.org/Ja/Core_JavaScript_1.5_Reference/Global_Objects/String/TrimLeft">MDC::String.prototype.trimLeft</a><i> - (Firefox 3.1 由来の拡張)</i></li>
                <li><a href="https://developer.mozilla.org/Ja/Core_JavaScript_1.5_Reference/Global_Objects/String/TrimRight">MDC::String.prototype.trimRight</a><i> - (Firefox 3.1 由来の拡張)</i></li>
              </ul>
            </dd>
          <dt>Math.prototype</dt>
            <dd>
              <p>多用される機能を取り込みます。</p>
              <ul>
                <li>Math.toDegrees<i> - (Java.Math 由来の拡張)</i></li>
                <li>Math.toRadians<i> - (Java.Math 由来の拡張)</i></li>
              </ul>
            </dd>

          <dt>HTMLElement.prototype</dt>
            <dd>
              <p>多用される機能を取り込みます。</p>
              <ul>
                <li>HTMLElement.prototype.outerHTML <i>- Firefox2+ で outerHTML を使用可能にする</i> - (IE 由来の拡張)</li>
                <li>HTMLElement.prototype.innerText <i>- Firefox2+ で innerText を使用可能にする</i> - (IE 由来の拡張)</li>
              </ul>
            </dd>
        </dl>
    </dd>

  <dt><a name="Selector">Selector</a> - セレクタ</dt>
    <dd>
      <p>ある要素の色やテキストを変更しようとした場合に、まずその要素を特定する必要があります。
        <br />セレクタとは、ドキュメントツリーに存在する多数の要素から、ある特徴を元に絞り込みを行う一連の関数群のことです。
        <br />uupaa.js は、多様なセレクタを提供しています。
      </p>
      <ul>
        <li>id属性が一致する要素を検索する uu.id()</li>
        <li>タグ名が一致する要素を検索する uu.tag()</li>
        <li>class属性が一致する要素を検索する uu.className() </li>
        <li>CSSセレクタで要素を検索する uu.css()</li>
        <li>XPathで要素や属性,テキストを検索する uu.xpath()</li>
      </ul>
    </dd>

  <dt><a name="SyntaxSugar">SyntaxSugar</a> - シンタックスシュガー</dt>
    <dd><p>シンタックスシュガーとは、苦く飲みづらい薬を糖衣(砂糖でまぶ)した状態のことです。
          <br />プログラミングの世界では、構文を簡単に扱えるように形を多少変化させたものを意味します。
        </p>
        <p>var hash = { a: 0 }; とあった場合に、「hash の a にアクセスする」には、2種類の構文が使えます。</p>
        <ul>
          <li>スクエアシンタックス: hash["a"] </li>
          <li>ドットシンタックス: hash.a </li>
        </ul>
        <p>JavaScript の本質的な構文は スクエアシンタックス で、ドットシンタックス はその シンタックスシュガーです。
          <br />ドットシンタックスは記号や数値で始まるプロパティにアクセスできないという制限もあります。</p>
        <p>hash["(; _ ;)"] は構文的に正しく、hash.(; _ ;) はエラーになります。</p>
    </dd>

  <dt><a name="Element">Element</a> - 要素</dt>
    <dd>配列の個々の値を、配列の要素(Element)と呼びます。
        <br />また、ドキュメントツリーに参加している個々の要素のことも Element と呼びます。
        <br />ドキュメントツリー上の要素にアクセスするには <a href="#Selector">Selector</a> を使います。
    </dd>

  <dt><a name="Attribute">Attribute</a> - 属性</dt>
    <dd><p>&lt;div id="sample" class="dummy"&gt;&lt;/div&gt; といった HTML の断片があった場合に、
        <br />id 属性の値は "sample" で、class 属性の値は "dummy" です。</p>
        <p>div 要素の style 属性の値を全て列挙するには次のようにします。</p>
<pre class="eg">
uu.css("div[style]").forEach(function(v) {
  alert(v.style);
});
</pre>
    </dd>

  <dt><a name="NodeType">NodeType</a> - ノードタイプ</dt>
    <dd><p>DOMノードにはいくつか種類があり、これを NodeType と呼びます。</p>
      <table>
      <tr><th>NodeType</th><th>Value</th><th>説明</th></tr>
      <tr><td>ELEMENT_NODE</td><td>1</td><td>HTML を構成する要素(タグ)です。</td></tr>
      <tr><td>ATTRIBUTE_NODE</td><td>2</td><td>DOM Attribute ノードです。</td></tr>
      <tr><td>TEXT_NODE</td><td>3</td><td>テキストノードです。</td></tr>
      <tr><td>CDATA_SECTION_NODE</td><td>4</td><td>CDATA セクションノードです。</td></tr>
      <tr><td>ENTITY_REFERENCE_NODE</td><td>5</td><td></td></tr>
      <tr><td>ENTITY_NODE</td><td>6</td><td></td></tr>
      <tr><td>PROCESSING_INSTRUCTION_NODE</td><td>7</td><td></td></tr>
      <tr><td>COMMENT_NODE</td><td>8</td><td>コメントノードです。</td></tr>
      <tr><td>DOCUMENT_NODE</td><td>9</td><td>document ノード(ルートノード)です。</td></tr>
      <tr><td>DOCUMENT_TYPE_NODE</td><td>10</td><td></td></tr>
      <tr><td>DOCUMENT_FRAGMENT_NODE</td><td>11</td><td></td></tr>
      <tr><td>NOTATION_NODE</td><td>12</td><td></td></tr>
      </table>
    </dd>

  <dt><a name="Feature">Feature</a> - フューチャー</dt>
    <dd><p>Feature は機能を拡張する仕組みです。他のシステムでは同様の仕組みをプラグインやアドオンと呼んでいたりもします。
           <br />uupaa.jsでは、部品のオンデマンドロード(必要になったタイミングでロードすること)が可能です。</p>
        <p>部品の読み込みには、uu.feature() を使用します。</p>
    </dd>

  <dt><a name="Class">Class</a> - The "OOP Class", The "CSS Class" - OOPクラス と CSSクラス</dt>
    <dd>
      <p>uupaa.js における"クラス"という言葉には、
         オブジェクト指向用語(OOP)としての"クラス"と、CSS の"クラス"の二つの意味があります。</p>
      <ul>
        <li>uu.className() は CSS セレクタです。</li>
        <li>uu.className.add(), uu.className.has(), uu.className.remove() は className のマニピュレーターです。</li>
        <li>uuClass(), uuClass.Generic(), uuClass.Singleton() は OOP クラスの雛形を生成する関数です。</li>
      </ul>
    </dd>

  <dt><a name="WindowReady">WindowReady</a></dt>
    <dd>WindowReady は Web ページの表示に必要な全情報が揃った状態のことです。<br />
        WindowReady を補足し処理を行うには uu.ready() に関数を登録します。<br />
        旧来の方法(window.onload や &lt;body onload&gt;に関数を登録する方法)は一つの関数しか登録できませんが、
        uu.ready() には関数を複数登録可能です(コールバックする順番はランダムです)。
    </dd>

  <dt><a name="WindowUnready">WindowUnready</a></dt>
    <dd>WindowUnready は現在のページから他のWeb ページに遷移する直前の状態のことです。<br />
        WindowUnready を補足し処理を行うには uu.unready() に関数を登録します。<br />
        uu.unready() には関数を複数登録可能です(コールバックする順番はランダムです)。
    </dd>

  <dt><a name="DomReady">DomReady</a></dt>
    <dd>DomReady は文書構造(DOM)の解析が終了した状態のことです。<br />
        DomReady を補足し処理を行うには uu.ready() に関数を登録します。<br />
        DomReady は WindowReady よりも先に成立します。DomReady で画面の構築を開始すると、ビジターのイライラを減らせます。
    </dd>

  <dt><a name="FeatureReady">FeatureReady</a></dt>
    <dd>FeatureReadyは、uu.feature() でロードが完了した状態のことです。<br />
        FeatureReady を補足し処理を行うには uu.ready() に関数を登録します。<br />
        FeatureReady 状態は、uu.feature() で読み込みを開始すると解除されます。
    </dd>

  <dt><a name="CanvasReady">CanvasReady</a></dt>
    <dd>CanvasReady は、HTML5::Canvas が使用可能な状態のことです。<br />
        CanvasReady を補足し処理を行うには uu.ready() に関数を登録します。
    </dd>

  <dt><a name="JointedString">Jointed String</a> - 結合文字列</dt>
    <dd>セパレータで結合されている状態の文字列を結合文字列と呼びます。カンマ( "," )で結合している文字列を<b>カンマ結合文字列</b>,
        スペース( " " )で結合している文字列を<b>スペース結合文字列</b>と呼びます。</dd>

  <dt><a name="cssProp">cssProp, css-prop</a></dt>
    <dd>
      <p><a href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-extended">CSS2Properties</a> で
        定義されている CSS のプロパティ名(スタイル名)の形式を <b>cssProp</b> と呼びます。
        <br />例: fontWeight
      </p>
      <p>
        CSS で使用可能なプロパティ名(スタイル名)の形式を <b>css-prop</b> と呼びます。
        <br />例: font-weight<br />
      </p>
    </dd>

  <dt><a name="ComputedStyle">Computed Style</a> - 計算済みのスタイル</dt>
    <dd><p>document.getComputedStyle() が返す値を<b>計算済みのスタイル</b>と呼びます。<br />
        計算済みのスタイルは、JavaScript で設定されている elm.style の値の他に、
        HTML タグに直接書かれたインラインスタイル(＜tag style="xx: ..."＞)や、
        style 要素で設定されているスタイルも加味したもので、画面描画に使用される実際の値にかなり近いものです。</p>
        <p>
        計算済みのスタイルの単位は(基本的には) px ですが、IEはそれ以外の値( "auto" )を返す場合もあります。<br />
        相対単位(pt,em 等)で値を指定している場合でも、getComputedStyle() が返す値の単位は px になります。<br />
        color は、"rgb(red,gree,blue)" や "#FFFFFF" に変換されます(ブラウザ毎に異なります)。<br />
        { fontWeight: "normal" } を、{ fontWeight: "400" } に変換するブラウザもあります。<br />
        see: <a href="http://d.hatena.ne.jp/uupaa/20080928/1222543331">ブラウザ毎の getComputedStyle の戻り値</a>
        </p>
    </dd>

  <dt><a name="ParentHasLayout">ParentHasLayout</a> - Parent has Layout - レイアウト上の親要素</dt>
    <dd>CSS の position が "relative" または "absolute" に設定されている最寄の親要素を ParentHasLayout と呼びます。<br />
      オフセット座標を返す関数の多くは、最寄の ParentHasLayout からのオフセット値を返します。<br />
      類似語に、IE の CSS バグの話題で頻出する <a href="http://msdn2.microsoft.com/en-us/library/ms533776.aspx">MSDN::hasLayout</a> があります。<br />
      IE6,7では、zoom = 1; とするだけで、インライン要素などが hasLayout=true な要素になりえますが、そのような要素は、ParentHasLayout とは呼びません。
      <br />IE8 の IE8モードでは hasLayout プロパティが削除されました。
      </dd>

  <dt><a name="TypeThis">Type "this"</a> - this型</dt>
    <dd>this 型は Object 型の別名(alias)です。<br />
      this を渡すことが可能な引数を、this 型と呼びます。<br />
      this 型の引数に undefined を渡すと window オブジェクト が指定された場合と同様に動作します。</dd>

  <dt><a name="TypeMix">Type "Mix"</a> - Mix型</dt>
    <dd>Mix 型はあらゆる型(object, Hash, number, string, boolean, ...)を意味する説明上の(擬似的な)型です。<br />
      あらゆる型を受け付ける引数があれば、その引数を <b>Mix</b> と呼びます。</dd>

  <dt><a name="TypeHash">Type "Hash"</a> - Hash型</dt>
    <dd>
      <p>Hash 型は Object 型の別名(alias)です。
        <br />連想配列的な Object 型の変数を <b>Hash</b> と呼びます。
      </p>
<pre class="eg">
var hash = { a: 1, b: 2, c: 3 }; <u>// Hashを生成</u>
</pre>
      <p>文字列 Index でアクセスする要素が混在する Array も <b>Hash</b> と呼びます。
      </p>
<pre class="eg">
var ary = [ 1, 2, 3 ]; <u>// この時点では Array と呼ぶが</u>
ary["StringIndex"] = "a"; <u>// これ以後は Hash と呼ぶ</u>
</pre>
      </dd>

  <dt><a name="FakeArray">FakeArray</a> - 擬似配列</dt>
    <dd>
        <p>便宜上 Array と同じように操作できるが、実体は Array や <a href="#TypeHash">Hash</a> ではなく、length プロパティを持つものを FakeArray(擬似配列) と呼びます。
          <br />代表的なものに、arguments, NodeList, document.images があります。</p>
    </dd>

  <dt><a name="StringArray">StringArray</a></dt>
    <dd>文字列を要素とする Array( ["a", "b", ... ] ) を StringArray と呼びます。<br />
        文字列以外の要素(数値, function, null, undefined, element など)を含んでいる場合は、StringArray とは呼ばず、<a href="#TypeHash">Hash</a> と呼びます。
        要素数ゼロの StringArray もありえます。
    </dd>

  <dt><a name="FunctionArray">FunctionArray</a></dt>
    <dd>Function を要素とする Array( [ function, ... ] )を FunctionArray と呼びます。<br />
        Function 以外の要素(数値, 文字列, null, undefined, element など)を含んでいる場合は、FunctionArray と呼ばず、<a href="#TypeHash">Hash</a>と呼びます。
        要素数ゼロの FunctionArray もありえます。
    </dd>

  <dt><a name="ElementArray">ElementArray</a></dt>
    <dd><a href="#Element">Element</a>を要素とする Array( [ Element, ... ] )を ElementArray と呼びます。<br />
        Element 以外の要素(数値, 文字列, function, null, undefined, element など)を含んでいる場合は、ElementArray と呼ばず、<a href="#TypeHash">Hash</a>と呼びます。
        要素数ゼロの ElementArray もありえます。
    </dd>

  <dt><a name="RectHash">RectHash</a></dt>
    <dd>
        <p>RectHash は { x, y, w, h } を要素に持つ <a href="#TypeHash">Hash</a> です。
          <br />x が水平方向の座標, y が垂直方向の座標, w が水平方向の幅, h が垂直方向の高さ です。
          <br />矩形の座標/サイズを表現する入れ物として使います。
          <br />x, y, w, h 以外の要素を持つRectHashや、{ x, y } しか持たない Hash を RectHash と呼ぶ場合があります。
        </p>
    </dd>

  <dt><a name="RGBAHash">RGBAHash</a></dt>
    <dd>RGBAHash は { r, g, b, a } を要素に持つ <a href="#TypeHash">Hash</a> です。
        <br />r, g, b には 0～255 の数値を指定します。a には 0.0～1.0 の数値を指定します。
<pre class="eg">
var rbga = { r: 255, g: 255, b: 255, a: 1.0 }; <u>// "white"</u>
</pre>
    </dd>

  <dt><a name="HSVAHash">HSVAHash</a></dt>
    <dd>HSVAHash は { h, s, v, a  } を要素に持つ <a href="#TypeHash">Hash</a> です。
        <br />h には 0～360、s と v には 0～100 の数値を指定します。a には 0.0～1.0 の数値を指定します。
<pre class="eg">
var hsva = { h: 360, s: 100, v: 100, a: 1.0 }; <u>// "white"</u>
</pre>
    </dd>

  <dt><a name="Unicast">Unicast</a> - ユニキャスト</dt>
    <dd>uu.msg.send() や uu.msg.post() で、誰か1人にメッセージを転送することをユニキャストと呼びます。
        <br />送信者自身にユニキャストすることもできます。
    </dd>

  <dt><a name="Multicast">Multicast</a> - マルチキャスト</dt>
    <dd>uu.msg.send() や uu.msg.post() で、何人かに同じメッセージを転送することをユニキャストと呼びます。
    </dd>

  <dt><a name="Broadcast">Broadcast</a> - ブロードキャスト</dt>
    <dd>uu.msg.send() や uu.msg.post() で、全員に同じメッセージを転送することをブロードキャストと呼びます。
        <br />ブロードキャストでは、送信者自身にもメッセージが転送されます。
    </dd>

  <dt><a name="URLSafe64">URLSafe64</a></dt>
    <dd>RFC3548(The "URL and Filename safe" Base 64 Alphabet)で提唱されている Base64 の亜種です。<br />
        JavaScript の文字列(UTF-16)を UTF-8 に変換し、さらに通常の Base64 でエンコードを行った後に、
        URL に含むことができない一部の記号("+", "/", "=")を、安全な記号("-", "_")に差し替えし、
        末尾の"="を除去します。<br />
        デコードは、省略された末尾の"="を文字列の長さを元に補完し、差し替えた記号を元に戻した後で
        Base64 としてデコードします。
    </dd>

  <dt><a name="Singleton">Singleton</a> - シングルトン</dt>
    <dd><p>Singletonは、「一つしか存在しないもの」という意味です。<br />
      シングルトンクラスは、何度 new しても常に一つの実体(の参照)を返すため、
      スマートなグローバル変数 を生成できます。</p>
<pre class="eg">
var obj1 = new SingletonClass(); <u>// インスタンスを生成</u>
var obj2 = new SingletonClass(); <u>// obj1の参照を取得</u>
alert(obj1 === obj2); <u>// true  (obj1とobj2は同じもの)</u>
</pre>
      </dd>

  <dt><a name="StackNumber">StackNumber</a> - スタック番号</dt>
    <dd>スタック番号 は 0 以上の整数です。
        スタックが3個積まれている状態で、トップスタックのスタック番号は 2, ボトムスタックのスタック番号は 0 になります。
<pre class="eg" style="line-height: 1">
  │  │
  │■│ ← top stack(n=2)    最後に積まれたスタック
  │■│ ← n=1               二番目に積まれたスタック
  │■│ ← bottom stack(n=0) 最初に積まれたスタック
─┴─┴─ 
</pre>
    </dd>
</dl>
</body>
</html>
