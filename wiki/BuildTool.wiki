#summary minify/upa はプリプロセスとMinifyを施し最適化された.jsファイルを生成します

<wiki:toc max_depth="3" />

= upa =

usage:
  `uap [`*-g*` | -m | -y] [-mb] [-v] [-pp file] [-src dir] [-core file] [-nocore] [-off ident[/ident[/..]]] [*.js ...]`

|| *-g*   || use Google Closure Compiler || (default) ||
|| -m   || use Microsoft Ajax Minifier || ||
|| -y   || use YUI Compressor || ||
|| -mb  || Mobile WebKit Mode || `{{{`!mb ～ `}}}`!mb を削除します <br /> 生成されるコードは MobileWebKit(iPhone,iPad, iPod)専用になります。<br /> -core に指定されたファイルを別個にビルドします(最大で2回ビルドします) ||
|| -v   || verbose mode || ビルド対象一覧を表示します。ビルド結果を表示し一時停止します ||
|| -pp  || preprocessor file || プロプロセスで使用するPHPコードを指定します。デフォルトは "js.php" です ||
|| -srcdir || source directory || ソースコードを読み込む基準ディレクトリを指定します。デフォルトは "../src/" です ||
|| -core || library core || ライブラリの核となるファイルを指定します。デフォルトは "uupaa.js" です。<br /> ビルドで生成するファイル名も -core で指定したファイル名になります ||
|| -nocore || no library core || ライブラリの核となるファイルをマージせずにビルドします ||
|| -off || castoff || コメントアウトする機能名をスラッシュで連結し指定します。例: -off form/snippet <br /> 指定可能な文字列は "form" "snippet" "image" です ||
|| *.js || JavaScript source code file path || ソースコードファイルパスを指定します。相対パスで指定した場合は -srcdir 以下からファイルを読み取ります ||

=== JavaScriptソースコードをビルドする ===
 src.js を相対パスで指定しているため {$sourceDir}/src.js が読み取られる

 *upa src.js

=== 複数のソースコードを結合し一つのファイルにビルドする ===

 *upa a.js b.js c.js

=== iPhone/iPad用にビルドする ===
 生成されるファイルは uupaa.mb.js と uupaa.mb2.js

 *upa src.js -mb

=== iPhone/iPad用に最小構成でビルドする ===
 生成されるファイルは uupaa.mb.js と uupaa.mb2.js
 この構成では uu.value(), uu.snippet(), uu.image() が利用不能に

 *upa src.js -mb -off form/snippet/image

=== Microsoft Ajax Minifier でビルドする(Windows環境のみ) ===

 *upa src.js -m

=== YUI Compressor でビルドする ===

 *upa src.js -y

=== -core でライブラリコアを指定してビルドする ===
 生成されるファイルは anotherLibrary.js

 *upa src.js -core anotherLibrary.js

=== -pp でプリプロセス用のPHPコードを指定してビルドする ===

 *upa src.js -pp c.pp

=== -nocore でコアをマージせずにビルドする ===

 *upa -nocore src.js src2.js