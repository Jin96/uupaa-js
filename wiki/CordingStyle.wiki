#summary Cording Style

<wiki:toc max_depth="2" />

uupaa.js では、[http://webkit.org/coding/coding-style.html WebKit]のコーディングスタイルをベースにしています。

= 独自ルール =
以下は uupaa.js の独自ルールです。

== 語彙(ボキャブラリ) ==
以下の用語があります。

  * Mix はあらゆる型の変数を受け取り可能な引数を示す便宜上の型です。
{{{
    function uuhash(key,     // @param Hash/String: key
                    value) { // @param Mix(= void): value
    }
}}}
  * void は undefined の別名です。
  * Hash は Object の別名です。データの入れ物として意識する場合に Hash と呼びます。
  * Element は配列の要素を意味します。DOM Element は Node と呼び区別します。
  * NodeList は document.getElementsByTagName() などが返す 動的な(liveな)ノードリストです。
  * NodeArray は uu.tag(), uu.klass(), uu.query() などが返す 静的な(staticな)ノードの配列です。
  * StringArray は文字列を要素に持つ配列です。 [ "string", ... ]
  * IgnoreCaseString は大小文字を区別しない文字列を意味する便宜上の型です。
}}}

== if や for のブレス( {} )は省略禁止 ==
ブレスの省略は禁止します。
文法レベルでコードを短縮するのは Minifier の仕事です。
{{{
    // good
    if (expression) {
        ...
    }

    // bad
    if (expression) ...
}}}
{{{
    // good
    for (;;) {
        ...
    }

    // bad
    for (;;) ...
}}}

== function と { を同じ行に書く ==
function のブレス( { ) は、理由が無い限り function と同じ行に記述します。
また、function() { ... } とワンライナーで記述すると、ブレークポイントが張れずデバッグ効率低下の原因になるため避けてください。
{{{
    // good
    function() {
        ...
    }

    // wrong
    function()
    {
        ...
    }

    // bad
    function() { ... }
}}}

== 厳密比較演算子を使う ==
理由が無い限り、== ではなく === を使ってください。== は === に比べて実行速度が遅くなり、大抵のケースでデメリットがメリットを上回ります。

{{{
    // good
    if (a === b) {
        ...
    }

    // wrong
    if (a == b) {
        ...
    }
}}}


以下のようなケースでは == の利用も合法です。== を利用する場合はその理由をコメントで記述してください。コメントが無い == の利用は禁止します。
{{{
    // good, null または undefined かを調べる
    if (a == null) { // null or undefined
        ...
    }
    
    // bad
    if (a == null) {
        ...
    }
}}}

なお、ショートコードを目的とした == の利用も合法です。

== var はスコープ内に一つだけ ==
var はスコープ内に一つだけ設置できます。

場当たり的な変数宣言は低錬度なソースコードの特徴の一つです。工夫してください。
{{{
    // good
    function() {
        var nodeList, node, i = -1;
        
        nodeList = document.getElementByTagName("*");
        while ( (node = nodeList[++i]) ) {
            ...
        } 
    }

    // bad
    function() {
        var nodeList;

        nodeList = document.getElementByTagName("*");

        var i = 0;
        var length = nodeList.length;
       
        for (; i < length; i++) {
            var node = nodeList[i];
            
            ...
        }  
    }
}}}

== var の後ろには空行を置く ==
var の後ろには一つ以上の空行をおきます。
{{{
    // good
    var a = 1, b = 2, c;
 
    c = a * b;

    // bad
    var a = 1, b = 2, c;
    c = a * b;
}}}

== 状態をnode.classNameに保存しない ==
内部的な状態を node.className に保存することを禁止します。変数を使ってください。
{{{
     // good
     var hit = false;

     function eventHandler(evt) {
         if (evt.target === node) {
             hit = true;
         } else {
             hit = false;
         }
     }

     // bad
     function eventHandler(evt) {
         if (evt.target === node) {
             node.className += " hit ";
         } else {
             node.className = (" " + node.className + " ").replace(/ hit /, "");
         }
     }
}}}

== Scrict Mode セーフにする ==
Strict Mode セーフなコードを記述してください。
行末のセミコロンの省略や arguments.callee の利用は、理由が無い限りそうすべきではありません。
{{{
    // bad
    var a = 3 * 200
}}}

== uu や data-uu で始まる識別子は予約語 ==
uu や data-uu で始まる識別子は uupaa.js の予約語です。