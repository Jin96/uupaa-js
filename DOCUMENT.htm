<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title>uupaa.js - Document</title>
<style type="text/css">@import url(./README.css);</style>
</head>
<body>
<div>
<p>
   | <a href="http://code.google.com/p/uupaa-js/">Project Home(Google Code)</a>
   | <a href="./README.htm#demo">DEMO</a>
   | <a href="./CHANGELOG.htm">ChangeLog</a>
   | <a href="./LICENSE.htm">License</a> |<br />
   | <a href="./INDEX.htm">Index</a>
   | <a href="./DOCUMENT.htm">Document</a>
   | <a href="./SELECTOR.htm">Selector</a>
   | <a href="./MODULE.htm">Module</a>
   | <a href="./GLOSSARY.htm">Glossary</a>
   |
</p>
<a href="./README.htm">README</a> &gt; <a href="./INDEX.htm">INDEX</a> &gt; DOCUMENT<br />
<hr />
<h2><a name="Mixin">Mixin</a> - Object/Hash/Arrayの混合</h2>
<p>オブジェクトに別のオブジェクトを混ぜ込みます。</p>
<p>uu.mix は様々な局面で役立ちます。</p>
<ol>
  <li>インスタンスにオブジェクト(データやメソッド)を混ぜ込み、インスタンスの機能を拡張できます(Mixin)。</li>
  <li>Hashに別のHashを混ぜ込み、データの追加と更新ができます。</li>
  <li>デフォルト引数の解決や補完ができます(uu.mix.param)。</li>
</ol>
<hr />
<dl>
<!-- -->
  <dt><a name="uu.mix">uu.mix</a> - Object mixin - オブジェクトのミックスイン</dt>
  <dd>
    <p>uu.mix(<i>base</i>, <i>flavor</i>, <i>aroma</i> = undefined) は、
       <i>base</i>に<i>flavor</i>と<i>aroma</i>を混ぜ込み、<i>base</i>を返します。</p>
    <p>baseとflavor, baseとaromaに同じindexがある場合は、baseの値をflavorやaromaの値で<b>上書きします</b>。</p>
    <pre>
 @param Hash/Array base    - ベース要素の指定です。
 @param Hash/Array flavor  - baseに混ぜ込む要素の指定です。
 @param Hash/Array [aroma] - baseに混ぜ込む要素の指定です。デフォルトはundefinedです。
 @return Hash/Array - ミックス後のbaseを返します。
    </pre>
    <p>uu.mix はオブジェクトの継承や、Hashの結合で活躍します。</p>
    <a href="demo/document/uu.mix.htm" class="run">Run</a>
    <pre class="eg">
var base = <b>uu.mix</b>({ a: 0 }, { a: "a", b: 1 }); // { a: 0 } が { a: "a" } で上書きされる
uu.log(base); // { a: "a", b: 1 };
    </pre>
  </dd>
<!-- -->
  <dt><a name="uu.mix.param">uu.mix.param</a> - Object mixin for parameters - パラメタのミックスイン</dt>
  <dd>
    <p>uu.mix.param(<i>base</i>, <i>flavor</i>, <i>aroma</i> = undefined) は、
       <i>base</i>に<i>flavor</i>と<i>aroma</i>を混ぜ込み、<i>base</i>を返します。</p>
    <p>baseとflavor, baseとaromaに同じindexがある場合は、baseの値をflavorやaromaの値で<b>上書きしません</b>。</p>
    <pre>
 @param Hash/Array base    - ベース要素の指定です。
 @param Hash/Array flavor  - baseに混ぜ込む要素の指定です。
 @param Hash/Array [aroma] - baseに混ぜ込む要素の指定です。デフォルトはundefinedです。
 @return Hash/Array - ミックス後のbaseを返します。
    </pre>
    <p>uu.mix.param は与えられた引数と、デフォルト引数を結合する処理で活躍します。</p>
    <a href="demo/document/uu.mix.param.htm" class="run">Run</a>
    <pre class="eg">
var base = <b>uu.mix.param</b>({ a: 0 }, { a: "a", b: 1 }); // { a: 0 } が { a: "a" } で上書きされない
uu.log(base); // { a: 0, b: 1 }
    </pre>
  </dd>
</dl>


<hr />
<h2><a name="UA">Detect User-Agent and Functions</a> - ブラウザと機能の判別</h2>
<p>ブラウザの判別や、微調整に必要な情報を提供します。</p>
<hr />
<dl>
  <dt><a name="uu.ua">uu.ua</a> - Detect User-Agent and Functions - ブラウザと機能の判別</dt>
  <dd><p>uu.ua(<i>info</i> = "")は、ブラウザの判別と、機能の有効/無効情報を返します。</p>
      <pre>
 @param String info - ブラウザ名, ブラウザの描画エンジン名, 機能名の指定です。
                      大小文字を区別しません。
 @return Boolean/String - infoで指定したブラウザで動作しているか、機能が使用可能な場合にtrueを返します。
                          infoを省略した場合は、ユーザエージェント文字列を返します。
                          versionを指定するとバージョン番号を返します。
      </pre>
      <table>
      <caption>infoに指定可能な文字列と戻り値の一覧</caption>
      <tr><th><i>info</i></th><th>Return<br />戻り値</th></tr>
      <tr><td>uu.ua("")</td><td>ユーザエージェント文字列を返す</td></tr>
      <tr><td>uu.ua("opear")</td><td>Operaならtrue</td></tr>
      <tr><td>uu.ua("ie")</td><td>Internet Explorerならtrue</td></tr>
      <tr><td>uu.ua("ie6")</td><td>Internet Explorer 6ならtrue</td></tr>
      <tr><td>uu.ua("ie8std")</td><td>Internet Explorer 8 Standard Mode ならtrue</td></tr>
      <tr><td>uu.ua("firefox3")</td><td>Firefox 3ならtrue</td></tr>
      <tr><td>uu.ua("kestrel")</td><td>Opera 9.5ならtrue</td></tr>
      <tr><td>uu.ua("webkit")</td><td>Webkit(Safari等)ならtrue</td></tr>
      <tr><td>uu.ua("ipod")</td><td>iPod/iPhone(Safari)ならtrue</td></tr>
      <tr><td>uu.ua("wii")</td><td>Wii Internet channel(Opera)ならtrue</td></tr>
      <tr><td>uu.ua("air")</td><td>Adobe AIRならtrue</td></tr>
      <tr><td>uu.ua("std")</td><td>描画モードがスタンダードモードならtrue, IE6ではDTDを指定するとtrueになる</td></tr>
      <tr><td>uu.ua("domrange")</td><td>DOM Level2 Range Moduleが使用可能ならtrue</td></tr>
      <tr><td>uu.ua("display:table")</td><td>Safari3, Firefox2, Opera9, IE8ならtrue, それ以外ならfalse</td></tr>
      <tr><td>uu.ua("version")</td><td>ブラウザ(描画エンジン)のバージョンやビルド番号</td></tr>
      </table>

      <table>
      <caption>List of uu.ua("version")</caption>
      <tr><th>Browser</th><th>uu.ua("version")</th></tr>
      <tr><td>Firefox 2.0.0.14</td><td>20080404</td></tr>
      <tr><td>Firefox 3.01</td><td>20080702</td></tr>
      <tr><td>Safari 3.1</td><td>525.13</td></tr>
      <tr><td>Opera 9.5</td><td>10048</td></tr>
      <tr><td>Opera 9.51</td><td>10081</td></tr>
      <tr><td>IE 8</td><td>8</td></tr>
      <tr><td>IE 7</td><td>7</td></tr>
      <tr><td>IE 6</td><td>6</td></tr>
      <tr><td>IE 5.5</td><td>5.5</td></tr>
      </table>
  </dd>
</dl>

<hr />
<h2><a name="Iteration">Iteration</a> - オブジェクト/Hash/Array/FakeArrayのイテレーション</h2>
<p>Array/Hash/FakeArrayの各要素を取り出し評価します。</p>
<hr />
<dl>
<!-- -->
  <dt><a name="uu.forEach">uu.forEach</a> - Executes a provided function once per hash element - 全要素を評価</dt>
  <dd>
    <p>uu.forEach(<i>mix</i>, <i>fn</i>, <i>me</i> = undefined) は、
        <i>mix</i>の各要素に対し、<i>fn</i>.call(<i>me, 要素の値, index, mix</i>) を実行します。</p>
    <p><a href="#Array.forEach">Array.forEach</a> は Array専用ですが、
        uu.forEachは、<a href="./GLOSSARY.htm#TypeHash">Hash</a>, Array, 
        <a href="./GLOSSARY.htm#FakeArray">FakeArray</a>に使用可能です。</p>
    <pre>
 @param Hash/Array/FakeArray mix - Hash, Array, FakeArrayを指定します。
 @param Function fn   - 各要素を評価する関数を指定します。
 @param this     [me] - fn実行時のthisを指定します。デフォルトはundefinedです。
    </pre>
    <a href="demo/document/uu.forEach.htm" class="run">Run</a>
    <pre class="eg">
<b>uu.forEach</b>({ a: "a", b: 1 }, function(v, i) {
  uu.log(i + ":" + v); // "a:a", "b:1"
});
<b>uu.forEach</b>(["a", 1], function(v, i) {
  uu.log(i + ":" + v); // "0:a", "1:1"
});
<b>uu.forEach</b>(uu.tag("*"), function(v, i) {
  uu.log(i + ":" + v); // "0:[object HTMLHtmlElement]", "1:[object HTMLHeadElement]", ...
});
    </pre>
  </dd>
<!-- -->
  <dt><a name="uu.filter">uu.filter</a> - Creates a new array with all elements that pass the test implemented by the provided function - 全要素を評価し、結果が真の要素を配列で返す</dt>
  <dd>
    <p>uu.filter(<i>mix</i>, <i>fn</i>, <i>me</i>) は、
       mixの各要素に対し、<i>fn</i>.call(<i>me, 要素の値, index, mix</i>) を実行し、
          結果が真の要素をArrayで返します。</p>
    <p><a href="#Array.filter">Array.filter</a> は Array専用ですが、
        uu.filterは、<a href="./GLOSSARY.htm#TypeHash">Hash</a>, Array, 
        <a href="./GLOSSARY.htm#FakeArray">FakeArray</a>に使用可能です。</p>
    <pre>
 @param Hash/Array/FakeArray mix - Hash, Array, FakeArrayを指定します。
 @param Function fn   - 各要素を評価する関数を指定します。
 @param this     [me] - thisオブジェクトを指定します。デフォルトはundefinedです。
 @return Array        - Array([ 要素, ... ])を返します。
    </pre>
    <a href="demo/document/uu.filter.htm" class="run">Run</a>
    <pre class="eg">
var rv = <b>uu.filter</b>(["a", 2, "3"], uu.isS);
uu.log(rv); // ["a", "3"]

rv = <b>uu.filter</b>({ a: "a", b: 2, c: "3" }, uu.isS);
uu.log(rv); // [ a: "a", c: "3" ]

rv = <b>uu.filter</b>(uu.tag("*"), function(v) {
  return (v.tagName === "HTML" || v.tagName === "BODY");
});
uu.log(rv.length); // 2
    </pre>
  </dd>
<!-- -->
  <dt><a name="Array.forEach">Array.forEach</a> - Executes a provided function once per array element - 全要素をfnで評価する</dt>
  <dd>
    <p>Array.forEach(<i>fn</i>, <i>me</i> = undefined) は、Arrayの各要素に対し、<i>fn.call(me, 要素の値, 数値index, this)</i> を実行します。</p>
    <p>Array.forEachは<a href="http://developer.mozilla.org/ja/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:forEach">JavaScript1.5</a>の機能です。</p>
    <pre>
 @param Function  fn   - 各要素を評価する関数を指定します。
 @param this      [me] - thisオブジェクトを指定します。デフォルトはundefinedです。
    </pre>
    <a href="demo/document/Array.forEach.htm" class="run">Run</a>
    <pre class="eg">
<b>["a", 1].forEach</b>(function(v, i) {
  uu.log(i + ":" + v); // "0:a", "1:1"
});
    </pre>
  </dd>
<!-- -->
  <dt><a name="Array.filter">Array.filter</a> - Creates a new array with all elements that pass the test implemented by the provided function - 全要素を評価し、結果が真の要素を配列で返す</dt>
  <dd>
    <p>Array.filter(<i>fn</i>, <i>me</i> = undefined) は、Arrayの各要素に対し、<i>fn.call(me, 要素の値, 数値index, this)</i> を実行し、結果が真の要素をArrayで返します。</p>
    <p>Array.filterは<a href="http://developer.mozilla.org/ja/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:filter">JavaScript1.5</a>の機能です。</p>
    <pre>
 @param Function  fn   - 各要素を評価する関数を指定します。
 @param this      [me] - thisオブジェクトを指定します。デフォルトはundefinedです。
 @return Array         - Array([ 要素, ... ])を返します。
    </pre>
    <a href="demo/document/Array.filter.htm" class="run">Run</a>
    <pre class="eg">
var rv = <b>["a", 2, "3"].filter</b>(function(v, i) {
  return uu.isS(v); // typeof v === "string" と同じ
});
uu.log(rv); // ["a", "3"]
    </pre>
  </dd>
<!-- -->
  <dt><a name="Array.every">Array.every</a> - Tests whether all elements in the array pass the test implemented by the provided function - 全要素を評価し、全て真ならtrue,偽があればループを中断しfalseを返す</dt>
  <dd>
    <p>Array.filter(<i>fn</i>, <i>me</i> = undefined) は、Arrayの各要素に対し、<i>fn.call(me, 要素の値, 数値index, this)</i> を実行し、結果が偽ならループを中断しfalseを返します。結果が全て真ならtrueを返します。</p>
    <p>Array.filterは<a href="http://developer.mozilla.org/ja/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:every">JavaScript1.5</a>の機能です。</p>
    <pre>
 @param Function  fn   - 各要素を評価する関数を指定します。
 @param this      [me] - thisオブジェクトを指定します。デフォルトはundefinedです。
 @return Boolean       - 全て真ならtrue, 偽があればfalseを返します。
    </pre>
    <a href="demo/document/Array.every.htm" class="run">Run</a>
    <pre class="eg">
var rv = <b>["a", 2, "3"].every</b>(function(v, i) {
  return uu.isS(v); // typeof v === "string" と同じ
});
uu.log(rv); // false (数値要素(2)が含まれているためfalse)
    </pre>
  </dd>
<!-- -->
  <dt><a name="Array.some">Array.some</a> - Tests whether some element in the array passes the test implemented by the provided function - 全要素を評価し、全て偽ならfalse,真があればループを中断しtrueを返す</dt>
  <dd>
    <p>Array.some(<i>fn</i>, <i>me</i> = undefined) は、Arrayの各要素に対し、<i>fn.call(me, 要素の値, 数値index, this)</i> を実行し、結果が真ならループを中断しtrueを返します。結果が全て偽ならfalseを返します。</p>
    <p>Array.someは<a href="http://developer.mozilla.org/ja/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:some">JavaScript1.5</a>の機能です。</p>
    <pre>
 @param Function  fn   - 各要素を評価する関数を指定します。
 @param this      [me] - thisオブジェクトを指定します。デフォルトはundefinedです。
 @return Boolean       - 全て偽ならfalse, 真があればtrueを返します。
    </pre>
    <a href="demo/document/Array.some.htm" class="run">Run</a>
    <pre class="eg">
var rv = <b>[1, 2, 3].some</b>(function(v, i) {
  return uu.isS(v); // typeof v === "string" と同じ
});
uu.log(rv); // false (全要素は数値なのでfalse)
    </pre>
  </dd>
<!-- -->
  <dt><a name="Array.map">Array.map</a> - Creates a new array with the results of calling a provided function on every element in this array - 全要素を評価し配列を返す</dt>
  <dd>
    <p>Array.map(<i>fn</i>, <i>me</i> = undefined) は、Arrayの各要素に対し、<i>fn.call(me, 要素の値, 数値index, this)</i> を実行し、結果をArrayで返します。</p>
    <p>Array.mapは<a href="http://developer.mozilla.org/ja/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:map">JavaScript1.5</a>の機能です。</p>
    <pre>
 @param Function  fn   - 各要素を評価する関数を指定します。
 @param this      [me] - thisオブジェクトを指定します。デフォルトはundefinedです。
 @return Array         - 結果をArrayで返します。
    </pre>
    <a href="demo/document/Array.map.htm" class="run">Run</a>
    <pre class="eg">
var rv = <b>[1, 2, 4].map</b>(function(v, i) {
  return i * v;
});
uu.log(rv); // [0, 2, 8]
    </pre>
  </dd>
</dl>









<hr />
<h2><a name="Node">Node</a></h2>
<p>ノードの取り扱いを簡単にします。</p>
<p>
<a href="#uu.node.insert">uu.node.insert</a> や <a href="#uu.node.insertText">uu.dom.insertText</a> では、基準ノード(context)と位置(pos)により挿入する位置が決まります。
</p>
<pre style="line-height: 1">
  /DOCUMENT_NODE (root)
  |
  +- /parentNode.parentNode....
  |  |
  :  +- /parentNode.parentNode
  :  |  |
     :  +- /parentNode - <b>context</b>の親
     :  |  |
        :  +- /FirstSibling   (親から見て長女) - pos = <b>UU.FIRST</b>
        :  +- /SecondSibling  (親から見て次女)
           +- /ThirdSibling   (親から見て三女) - pos = <b>UU.PREV</b>
           | 
           +- /FourthSibling  (親から見て四女) - <b>context</b> - 基準ノード
           |  |
           |  +- /FirstChild  (親から見て四女の長男) - pos = <b>UU.FIRST_CHILD</b>
           |  +- /SecondChild (親から見て四女の次男)
           |  +- /ThirdChild  (親から見て四女の三男) - pos = <b>UU.LAST_CHILD</b>
           | 
           +- /FifthSibling   (親から見て五女) - pos = <b>UU.NEXT</b>
           +- /SixthSibling   (親から見て六女)
           +- /SeventhSibling (親から見て七女) - pos = <b>UU.LAST</b>
</pre>
<hr />
<dl>
<!-- -->
  <dt><a name="uu.node.insert">uu.node.insert</a> - Insert ELEMENET_NODE or HTMLString - ELEMENT_NODEまたはHTML文字列をノード化し挿入</dt>
  <dd><p>uu.node.insert(<i>html</i>, <i>context</i> = document.body, <i>pos</i> = UU.LAST_CHILD) は、
      <i>context</i> 以下の <i>pos</i> で指定された位置に、<i>html</i> ノードの断片を挿入します。</p>
      <p><i>html</i> がHTML文字列なら、<a href="#uu.node.substance">uu.node.substance</a> で HTMLを実体化し、ノードを挿入します。</p>
      <pre>
 @param Element/String html - ノードを指定します。
                              ノードの代りにHTML文字列も指定できます。
                              HTML文字列には、複数ノードやテキスト,スタイル属性等が含まれた複雑なHTMLを指定可能です。
 @param Element [context]   - 挿入の基準位置(コンテキスト)を指定します。デフォルトはdocument.bodyです。
 @param Number  [pos]       - 挿入位置を指定します。デフォルトはUU.LAST_CHILDです。
      </pre>
<pre>
  &lt;div id="parentNode1"&gt;
    &lt;div id="girl1"&gt;girl1&lt;/div&gt;
    &lt;div id="girl2"&gt;girl2&lt;/div&gt;
    &lt;div id="girl3"&gt;girl3&lt;/div&gt;
    &lt;div id="girl4"&gt;girl4
      &lt;div id="girl4_boy1"&gt;girl4_boy1&lt;/div&gt;
      &lt;div id="girl4_boy2"&gt;girl4_boy2&lt;/div&gt;
      &lt;div id="girl4_boy3"&gt;girl4_boy3&lt;/div&gt;
    &lt;/div&gt;
    &lt;div id="girl5"&gt;girl5&lt;/div&gt;
    &lt;div id="girl6"&gt;girl6&lt;/div&gt;
    &lt;div id="girl7"&gt;girl7&lt;/div&gt;
  &lt;/div&gt;
</pre>
  <p>上のようなDOMツリーに対し、uu.node.insert("&lt;p&gt;hoge&lt;/p&gt;", uu.id("girl4"), UU.NEXT) を実行すると、下のようになります。</p>
  <a href="./demo/document/uu.node.insert.htm" class="run">Run</a>
<pre>
  &lt;div id="parentNode1"&gt;
    &lt;div id="girl1"&gt;girl1&lt;/div&gt;
    &lt;div id="girl2"&gt;girl2&lt;/div&gt;
    &lt;div id="girl3"&gt;girl3&lt;/div&gt;
    &lt;div id="girl4"&gt;girl4
      &lt;div id="girl4_boy1"&gt;girl4_boy1&lt;/div&gt;
      &lt;div id="girl4_boy2"&gt;girl4_boy2&lt;/div&gt;
      &lt;div id="girl4_boy3"&gt;girl4_boy3&lt;/div&gt;
    &lt;/div&gt;
    <b>&lt;p&gt;hoge&lt;/p&gt;</b>
    &lt;div id="girl5"&gt;girl5&lt;/div&gt;
    &lt;div id="girl6"&gt;girl6&lt;/div&gt;
    &lt;div id="girl7"&gt;girl7&lt;/div&gt;
  &lt;/div&gt;
</pre>
  </dd>

<!-- -->
  <dt><a name="uu.node.insertText">uu.node.insertText</a> - Insert TEXT_NODE or TextString - TEXT_NODE または テキスト文字列をノード化し挿入</dt>
  <dd><p>uu.node.insertText(<i>text</i>, <i>context</i> = document.body, <i>pos</i> = UU.LAST_CHILD) は、
      <i>context</i> 以下の <i>pos</i> で指定された位置に、テキストノードを挿入します。</p>
      <p><i>text</i> が文字列なら、テキスト文字列をテキストノードとして挿入します。</p>
      <pre>
 @param String  text      - テキストノードを指定します。
                            テキストノードの代りに、テキスト文字列も指定可能です。
 @param Element [context] - 挿入の基準位置(コンテキスト)を指定します。デフォルトはdocument.bodyです。
 @param Number  [pos]     - 挿入位置を指定します。デフォルトはUU.LAST_CHILDです。
      </pre>
  <a href="./demo/document/uu.node.insertText.htm" class="run">Run</a>
  </dd>

<!-- -->
  <dt><a name="uu.node.replace">uu.node.replace</a> - Replace oldNode with node - nodeとoldNodeを入れ替える</dt>
  <dd><p>uu.node.replace(<i>node</i>, <i>oldNode</i>, <i>context</i> = <i>node</i>.parentNode) は、
      <i>context</i> 以下の <i>oldNode</i> と <i>node</i> を入れ替え、DocumentFragment に格納された <i>oldNode</i> を返します。</p>
      <pre>
 @param Element node      - 新しいノードを指定します。
 @param Element oldNode   - 入れ替えられる古いノードを指定します。
 @param Element [context] - コンテキストを指定します。省略可能です。
                            省略すると、<i>node</i>.parentNode を基準に入れ替えを行います。
                            通常使用では context の指定を省略します。
 @return DocumentFragment - oldNode を格納した DocumentFragment を返します。
      </pre>
  </dd>

<!-- -->
  <dt><a name="uu.node.remove">uu.node.remove</a> - Remove node - nodeを取り除く</dt>
  <dd><p>uu.node.remove(<i>node</i>, <i>context</i> = <i>node</i>.parentNode) は、
      <i>context</i> 以下の <i>node</i> を取り除き、DocumentFragment に格納された <i>node</i> を返します。</p>
      <pre>
 @param Element node      - 新しいノードを指定します。
 @param Element [context] - コンテキストを指定します。省略可能です。
                            省略すると、<i>node</i>.parentNode を基準に除去を行います。
                            通常使用では context の指定を省略します。
 @return DocumentFragment - node を格納した DocumentFragment を返します。
      </pre>
  </dd>

<!-- -->
  <dt><a name="uu.node.diet">uu.node.diet</a> - Removes CRLF/WhiteSpace/Comment node - 空白と改行だけのテキストノードとコメントノードを再帰的に除去する</dt>
  <dd><p>uu.node.diet(<i>elm</i>, <i>depth</i> = 0) は、<i>elm</i>以下のDOMノードツリーに含まれている不要なノードを除去します。</p>
      <p>不要なノードとは、空白だけのテキストノード、タグとタグの間に挿入される改行用の暗黙のテキストノード, コメントノードです。</p>
      <p>IEはDOMツリー構築時に、改行やコメントノードを含まないツリーを構築しますが、この挙動は他のブラウザと異なります。
         <br />dietを使うと、ブラウザ間の挙動の違いを吸収することができます。</p>
      <p><i>depth</i>に1以上の値を指定すると、再帰的に子孫ノードを検索し、ノードの除去を行います。
         <br /><i>depth</i> = 0 なら、<i>context</i> 以下のノードについてのみ除去を行います。
         <br />全ての階層について除去を行う場合は、十分に大きな値(例: 999)を指定します。
         </p>
      <pre>
 @param Element elm     - ノードを指定します。
 @param Number  [depth] - 到達可能な深度を指定します。
                          0以上の値を指定すると子孫ノードを再帰的に検索/除去します。
                          0を指定すると表層のみを検索/除去します。デフォルトは0です。
      </pre>
      <a href="demo/document/uu.node.diet.htm" class="run">Run</a>
      <pre class="eg">
  &lt;div id="root" style="background-color: yellow"&gt;div node 1-1
    &lt;ol&gt;<b>\n</b>
      &lt;li&gt;li node 2-1&lt;/li&gt;<b>\n</b>
      &lt;li&gt;li node 2-2<b>&lt;!-- comment node 2-2-1 --&gt;</b>&lt;/li&gt;<b>\n</b>
      &lt;li&gt;li node 2-3&lt;/li&gt;<b>\n</b>
      &lt;li&gt;li node 2-4<b>&lt;!-- comment node 2-4-1 --&gt;</b>&lt;/li&gt;<b>\n</b>
    &lt;/ol&gt;<b>\n</b>
    <b>&lt;!-- comment node 3-1 --&gt;</b><b>\n</b>
    <b>&lt;!-- comment node 4-1 --&gt;</b><b>\n</b>
  &lt;/div&gt;

  function enumBlankNode(elm, deep /* = false */) {
    var rv = [], i, sz, re = /\S/; deep = deep || false;
    F(elm);
    return rv;
    function F(elm) {
      var i = 0, e;
      for (i = elm.childNodes.length; i-- &gt; 0;) {
        e = elm.childNodes[i];
        switch (e.nodeType) {
        case 3: if (re.test(e.nodeValue)) { break; } // blank text node?
        case 8: rv.push(e); break; // comment node
        case 1: deep &amp;&amp; F(e); // element node
        }
      }
    }
  }
  uu.ready(function() {
    uu.log("element node(in #root) length[%d].", uu.node(uu.id("root"), 1).length);
    uu.log("before blank node(in #root) length[%d].", enumBlankNode(uu.id("root"), 1).length);
  });
  function diet(node, deep) {
    <b>uu.node.diet</b>(node, deep);
    uu.log("diet done.");
    var blankNode = enumBlankNode(uu.id("root"), 1);
    uu.log("after blank node length[%d].", blankNode.length);
    uu.log.dir(2, blankNode);
  }
      </pre>
  </dd>



<!-- -->
  <dt><a name="uu.node.cutdown">uu.node.cutdown</a> - Cut all nodes less than context and return DocumentFragment - context以下の全ノードを切り取り、DocumentFragmentを返す</dt>
  <dd><p>uu.node.cutdown(<i>context</i> = document.body) は、
      <i>context</i>以下の全てのノードを切り取りDocumentFragmentに格納したものを返します。</p>
      <pre>
 @param Element [context] - 切り取りを開始するノードを指定します。デフォルトは document.body です。
      </pre>
  </dd>

<!-- -->
  <dt><a name="uu.node.substance">uu.node.substance</a> - Convert HTMLString into DocumentFragment - HTMLStringをDocumentFragmentに変換する</dt>
  <dd><p>uu.node.substance(<i>html</i>) は、<i>html</i> 文字列をDOMノード化し、DocumentFragment を返します。</p>
      <p>uu.node.substance は、<a href="#uu.node.insert">uu.node.insert</a> のオンザフライ版です。</p>
      <pre>
 @param String html - HTMLの断片を文字列で指定します。
                      複数のノードやテキスト,スタイル属性を持つ複雑なHTMLなども指定可能です。
      </pre>
  </dd>
</dl>

















<hr />
<h2><a name="OOPClass">OOP Class</a></h2>
<p>オブジェクト指向的な"クラス"をJavaScriptでも使えるようにします。</p>
<hr />
<dl>

<!-- -->
  <dt><a name="uu.klass.kiss">uu.klass.kiss</a> - Create class. "Keep It Simple, Stupid" - シンプルなクラスの雛形を生成</dt>
  <dd>
    <p>uu.klass.kiss(<i>args, ...</i>) は、シンプルなクラスの雛形を生成します。</p>
    <p>以下のように記述し、new myClass() を実行すると、myClass.prototype.construct() を自動的に呼び出します(constructがもしあれば)。
       初期化に必要な引数も渡せます。</p>
    <pre>
 @param <a href="./GLOSSARY.htm#TypeMix">Mix</a> [...] - constructに渡す引数をいくつでも指定できます。
 @return Function - シンプルなクラスの雛形を生成するクロージャを返します。
    </pre>
    <a href="demo/document/uu.klass.kiss.htm" class="run">Run</a>
    <pre class="eg">
var myClass = <b>uu.klass.kiss</b>();
myClass.prototype = {
  <b>construct</b>: function(var1, var2 /*, ... */) {
    // 初期化
    this.privateVar1 = var1;
    this.privateVar2 = var2;
  },
  myMethod: function() {
    return this.privateVar1 * this.privateVar2;
  }
};
var my = <b>new</b> myClass(10, 20); // 自動的に construct() を実行する。
uu.log(my.myMethod()); // "200"
    </pre>
  </dd>

<!-- -->
  <dt><a name="uu.klass.generic">uu.klass.generic</a> - Create generic class - 汎用クラスの雛形を生成</dt>
  <dd>
    <p>uu.klass.generic(<i>args, ...</i>) は、汎用的なクラスの雛形を生成します。</p>
    <p>以下のように記述し、new myClass() を実行すると、myClass.prototype.construct() を自動的に呼び出します。
       初期化に必要な引数も渡せます。</p>
    <p><a href="#uu.klass.kiss">uu.klass.kiss</a>には無い、3点の特別な機能を持っています。</p>
    <ol>
      <li>newで生成されたインスタンスには、<a href="#uu.uid">システム全体を通じてユニーク(唯一)な値を持つ</a> uidプロパティが自動で追加されます。</li>
      <li><b>msgbox</b>メソッドを持つクラスなら、<a href="./MODULE.htm#uu.module.messagePump.set">インスタンス生成時に自動的にメッセージポンプに登録を行います。</a></li>
      <li><b>handleEvent</b>メソッドを持つクラスなら、<a href="#uu.event.closure">イベントクロージャを自動的に登録します。</a></li>
    </ol>
    <p>これらの特徴により、面倒な手続きをせずとも、
       <a href="./MODULE.htm#uu.module.messagePump.send">メッセージポンプによるメッセージの送受信</a>や、
       <a href="#uu.event.closure">イベントのハンドリング</a>が可能になっています。</p>
    <pre>
 @param <a href="./GLOSSARY.htm#TypeMix">Mix</a> [...] - constructに渡す引数をいくつでも指定できます。
 @return Function - 汎用クラスの雛形を生成するクロージャを返します。
    </pre>
    <a href="demo/document/uu.klass.generic.htm" class="run">Run</a>
    <pre class="eg">
var files = <b>uu.klass.generic</b>();
files.prototype = {
  <b>construct</b>: function(agent) {
    this.agent = agent;
  },
  msgbox: function(msg, p1, p2) {
    switch (msg) {
    case "Hello":
      uu.log("Agent[%s], I accepted a message [%s], from [%s]", msg, p1);
      break;
    }
  }
};
var x1 = <b>new</b> files("Agent Mulder");
var x2 = <b>new</b> files("Agent Scully");
var x3 = <b>new</b> files("Smoking Man");

uu.msg.post(x2, "Hello Mulder", { from: "Scully" }); // モルダーからスカリーにご挨拶
uu.msg.post(0,  "Hello All", { from: "Mulder" }); // (自分以外の)みんなにご挨拶
uu.msg.post(x1, "...", { from: "Smoking Man" }); // モルダーにお返事

    </pre>
  </dd>
<!-- -->
  <dt><a name="uu.klass.singleton">uu.klass.singleton</a> - Create singleton class - シングルトンクラスの雛形を生成</dt>
  <dd>
    <p>uu.klass.singleton(<i>args, ...</i>) は、シングルトンクラスの雛形を生成します。</p>
    <p>シングルトンクラスは何度newしても、いつも同じ(一つ)のインスタンスが返されます。<br />
       一つ存在すれば十分なものや、newする度に新しく生成できてしまうとまずいものはシングルトンクラスにします。</p>
    <p>以下のように記述し、new myClass() を実行すると、myClass.prototype.construct を自動的に呼び出します。
       初期化に必要な引数も渡せます。</p>

    <p>uu.klass.singleton は、<a href="#uu.klass.generic">uu.klass.generic</a>の特徴を受け継ぎ、さらに以下の特別な機能を持っています。</p>
    <ol>
      <li>destruct メソッド を定義しておくと、ページ遷移の時に destruct メソッドを自動的に呼び出します。</li>
      <li>construct メソッド を定義しておくと、1度目の new で construct メソッドを呼び出します。</li>
      <li>stabled メソッド を定義しておくと、2度目以降の new で stabled メソッドを呼び出します。</li>
    </ol>
    <pre>
 @param <a href="./GLOSSARY.htm#TypeMix">Mix</a> [...] - constructに渡す引数をいくつでも指定できます。
 @return Function - singletonクラスの雛形を生成するクロージャを返します。
    </pre>
    <a href="demo/document/uu.klass.singleton.htm" class="run">Run</a>
    <pre class="eg">
function Run() {
  var myClass = <b>uu.klass.singleton</b>();
  myClass.prototype = {
    <b>construct</b>: function(url /* = "" */, msg1 /* = "" */, msg2 /* = "" */ /*, ... */) {
      // 初期化用メソッド
      uu.mix(this, { url: url || "", msg1: msg1 || "", msg2: msg2 || "" }); // 引数の補完と、this.xxx = xxx の実行
//      uu.ajax(this.url + "?" + this.msg1);
    },
    <b>stabled</b>: function(url /* = "" */, msg1 /* = "" */, msg2 /* = "" */ /*, ... */) {
      uu.log("call stabled");
    },
    <b>destruct</b>: function() {
      // 後処理用メソッド
//      uu.ajax(this.url + "?" + this.msg2);
    },
    myMethod: function() {
      return [this.msg1, this.msg2];
    }
  };
  var my = <b>new</b> myClass(uu.id("url").value, "hello", "bye-bye"); // 自動的に construct を実行する。
  uu.log(my.myMethod()[0]); // "hello"

  var my2 = <b>new</b> myClass(); // 二度目のnewなので construct は呼ばれず、代わりに stabled が呼ばれる。
  uu.log(my.myMethod()[1]); // "bye-bye"

  uu.log(<b>my === my2</b>); // "true"  myとmy2は同じもの(シングルトン)

  if (window.confirm("jump to http://www.example.com/")) {
    window.location.href = "http://www.example.com/"; // ページ遷移が発生するため、自動的に destruct を1度だけ実行する。
  }
}
    </pre>
  </dd>
</dl>





<hr />
<h2><a name="CSSClass">CSS Class</a></h2>
<p>CSSクラス(className)の取り扱いを簡単にします。</p>
<hr />
<dl>

<!-- -->
  <dt><a name="uu.klass.has">uu.klass.has</a> - Has className - classNameの存在確認</dt>
  <dd>
    <p>uu.klass.has(<i>elm</i>, <i>className</i>) は
       <i>elm</i>要素のclassNameプロパティの値に<i>className</i>が含まれていればtrueを返します。</p>
    <pre>
 @param Element elm       - 要素を指定します。
 @param String  className - クラス名を指定します。
 @return Boolean          - 要素のclassNameプロパティの値に引数で指定したclassNameが含まれていればtrueを返します。
    </pre>
    <pre class="eg">
var e = document.body.appendChild(createElement("div"));
e.className = "hoge";

uu.log(<b>uu.klass.has</b>(e, "hoge")); // true
    </pre>
  </dd>

<!-- -->
  <dt><a name="uu.klass.add">uu.klass.add</a> - Add className property - classNameプロパティにクラス名を追加</dt>
  <dd>
    <p>uu.klass.add(<i>elm</i>, <i>className</i>) は
       <i>elm</i>要素のclassNameプロパティの値に<i>className</i>を追加します。</p>
    <p><b>開発中の機能</b>: クラス名が "js" で始まっている場合は、クラス名の先頭から "js" を取り除き、
       <a href="#uu.klass.setWidgetChainedClassName">uu.klass.setWidgetChainedClassName</a>
       で登録されているuidがあるなら、
       uidに対しメッセージ(UU.MSG_ADD_CLASSNAME)をpost(p1=elm, p2=js除去後のclassName)します。
    </p>
    <pre>
 @param Element elm - 要素を指定します。
 @param String  className - クラス名を指定します。複数のクラス名は指定できません。
    </pre>
    <pre class="eg">
uu.forEach(uu.klass("alpha"), function(v) {
  <b>uu.klass.add</b>(v, "beta");
});
    </pre>
  </dd>

<!-- -->
  <dt><a name="uu.klass.remove">uu.klass.remove</a> - Remove className property - classNameプロパティからクラス名を削除</dt>
  <dd>
    <p>uu.klass.remove(<i>elm</i>, <i>className</i>) は
       <i>elm</i>要素のclassNameプロパティの値から<i>className</i>を削除します。</p>
    <p>該当する値が存在しなければ何もしません。</p>
    <p><b>開発中の機能</b>: クラス名が、<a href="#uu.klass.setWidgetChainedClassName">uu.klass.setWidgetChainedClassName</a>
       で登録されているuidがあるなら、
       uidに対しメッセージ(UU.MSG_REMOVE_CLASSNAME)をpost(p1=elm, p2=js除去後のclassName)します。
    </p>
    <pre>
 @param Element elm       - 要素を指定します。
 @param String  className - クラス名を指定します。複数のクラス名は指定できません。
    </pre>
    <pre class="eg">
uu.forEach(uu.klass("alpha"), function(v) {
  <b>uu.klass.remove</b>(v, "beta");
});
    </pre>
  </dd>
<!-- -->
  <dt><a name="uu.klass.toggle">uu.klass.toggle</a> - Add className property or remove - classNameプロパティにクラス名を追加または削除する</dt>
  <dd>
    <p>uu.klass.toggle(<i>elm</i>, <i>className</i>) は
       <i>elm</i>要素のclassNameプロパティの値に、<i>className</i>を追加します。すでに存在する場合は削除します。</p>
    <pre>
 @param Element elm       - 要素を指定します。
 @param String  className - クラス名を指定します。複数のクラス名は指定できません。
    </pre>
    <pre class="eg">
uu.forEach(uu.klass("alpha"), function(v) {
  <b>uu.klass.toggle</b>(v, "beta"); // 既に存在するなら削除し、存在しないなら追加する
});
    </pre>
  </dd>


<!-- -->
  <dt><a name="uu.klass.setWidgetChainedClassName">uu.klass.setWidgetChainedClassName</a> - Coming Soon</dt>
  <dd>
    <p>uu.klass.setWidgetChainedClassName(<i>uid</i>, <i>className</i>) は
       <i>uid</i>とクラス名の関連付けを行います。</p>
    <p>関連付けされたクラス名が、uu.klass.add, uu.klass.remove, uu.klass.toggle で追加/削除が行われるとメッセージがpostされるようになります。
    </p>
    <pre>
 @param String  uid       - msgboxメソッドを持つuidを指定します。
 @param String  className - クラス名を指定します。複数のクラス名は指定できません。
                            クラス名の先頭に"js"は不要です。
    </pre>
    <pre class="eg">
var DummyClass = uu.klass.generic();
DummyClass.prototype = {
  msgbox: function(msg, p1, p2) {
  }
};
// widgetbutton クラスが追加/削除された場合にメッセージを飛ばす
<b>uu.klass.setWidgetChainedClassName</b>(DummyClass.uid, "widgetbutton");
    </pre>
  </dd>


<!-- -->
  <dt><a name="uu.klass.unsetWidgetChainedClassName">uu.klass.unsetWidgetChainedClassName</a> - Coming Soon</dt>
  <dd>
    <p>uu.klass.unsetWidgetChainedClassName(<i>uid</i>, <i>className</i>) は
       <i>uid</i>とクラス名の関連付けを解除します。</p>
    <pre>
 @param String  uid       - msgboxメソッドを持つuidを指定します。
 @param String  className - クラス名を指定します。複数のクラス名は指定できません。
                            クラス名の先頭に"js"は不要です。
    </pre>
  </dd>

<!-- -->
  <dt><a name="uu.klass.evalWidgetChainedClassName">uu.klass.evalWidgetChainedClassName</a> - Evaluate className - classNameを評価する</dt>
  <dd>
    <p>uu.klass.evalWidgetChainedClassName(<i>elm</i>, <i>className</i>) は
       <i>elm</i>に<i>className</i>が追加された時の振る舞いをエミュレートさせます。</p>
    <p>この関数を呼ぶ前に、<a href="#uu.klass.setWidgetChainedClassName">uu.klass.setWidgetChainedClassName</a>で関連付けを行っておく必要があります。</p>
    <pre>
 @param Element elm       - 要素を指定します。
 @param String  className - クラス名を指定します。複数のクラス名は指定できません。
                            クラス名の先頭に"js"は不要です。
    </pre>
  </dd>

</dl>




<hr />
<h2><a name="Attribute">Attribute</a></h2>
<p>属性の取り扱いを簡単にします。</p>
<hr />
<dl>
<!-- -->
  <dt><a name="uu.attr.get">uu.attr.get</a> - Get attribute - 属性を取得</dt>
  <dd>
    <p>uu.attr.get(<i>elm</i>, <i>attr</i>) は、
       <i>elm</i>要素の<i>attr</i>属性の値を取得します。</p>
    <p>setAttributeで設定された独自の属性があればそちらを取得しますが、
       Elementノードに同名の属性値があればそちらを優先します。</p>
    <pre>
 @param Element elm  - 属性を取得する要素を指定します。
 @param <a href="./GLOSSARY.htm#TypeTaxing">Taxing</a>  attr - 属性名の指定です。
 @return Hash/String - attrに複数の属性名を指定すると Hash({ attr: value })を返します。
                       attrに属性名を1つだけ指定すると 属性値 を文字列で返します。
                       存在しない属性名を指定すると、その要素の戻り値は空文字列("")になります。
    </pre>
    <table>
    <tr><th>Expression</th><th>Returns</th><th>Note</th></tr>
    <tr><td>uu.attr.get(<i>elm</i>, "title,href")<br />
            uu.attr.get(<i>elm</i>, ["title","href"])</td><td>{ title: "the title", href: "http://..." }</td><td>複数の属性名を指定するとHashを返す</td></tr>
    <tr><td>uu.attr.get(<i>elm</i>, "title")</td><td>"the title"</td><td>属性名を一つだけ指定すると文字列を返す</td></tr>
    <tr><td>uu.attr.get(<i>elm</i>, "abcde")</td><td>""</td><td>存在しない属性名を指定すると空文字列("")を返す</td></tr>
    <tr><td>uu.attr.get(<i>elm</i>, "title,abcde")</td><td>{ title: "the title", abcde: "" }</td><td>存在しない属性名の値は空文字列("")になる</td></tr>
    </table>
  </dd>
<!-- -->
  <dt><a name="uu.attr.set">uu.attr.set</a> - Set attribute - 属性を設定</dt>
  <dd>
    <p>uu.attr.set(<i>elm</i>, <i>hash</i>) は、
       <i>elm</i>要素の<i>attr</i>属性に値<i>value</i>を設定します。</p>
    <pre>
 @param Element elm  - 属性を設定する要素を指定します。
 @param Hash    hash - { attr: value, ...} を指定します。
    </pre>
    <table>
    <tr><th>Expression</th><th>Note</th></tr>
    <tr><td>uu.attr.set(<i>elm</i>, <a href="#uu.toPair">uu.toPair</a>("title", "hoge"))<br />
            uu.attr.set(<i>elm</i>, { title: "hoge" })</td><td>{ title: "hoge" }を設定</td></tr>
    <tr><td>uu.attr.set(<i>elm</i>, { title: "hoge" href: "http://..."} )</td><td>{ title: "hoge", href: "http://..." }を設定</td></tr>
    </table>
  </dd>
</dl>









<hr />
<h2><a name="CSS">CSS</a></h2>
<p>スタイル情報の取り扱いを簡単にします。</p>
<hr />
<dl>
<!-- -->
  <dt><a name="uu.css.get">uu.css.get</a> - document.defaultView.getComputedStyle wrapper - 計算済みのスタイルを取得</dt>
  <dd><p>uu.css.get(<i>elm</i>, <i>cssProp</i> = undefined)は、要素(<i>elm</i>)に適用されている計算済みのスタイルを取得します。<br />
      <i>cssProp</i>を省略すると全てのスタイル情報をHashで返します。
      <i>cssProp</i>にプロパティを一つ指定すると値を文字列で返します。
      プロパティを複数指定すると結果をHashで返します。</p>
      <p><a href="./MODULE.htm#uu.module.config.backCompat">uu.module.config.backCompat</a>が1なら、
         <a href="./GLOSSARY.htm#cssProp">css-prop</a>形式("font-weight")のスタイル名も指定可能になります。</p>
      <p>この関数ではpseudo elementを取得できません。</p>
      <table>
      <tr><th><i>cssProp</i></th><th>Result type<br />戻り値の型</th><th>Returns<br />戻り値</th></tr>
      <tr><td>指定しない</td><td>CSS2Properties<br />(read only)</td><td>elmのスタイル情報<br />{ 0: undefined, MozApperrance: "none", ... }</td></tr>
      <tr><td>"backgroundColor"</td><td>string</td><td>rgb(51, 102, 153)</td></tr>
      <tr><td>["background-color", "float"]</td><td>Hash</td><td>{ backgroundColor: "rgb(51, 102, 153)", cssFloat: "left" }</td></tr>
      <tr><td>"border, outline, width, height"</td><td>Hash</td><td>{ border: "", height: "200px", outline: "", width: "320px" }</td></tr>
      <tr><td>"float,opacity"</td><td>Hash</td><td>IEの場合は { styleFloat: "left", opacity: "0.5" }<br />
                                                   IE以外は、{ cssFloat: "left", opacity: "0.5" }</td></tr>
      </table>
      <p>戻り値は、<a href="./GLOSSARY.htm#cssProp">cssProp</a>形式で、単位付の文字列(例: "200px")になります。</p>
      <pre>
 @param Element elm      - スタイルを取得する要素を指定します。
 @param <a href="./GLOSSARY.htm#TypeTaxing">Taxing</a> [cssProp] - cssProp形式のプロパティ名("fontWeight")を指定します。省略できます。
                           uu.module.config.backCompat=1なら、css-prop形式("font-weight")のプロパティ名も指定可能になります。
 @return Hash/String - cssPropに複数の要素を指定している場合は Hash { cssProp形式のプロパティ名: 計算済みのスタイル, ... }を返します。
                       cssPropが単一の要素なら、計算済みのスタイルを文字列で返します。
                       cssPropで指定したプロパティが存在しない場合は、その要素の値は空文字列("")になります。
                       cssPropを省略した場合は、全てのスタイル情報を持つ特別なオブジェクト(CSS2Properties)を返します。
      </pre>
      <a href="demo/document/uu.css.get.htm" class="run">Run</a>
      <pre class="eg">
var elm = uu.id("target");
var rv1 = <b>uu.css.get</b>(elm); // { 0: undefined, 1: undefined, 2: undefined, MozApperrance: "none", ... length: 109 }
var rv2 = <b>uu.css.get</b>(elm, "backgroundColor"); // "rgb(51, 102, 153)";
var rv3 = <b>uu.css.get</b>(elm, ["background-color", "float"], true); // { backgroundColor: "rgb(51, 102, 153)", cssFloat: "left" }
uu.log(rv3["styleFloat"] || rv3["cssFloat"]); // "left"
var rv4 = <b>uu.css.get</b>(elm, "border, outline, width, height"); // { border: "", height: "200px", outline: "", width: "320px" }
var rv5 = <b>uu.css.get</b>(elm, ["width", "height"]); // { height: "200px", width: "320px" }
      </pre>
  </dd>

  <dt><a name="uu.css.rect">uu.css.rect</a> - Get RectHash( { x: left, y: top, w: width, h: height } ) (value of px unit)</dt>
  <dd>
    <p>uu.css.rect(<i>elm</i>) は、
       RectHash( { x, y, w, h } )を返します。x,yには座標の数値(単位:px), w,hには幅と高さの数値(単位:px)が格納されます。</p>
    <p>w と h には、margin, padding, border を<b>含みません</b>。</p>
    <p>uu.css.rect が margin, padding, borderを含まない情報を返すのに対し、
       <br /><a href="#uu.element.rect">uu.element.rect</a>は、それらを含んだ情報を返します。</p>
    <pre>
 @param Element elm - 要素を指定します。
 @return <a href="./GLOSSARY.htm#RectHash">RectHash</a>   - RectHash( { x, y, w, h } )を返します。
    </pre>
  </dd>

<!-- -->
  <dt><a name="uu.css.opacity">uu.css.opacity</a> - Get opacity value(from 0.0 to 1.0) - 不透明度を数値(0.0～1.0)で取得</dt>
  <dd>
    <p>uu.css.opacity(<i>elm</i>) は、
       不透明度を0.0～1.0の数値で取得します。</p>
    <pre>
 @param Element elm - 要素を指定します。
 @return Number     - 不透明度(0.0～1.0)を返します。
    </pre>
  </dd>

<!-- -->
<!--
  <dt><a name="uu.css.display">uu.css.display</a> - Get display value - displayの値を取得</dt>
  <dd>
    <p>uu.css.display(<i>elm</i>) は、
       要素の表示方法を取得します。</p>
    <pre>
 @param Element elm - 要素を指定します。
 @return String     - 表示方法を文字列で返します。
                      返される文字列は、"none", "block", "inline-block" などがあります。
    </pre>
  </dd>
 -->

<!-- -->
  <dt><a name="uu.css.backgroundImage">uu.css.backgroundImage</a> - Get background-image URL - 背景画像のURLを取得</dt>
  <dd>
    <p>uu.css.backgroundImage(<i>elm</i>) は、
       background-imageの値(URL)を取得します。</p>
    <pre>
 @param Element elm - 要素を指定します。
 @return String     - URLを返します。URLが指定されていない場合は "none" を返します。
                      返される文字列は、"http://..." の形式になります。
    </pre>
  </dd>

<!-- -->
  <dt><a name="uu.css.set">uu.css.set</a> - Set style - スタイルを設定</dt>
  <dd><p>uu.css.set(<i>elm</i>, <i>hash</i>)は、
      要素<i>elm</i>に<i>hash</i>({ <a href="./GLOSSARY.htm#cssProp"><i>cssProp</i></a>: <i>value</i>, ... })で
      指定されたスタイルを設定します。</p>
      <p><a href="./MODULE.htm#uu.module.config.backCompat">uu.module.config.backCompat</a>が1なら、
         <a href="./GLOSSARY.htm#cssProp">css-prop</a>形式("font-weight")のスタイル名も指定可能になります。</p>
      <p><i>value</i>には単位付きの文字列を指定します。一部のスタイルには数値や特別な値を指定できます。</p>
      <table>
      <caption>数値や特別な値を指定可能なスタイル名の一覧</caption>
      <tr><th>cssProp name</th><th>Value / Value Type</th><th>Note</th></tr>
<!--
      <tr><td>display</td><td>"hide"</td><td>要素を隠す</td></tr>
      <tr><td>display</td><td>"show"</td><td>要素を表示する</td></tr>
 -->
      <tr><td>opacity</td><td>Number</td><td>不透明度を0.0から1.0の値で指定可能</td></tr>
      </table>
      <pre>
 @param Element elm  - スタイルを設定する要素を指定します。
 @param Hash    hash - { cssProp: value, ...} を指定します。
                       uu.module.config.backCompat=1なら { "css-prop": value, ... } 形式の名前も指定可能になります。
      </pre>
      <a href="demo/document/uu.css.set.htm" class="run">Run</a>
      <pre class="eg">
&lt;div id="result1"&gt;change bg-color and text-color. border style copied BorderBox&lt;/div&gt;
&lt;div id="result2"&gt;BorderBox&lt;/div&gt;
&lt;script&gt;
function boot() {
  var elm1 = uu.id("result1"), elm2 = uu.id("result2");
  var cssProp = "borderTopColor,    borderTopWidth,     borderTopStyle,     " +
                "borderRightColor,  borderRightWidth,   borderRightStyle,   " +
                "borderBottomColor, borderBottomWidth,  borderBottomStyle,  " +
                "borderLeftColor,   borderLeftWidth,    borderLeftStyle     ";
  var style2 = <b>uu.css.get</b>(elm2, cssProp); // border系のスタイルを抽出

  uu.delay(function() {
    uu.effect.fade(elm1, {
      begin: 1,
      end: 0,
      fn: function() {
        uu.css.set(elm1, style2); // elm1にborder:系のスタイルを適用する
        uu.css.set(elm1, { backgroundColor: "white", color: "black" });
        uu.delay(function() {
          uu.effect.fade(elm1, { begin: 0, end: 1 });
        }, 500);
      }
    });
  }, 500);
}
&lt;/script&gt;
      </pre>
  </dd>

  <dt><a name="uu.css.setRect">uu.css.setRect</a> - Set RectHash( { x: left, y: top, w: width, h: height } )</dt>
  <dd>
    <p>uu.css.setRect(<i>elm</i>, <i>rect</i>, <i>autoVisible</i> = false) は、
       RectHash( { x, y, w, h } )を受け取り、要素の座標とサイズを更新します。</p>
    <p>各要素はpx単位の数値で指定します。
       <br />x が elm.style.left, y が elm.style.top, w が elm.style.width, h が elm.style.height に相当します。
       <br />x, y, w, h のいずれも省略可能で、省略された要素については更新しません。
    </p>
    <pre>
 @param Element  elm         - 要素を指定します。
 @param <a href="./GLOSSARY.htm#RectHash">RectHash</a> rect        - RectHash( { x, y, w, h } )を指定します。x, y, w, h のいずれも省略可能です。
 @param Boolean  autoVisible - visibilityを自動的に制御する場合はtrueを指定します。デフォルトはfalseです。
                               trueを指定し、wまたはhの値がゼロに変化すると、その要素のvisibilityは"hidden"に設定されます。
                               trueを指定し、wとhの値がゼロから1以上の値に変化すると、その要素のvisibilityは"visible"に設定されます。
    </pre>
  </dd>

<!-- -->
  <dt><a name="uu.css.setOpacity">uu.css.setOpacity</a> - Set opacity value(from 0.0 to 1.0) - 不透明度を設定(0.0～1.0)</dt>
  <dd>
    <p>uu.css.setOpacity(<i>elm</i>, <i>opa</i>) は、
       不透明度を0.0～1.0の数値で設定します。<br />0を指定すると透明になります。</p>
    <pre>
 @param Element elm - 要素を指定します。
 @param Number  opa - 不透明度(0.0～1.0)を指定します。0.001未満なら、0が指定されたものとして動作します。
    </pre>
  </dd>

<!-- -->
<!--
  <dt><a name="uu.css.setDisplay">uu.css.setDisplay</a> - Set display value - 表示方法の値を設定</dt>
  <dd>
    <p>uu.css.setDisplay(<i>elm</i>, <i>disp</i>) は、
       表示方法を指定します。</p>
    <p>指定可能な値は"none", "block", ... などのCSSで定義されている文字列の他に、特別な値として"show", "hide"が指定できます。
       <br />"show"は要素を表示し、"hide"は要素を隠します。
       <br />"show", "hide"を使用すると、ブロック要素,インライン要素,TABEL要素等を同じコードで操作可能になります。
    </p>
    <pre>
 @param Element elm  - 要素を指定します。
 @param String  disp - 表示方法を文字列でします。特別な値として"show", "hide"が指定できます。
                       "show"なら要素の種類にかかわらず表示し、"hide"なら隠します。
    </pre>
  </dd>
 -->

<!-- -->
  <dt><a name="uu.css.setBackgroundImage">uu.css.setBackgroundImage</a> - Set background-image URL - 背景画像のURLを設定</dt>
  <dd>
    <p>uu.css.setBackgroundImage(<i>elm</i>, <i>url</i>) は、
       background-image の値(URL)を設定します。</p>
    <pre>
 @param Element elm - 要素を指定します。
 @param String  url - URLを指定します。
    </pre>
  </dd>

<!-- -->
  <dt><a name="uu.css.show">uu.css.show</a> - Show element</dt>
  <dd>
    <p>uu.css.show(<i>elm</i>, <i>resultRect</i> = false) は、要素を表示します。</p>
    <p>visibility の値を"visible"に設定し、display の値を要素の種別に合わせ自動的に"block"や"table"等に設定します。</p>
    <p><i>resultRect</i> が true ならば、要素を表示した状態で<a href="#uu.css.rect">uu.css.rect(elm)</a>を取得しRectHashを返します。</p>
    <pre>
 @param Element elm        - 要素を指定します。
 @param Boolean resultRect - 戻り値でRectHashを返す場合にtrueを指定します。
                             デフォルトはfalseです。
 @return <a href="./GLOSSARY.htm#RectHash">RectHash</a>/0        - resultRectがtrueなら、uu.css.rect(elm)の結果を返します。
                             resultRectがfalseなら0を返します。
    </pre>
  </dd>

<!-- -->
  <dt><a name="uu.css.hide">uu.css.hide</a> - Hide element</dt>
  <dd>
    <p>uu.css.hide(<i>elm</i>, <i>resultRect</i> = false) は、要素を非表示にします。</p>
    <p>visibility の値は変更せず、display の値を"none"に変更します。</p>
    <p><i>resultRect</i> が true ならば、要素を非表示にした状態で<a href="#uu.css.rect">uu.css.rect(elm)</a>を取得しRectHashを返します。</p>
    <pre>
 @param Element elm        - 要素を指定します。
 @param Boolean resultRect - 戻り値でRectHashを返す場合にtrueを指定します。
                             デフォルトはfalseです。
 @return <a href="./GLOSSARY.htm#RectHash">RectHash</a>/0        - resultRectがtrueなら、uu.css.rect(elm)の結果を返します。
                             resultRectがfalseなら0を返します。
    </pre>
  </dd>


<!-- -->
  <dt><a name="uu.css.rebound">uu.css.rebound</a> - Move element in inside of screen after having made it visible in outside of screen - 画面外で可視化し画面内に戻す</dt>
  <dd>
    <p>uu.css.rebound(<i>elm</i>, <i>inboundRect</i>) は、要素を画面外で可視化し画面内に戻します。</p>
    <p>まず、要素を画面外の位置(left: -3333px, top: -3333px)に移動し、表示します。
       <br />次に、<a href="#uu.css.setRect">uu.css.setRect</a>(<i>inboundRect</i>)を実行し画面内に戻します。
    </p>
    <p>この関数は、描画途中をユーザから隠したい場合や、最小化の状態でeffectを開始したい場合等に使用します。</p>

    <pre>
 @param Element  elm         - 要素を指定します。
 @param <a href="./GLOSSARY.htm#RectHash">RectHash</a> inboundRect - 画面内の座標をRectHashで指定します。
    </pre>
  </dd>

<!-- -->
  <dt><a name="uu.css.isBlock">uu.css.isBlock</a> - is block element - ブロック要素ならtrue</dt>
  <dd>
    <p>uu.css.isBlock(<i>elm</i>) は、要素がブロック要素としてレンダリング可能ならtrueを返します。</p>
    <p>display = "table" などをサポートしていないブラウザ(IE6など)では、
      <br />display = "table" を指定すると要素が表示されなくなるため、この関数は false を返します。</p>
    <p>現在のdisplayの値が、"inline-block"などに設定されていたとしても、
       <i>elm</i> で指定された要素が、本来ブロック要素としてレンダリングされるべきものなら true を返します。
    </p>
    <pre>
 @param Element  elm - 要素を指定します。
 @return Boolean     - trueまたはfalseを返します。
    </pre>
  </dd>

<!-- -->
  <dt><a name="uu.css.toPixel">uu.css.toPixel</a> - Unit into px - px単位に変換</dt>
  <dd>
    <p>uu.css.toPixel(<i>elm</i>, <i>val</i>, <i>cssProp</i> = "") は、単位をpxに変換した数値を返します。</p>
    <pre>
 @param Element  elm     - 要素を指定します。
 @param Mix      val     - 数値( 3 ),
                           文字列化された数値( "3" ),
                           単位付の文字列数値( "3px" , "3pt", "3em" ) などが指定可能です。
                           IEなら、"auto" も指定可能です。
 @param String   cssProp - IEで有効な引数です。デフォルトは空文字列( "" ) です。
                           valに"auto", cssPropに"width" を指定すると、elm.clientWidth の値を返します。
                           valに"auto", cssPropに"height" を指定すると、elm.clientHeight の値を返します。
 @return Number          - px単位の数値を返します。
    </pre>
  </dd>

<!-- -->
  <dt><a name="uu.css.measure">uu.css.measure</a> - Measure em and pt, and return PixelHash( { em, pt } ) value - em, ptを測定しPixelHash( { em, pt } )を返す</dt>
  <dd>
    <p>uu.css.measure(<i>cache</i> = true) は、相対単位(em, pt)が何pxに相当するのかを実測しPixelHash( { em, pt } )を返します。</p>
    <p>emは現在のフォントサイズが変更されるたびに動的に変化します。
      <br />動的なフォントサイズの変更は、IE6+, Firefox2, Firefox3(ズーム:文字サイズだけ変更)で発生します。
      <br />フォントサイズの変更があった場合にこれらの値は再測定する必要があります。
    </p>
    <pre>
 @param Boolean cache - 前回測定した値を返す場合はtrueを指定します。デフォルトはtrueです。
                        再測定する場合はfalseを使用します。
 @return PixelHash    - PixelHash( { em, pt } )を返します。
    </pre>
  </dd>

<!-- -->
  <dt><a name="uu.css.insertRule">uu.css.insertRule</a> - Insert CSS ruls - CSSルールを追加</dt>
  <dd>
    <p>uu.css.insertRule(<i>rule</i>, <i>index</i> = undefined) は、ルールを追加します。</p>
    <p>必要に応じて、uupaa.js 専用に新しいスタイルシートを動的に生成してからルールを追加します。</p>
    <pre>
 @param String rule  - ルールを追加します。
                       ルールは "div { color: black }" のような文字列で指定します。
                       "div, p { color: black }" のようにカンマコンビネータを使用するとIEでエラーが発生するため、
                       "div { color: black }" と "p { color: black }" に分けて指定します。
 @param Number index - ルールの挿入位置を指定します。デフォルトは undefined です。
                       undefined を指定すると、ルールセットの最後に追加されます。
                       通常は、undefined を指定します。
 @return Number      - ルールの挿入位置を返します。
                       この番号は、<a href="#uu.css.deleteRule">uu.css.deleteRule</a> で使用します。
 @see <a href="http://dev.w3.org/csswg/cssom/#cssstylesheet">CSSOM</a>
    </pre>
  </dd>

<!-- -->
  <dt><a name="uu.css.deleteRule">uu.css.deleteRule</a> - Delete CSS ruls</dt>
  <dd>
    <p>uu.css.deleteRule(<i>index</i>) は、uupaa.js 専用に動的に生成されたスタイルシート上からルールを削除します。</p>
    <pre>
 @param Number index - 削除するルールを指定します
                       この番号は、<a href="#uu.css.insertRule">uu.css.insertRule</a> が返す番号を指定します。
 @see <a href="http://dev.w3.org/csswg/cssom/#cssstylesheet">CSSOM</a>
    </pre>
  </dd>

<!-- -->
  <dt><a name="uu.css.createStyleSheet">uu.css.createStyleSheet</a> - Create StyleSheet</dt>
  <dd>
    <p>uu.css.createStyleSheet() は、新しくスタイルシートを生成し、head要素の最後に追加します。</p>
    <pre>
 @return Element - 生成したスタイルシートオブジェクトを返します。
 @see <a href="http://dev.w3.org/csswg/cssom/#cssstylesheet">CSSOM</a>
    </pre>
  </dd>
</dl>



<hr />
<h2><a name="Element">Element</a></h2>
<p>要素に関する情報を取り扱います。</p>
<pre style="line-height: 1">
Firefox3でcssTextに、
"margin: 5px; border: 3px solid black; padding: 2px; width: 10px; height: 10px"指定時の各プロパティの値です。

offsetXxx系は正式な仕様ではなく、IEの独自実装を他のブラウザが追従したものですが、
各ブラウザで解釈が異なっているようです。

  elm.style.cssText
    = "margin: 5px; border: 3px solid black; padding: 2px; width: 10px; height: 10px";

elm.offsetLeft   =  5px = 5(marginLeft)
elm.offsetTop    =  5px = 5(marginLeft)
elm.offsetWidth  = 20px = 6(border) + 4(padding) + 10(width)
elm.offsetHeight = 20px = 6(border) + 4(padding) + 10(height)
elm.clientLeft   =  3px = 3(borderLeft)
elm.clientTop    =  3px = 3(borderTop)
elm.clientWidth  = 14px = 4(padding) + 10(width)
elm.clientHeight = 14px = 4(padding) + 10(height)

 +----------------------------------------------------  ＿
 |                      □                              │elm.style.marginTopWidth
 |                      □                              │elm.offsetTop
 |                      □                              │
 |                      □                              │
 |                      □                          ＿  │    ＿
 |          ■■■■■■■■■■■■■■■■■■■■│  ￣    │elm.style.borderTopWidth
 |          ■■■■■■■■■■■■■■■■■■■■│        │elm.clientTop
 |          ■■■■■■■■■■■■■■■■■■■■│＿  ＿  │
 |          ■■■    □                      ■■■││  │  ￣
 |          ■■■    □                      ■■■││  │elm.style.paddingTopWidth
 |          ■■■□□+- - - - - - - - - +    ■■■││  ￣
 |□□□□□■■■                       |    ■■■││
 |          ■■■    |                       ■■■││
 |          ■■■                       |    ■■■││elm.clientHeight(= padding + height)
 |          ■■■    |       elm             ■■■││
 |          ■■■                       |    ■■■││
 |          ■■■    |                       ■■■││
 |          ■■■                       |    ■■■││
 |          ■■■    |                       ■■■││
 |          ■■■    + - - - - - - - - -+    ■■■││  ＿
 |          ■■■                            ■■■││  │elm.style.paddingBottomWidth
 |          ■■■                            ■■■││  │
 |          ■■■■■■■■■■■■■■■■■■■■│￣  ￣
 |          ■■■■■■■■■■■■■■■■■■■■│
 |          ■■■■■■■■■■■■■■■■■■■■│elm.offsetHeight(= margin + height)
 |                                                  ￣
 |         ├───────────────────┤
 |          elm.offsetWidth(= margin + width)
 |
 |               ├─────────────┤
 |                elm.clientWidth(= padding + width)
 |
 |         ├──┤
            elm.style.borderTopWidth
            elm.clientLeft
  
 ├────┤
  elm.style.marginLeftWidth
  elm.offsetLeft

</pre>
<hr />
<dl>
<!-- -->
  <dt><a name="uu.element.rect">uu.element.rect</a> - Get element rect(abs) - 要素の絶対位置とサイズを取得</dt>
  <dd>
    <p>uu.element.rect(<i>elm</i>) は、要素の矩形情報を取得します。</p>
    <p><a href="#uu.css.rect">uu.css.rect</a> が margin, padding, border を含まない情報を返すのに対し、
       <br />uu.element.rect は、それらを含んだ情報を返します。</p>
    <p>uu.element.rect は 画面内における要素の絶対位置を取得するために使用できます。</p>
    <pre>
 @param Element elm - 要素を指定します。
 @return <a href="./GLOSSARY.htm#RectHash">RectHash</a>   - RectHash( { x, y, w, h, ow, oh } )を返します。
                      x: offset from viewport with scroll(abs x) - 画面左上からのオフセット(スクロール量を含む)
                      y: offset from viewport with scroll(abs y) - 画面左上からのオフセット(スクロール量を含む)
                      w: padding + width
                      h: padding + height
                      ow: border + padding + width
                      oh: border + padding + height
    </pre>
  </dd>

<!-- -->
  <dt><a name="uu.element.offsetFromParentHasLayout">uu.element.offsetFromParentHasLayout</a> - Get offset from ParentHasLayout element - ParentHasLayout要素からのオフセットを取得</dt>
  <dd>
    <p>uu.element.offsetFromParentHasLayout(<i>elm</i>) は、<a href="./GLOSSARY.htm#ParentHasLayout">ParentHasLayout</a>要素からのオフセットを取得します。</p>
    <pre>
 @param Element elm - 要素を指定します。
 @return <a href="./GLOSSARY.htm#RectHash">RectHash</a>   - RectHash( { x, y, w, h, ow, oh } )を返します。
                      x: offset from ParentHasLayout element(rel x) - ParentHasLayout 要素からのオフセット
                      y: offset from ParentHasLayout element(rel y) - ParentHasLayout 要素からのオフセット
                      w: padding + width
                      h: padding + height
                      ow: border + padding + width
                      oh: border + padding + height
    </pre>
  </dd>

<!-- -->
  <dt><a name="uu.element.offsetFromAncestor">uu.element.offsetFromAncestor</a> - Get offset from ancestor element - 先祖要素(ancestor)からのオフセットを取得</dt>
  <dd>
    <p>uu.element.offsetFromAncestor(<i>elm</i>, <i>ancestor</i>) は、先祖要素(<i>ancestor</i>)からのオフセットを取得します。</p>
    <pre>
 @param Element elm      - 要素を指定します。
 @param Element ancestor - 先祖要素を指定します。
 @return Hash            - Hash( { x, y } )を返します。
                           x: offset from ancestor element(rel x) - ancestor要素からのオフセット
                           y: offset from ancestor element(rel y) - ancestor要素からのオフセット
    </pre>
  </dd>


<!-- -->
  <dt><a name="uu.element.toAbsolute">uu.element.toAbsolute</a> - Absolute positioning - 絶対座標化</dt>
  <dd>
    <p>uu.element.toAbsolute(<i>elm</i>) は、要素の現在位置を保持したまま絶対座標化(position: absolute)します。</p>
    <pre>
 @param Element elm - 要素を指定します。
    </pre>
  </dd>
<!-- -->
  <dt><a name="uu.element.toStatic">uu.element.toStatic</a> - Static positioning - 静的座標化</dt>
  <dd>
    <p>uu.element.toStatic(<i>elm</i>) は、要素を静的座標化(position: static)します。</p>
    <pre>
 @param Element elm - 要素を指定します。
    </pre>
  </dd>

<!-- -->
  <dt><a name="uu.element.fromPoint">uu.element.fromPoint</a> - Coming Soon</dt>
  <dd>
    <p>uu.element.fromPoint(<i>x</i>, <i>y</i>) は、点(x, y)にある要素を返します。</p>
    <pre>
 @return Element - 要素を返します。
    </pre>
  </dd>
</dl>




<hr />
<h2><a name="ViewPort">ViewPort</a></h2>
<p>ブラウザの表示領域(ViewPort)に関する情報を取り扱います。</p>
<hr />
<dl>
<!-- -->
  <dt><a name="uu.viewport.rect">uu.viewport.rect</a> - Get view-port rect(browser inner size) - ブラウザの表示領域の位置とサイズを取得</dt>
  <dd>
    <p>uu.viewport.rect() は、ブラウザの表示領域の情報を取得します。</p>
    <p>x, y, w, h の値には <a href="uu.viewport.setVirtualPadding">uu.viewport.setVirtualPadding</a> で設定したパディング値が加味された値が返されます。</p>
    <pre>
 @return <a href="./GLOSSARY.htm#RectHash">RectHash</a>   - RectHash( { x, y, w, h, sw, sh } )を返します。
                      x:  virtual-padding-left
                      y:  virtual-padding-top
                      w:  browser view-port width - ブラウザの表示領域の幅
                      h:  browser view-port height - ブラウザの表示領域の高さ
                      sw: scroll width  - スクロールの幅
                      sh: scroll height - スクロールの高さ
    </pre>
  </dd>

<!-- -->
  <dt><a name="uu.viewport.setVirtualPadding">uu.viewport.setVirtualPadding</a> - Set PaddingHash( { top, right, bottom, left } )</dt>
  <dd>
    <p>uu.viewport.setVirtualPadding() は、ブラウザの表示領域の仮想的なpadding情報を設定します。</p>
    <p>top, right, bottom, left のいずれも省略可能で、省略された要素については更新しません。</p>
    <p>設定された値は <a href="uu.viewport.rect">uu.viewport.rect</a> が返すx, y, w, h の値に影響を与えます。</p>
    <pre>
 @param PaddingHash - PaddingHash( { top, right, bottom, left } )を指定します。
                      top:    virtual-padding-left
                      right:  virtual-padding-right
                      bottom: virtual-padding-bottom
                      left:   virtual-padding-left
    </pre>
  </dd>
</dl>


<hr />
<h2><a name="Module">Module</a></h2>
<p>機能単位で分割されているモジュール(JavaScriptファイル)を読み込むことで、uupaa.jsの機能を拡張できます。<br />
   uu.moduleは、モジュールを動的に読み込み、機能を拡張する手段を提供します。</p>
<p>モジュール名は任意です。ファイル名に使用可能な文字と記号( []()+-!., )などもモジュール名に使用可能です。</p>
<p>読み込まれるモジュールは、自らの名前を、uu.module[モジュール名] = {} として定義する必要があります。
   <br />定義し忘れるとモジュールの読み込み失敗やタイムアウトエラーが発生します。
</p>
<pre class="eg">
  uu.module.<b><i>moduleName</i></b> = {};                      // 基本形
  uu.module.<i>moduleName</i> = <b>function</b>( ... ) { ... }; // 関数オブジェクトもOK
  uu.module[<b>"<i>effect+</i>"</b>] = {};                      // 記号を使う場合は ["モジュール名"] とする
  uu.module[<b>"<i>skin.plasticityAngle</i>"</b>] = {};       // ドットでネームスペースを切ることも可能
</pre>
<p>以下が最小構成のモジュールの例です。これは uu.module.dummy.js として提供されています。</p>
<pre class="eg">
(function() { var /* uud = document, */ uuw = window, uu = uuw.uu;

<b>uu.module.dummy</b> = {};

})(); // end (function())()
</pre>
<hr />
<dl>
<!-- -->
  <dt><a name="uu.module">uu.module</a> - Load Module - モジュールの読み込み</dt>
  <dd><p>uu.module(<i>path</i> = "", <i>module</i>, <i>fn</i> = undefined) は、
         <i>module</i>を<i>path</i>で指定されたディレクトリから読み込みます。
         全モジュールの読み込み完了で <i>fn</i>() をコールします。</p>
      <p><i>path</i>に複数のパスを指定すると、各パスで読み込みが可能か順番に試行します。
         <br />全てのパスを試行し、それでも読み込めないモジュールがある場合は例外を発生させ処理を終了します。
         <br /><i>path</i>を省略すると、検索パスとして<a href="./MODULE.htm#uu.module.config.modulePath">uu.module.config.modulePath</a> の値を使用します。</p>
      <p><i>path</i>に相対パスを指定すると、 uupaa.js が設置されているディレクトリを基準としてモジュールを読み込みます。</p>
      <pre>
 @param <a href="./GLOSSARY.htm#TypeTaxing">Taxing</a> [path] - 検索パスの指定です。絶対URLや相対パスを指定します。
                        空文字列を指定すると、<a href="./MODULE.htm#uu.module.config.modulePath">uu.module.config.modulePath</a> で指定されたURLを検索パスとして使用します。
                        デフォルトは空文字列("")です。
 @param <a href="./GLOSSARY.htm#TypeTaxing">Taxing</a> module - モジュール名の指定です。
                        モジュール名には、uu.module.xxx.js の xxxの部分を指定します。
 @param Function [fn] - ロード完了後にコールバックするメソッドを指定します。デフォルトはundefinedです。
 @throws Error          "uu.module({module}) failed"  ロード失敗
      </pre>

      <pre class="eg">
// http://example.com/ 以下から effect, dragモジュールのロードを試み、失敗したモジュールだけは、
// http://example.net/latest/ 以下からモジュールのロードを試みる。
uu.module("http://example.com/, http://example.net/latest/", "effect,drag");
      </pre>
      <p>複数の検索パスをうまく組み合わせると、本番系が接続しにくい場合に、
         自動的に予備系のサーバからスクリプトをロードするといった動作の指定が可能になります。</p>
      <p>既にロード済みのモジュールを再度読み込もうとすると、その指示は無視され、即座に fn() をコールします。</p>
      <p>uu.moduleは非同期に読み込みを行うため高速にモジュールを読み込むことができますが、
         読み込み順はブラウザに依存します。タイムアウトもしません。</p>
      <p>読み込み順が保障されないため、順依存なモジュールでエラーが発生する場合があります。
         <br />そのような場合は、<a href="#uu.module.loadSync">uu.module.loadSync</a>を使用します。</p>
      <p>uu.module()の代りに、&lt;script id="uupaa.js" src="uupaa.js<b>?module=...</b>"&gt; とすることで、
         <a href="./MODULE.htm#uu.module.config.load">モジュールを自動的に読み込む</a>こともできます。</p>
  </dd>
<!-- -->
  <dt><a name="uu.module.already">uu.module.already</a> - Module already loaded - モジュールの読み込み確認</dt>
  <dd><p>uu.module.already(<i>module</i>) は、<i>module</i>に指定した全てのモジュールが読み込み済みならtrueを返します。</p>
      <pre>
 @param Taxing module - モジュール名を指定します。
 @return Boolean      - モジュールロード済みでtrueを返します。
                        複数モジュール指定時は、全モジュールロード済みでtrueを返します。
      </pre>
  </dd>
<!-- -->
  <dt><a name="uu.module.loadSync">uu.module.loadSync</a> - Load Module(Synchronized) - モジュールの同期読み込み</dt>
  <dd><p>uu.module.loadSync(<i>path</i> = "", <i>module</i>, <i>fn</i> = undefined) は、
         <a href="#uu.module">uu.module</a>の同期ロード版です。</p>
      <p>uu.module.loadSyncはモジュールを順番に(ひとつずつ)読み込むため、完了までの時間は伸びますが、読み込み順が保障されます。
         <br />読み込み順を保障する必要の無いモジュールと、保障する必要のあるモジュールに分け、
         <br />必要の無いモジュールは <a href="#uu.module">uu.module</a>で読み込み、必要があるモジュールはuu.module.loadSync を使用します。
         <br />一定時間以内に読み込みが完了しないとタイムアウトします。
         <a href="#uu.module.timeout">uu.module.timeout</a>の値を変更するとタイムアウト時間を変更できます。</p>
      <p>既にロード済みのモジュールを再度読み込もうとすると、その指示は無視され、即座に fn() をコールします。</p>

      <pre>
 @param <a href="./GLOSSARY.htm#TypeTaxing">Taxing</a> [path] - 検索パスの指定です。絶対URLや相対パスを指定します。
                        空文字列を指定すると、<a href="./MODULE.htm#uu.module.config.modulePath">uu.module.config.modulePath</a> で指定されたURLを検索パスとして使用します。
                        デフォルトは空文字列("")です。
 @param <a href="./GLOSSARY.htm#TypeTaxing">Taxing</a> module - モジュール名の指定です。
                        モジュール名には、uu.module.xxx.js の xxxの部分を指定します。
 @param Function [fn] - ロード完了後にコールバックするメソッドを指定します。デフォルトはundefinedです。
 @throws Error          "uu.module.loadSync({module}) timeout" タイムアウト
 @throws Error          "uu.module.loadSync({module}) failed"  ロード失敗
      </pre>
  </dd>
<!-- -->
  <dt><a name="uu.module.loadSyncTimeout">uu.module.loadSyncTimeout</a> - loadSync timeout</dt>
  <dd><p>uu.module.timeout は、<a href="#uu.module.loadSync">uu.module.loadSync</a>で使用するタイムアウト時間を指定します。
      1以上の数値を指定します。単位はmsです。デフォルトは500です。</p>
  </dd>
<!-- -->
</dl>







<hr />
<h2><a name="Event">Event</a></h2>
<p>イベントの取り扱いを簡単にします。</p>
<hr />
<dl>
<!-- -->
  <dt><a name="uu.event.closure">uu.event.closure</a> - Create event closure - イベントクロージャを生成</dt>
  <dd><p>uu.event.closure(<i>me</i>) は、イベントシステムで使用するイベントクロージャを生成します。</p>
      <p>この関数を明示的に使用する必要があるのは、以下のケースです。</p>
      <ol>
        <li><a href="#uu.klass.kiss">uu.klass.kiss</a>でクラスを生成しイベントを受け取りたい場合</li>
        <li>トップレベルオブジェクト(window)に追加した関数でイベントを受け取りたい場合</li>
      </ol>
      <p><a href="#uu.klass.generic">uu.klass.generic</a>,
         <a href="#uu.klass.singleton">uu.klass.singleton</a> でクラスを生成した場合は
            自動的に処理されるため、この関数を呼び出す必要はありません。</p>
      <pre>
 @param this me - thisを指定します。
 @return Object - イベントクロージャオブジェクトを返します。これは uu.event.set の引数に渡すことができます。
      </pre>
      <p>
        <a href="./MODULE.htm#uu.module.messagePump.set">メッセージを受け取りたいクラスは <b>msgbox</b> という
        名前のメソッドを定義します</a>が、
        イベントを受け取りたいクラスは、<b>handleEvent</b> という名前のメソッドを定義しておきます。
        <br />handleEvent は DOM LEVEL2 Eventの仕様です(JavaScript第5版 420pを参考にしてください)。
      </p>
      <p>以下はクリックイベントを受け取るクラスの実装例です。</p>
      <a href="demo/document/uu.event.handler.htm" class="run">Run</a>
      <pre class="eg">
var MyClass = uu.klass.generic();
MyClass.prototype = {
  construct: function(element) {
    this.element = element;
    <b>uu.event.set</b>(this, this.element, "click"); // イベントハンドラを設定
  },
  destruct: function() {
    <b>uu.event.unset</b>(this, this.element, "click"); // constructで設定したイベントハンドラを開放
  },
  handleEvent: function(evt) {      // 第一引数にイベントオブジェクトが渡される
    var tgt = <b>uu.event.target</b>(evt); // イベントが発生した要素は、tgt.target で取得可能
    <b>uu.event.stop</b>(evt);             // イベントの伝播とデフォルト動作を抑止
    var mpos = uu.event.mousePos(evt); // クリック時のマウス座標を取得
    uu.id("result").innerText = uu.sprintf("CLICK: x:[%d], y:[%d]", mpos.x, mpos.y);
  }
};
var my = new MyClass(uu.id("clicktarget"));
      </pre>
      <p>以下のようにすることでグローバルネームスペース(windowオブジェクト)に、作成したイベントハンドラを指定することもできます。</p>
      <a href="demo/document/uu.event.handler2.htm" class="run">Run</a>
      <pre class="eg">
<b>window.myHandleEvent</b> = function(evt) { // この場合のメソッド名は "handleEvent" 以外でもOK
  uu.log("click");
  var tgt = uu.event.target(evt);
  uu.log(tgt.target.id);
};
<b>uu.event.set</b>(<b>window.myHandleEvent</b>, document, "click");
      </pre>
  </dd>


<!-- -->
  <dt><a name="uu.event.target">uu.event.target</a> - Detect event target - イベント発生源を取得</dt>
  <dd><p>uu.event.target(<i>evt</i>) は イベント発生源に関する情報を取得します。</p>
      <pre>
 @param event evt - イベントオブジェクトを指定します。
 @return Hash     - Hash({ target, currentTarget, relatedTarget }) を返します。
      </pre>
        <dl>
          <dt>target</dt><dd>イベント発生源のノード</dd>
          <dt>currentTarget</dt><dd>現在処理中のノード(キャプチャリング/バブリング中)のカレントノード(Firefox, Safari, Opera)</dd>
          <dt>relatedTarget</dt><dd>関連性のあるターゲット(hover用の情報)<br />
              targetでmouseoverが発生した場合は、relatedTargetにmouseoutした要素が格納される。<br />
              targetでmouseoutが発生した場合は、relatedTargetにmouseoverした要素が格納される。</dd>
        </dl>
  </dd>


<!-- -->
  <dt><a name="uu.event.set">uu.event.set</a> - Add event handler - イベントハンドラを設定</dt>
  <dd><p>uu.event.set(<i>me</i>, <i>elm</i>, <i>type</i>, <i>capture</i> = false) はイベントを設定します。</p>
      <p><i>elm</i>に、同じパラメタ(<i>type</i>, <i>me</i>, <i>capture</i>)でイベントを二重登録しようとしても失敗します(何もおこりません)。</p>
      <pre>
 @param Function/this me   - イベント成立時にコールバックする関数
                             または<a href="#uu.event.closure">uu.event.closure</a>の戻り値を指定します。
 @param Element  elm       - イベントを設定する要素を指定します。
 @param Taxing   type      - イベントタイプを指定します。
 @param Boolean  [capture] - イベントをキャプチャーする場合はtrueを指定します。
                             通常のイベントを登録する場合はfalseを指定します。
      </pre>
  </dd>



<!-- -->
  <dt><a name="uu.event.unset">uu.event.unset</a> - Remove event handler - イベントハンドラを解除</dt>
  <dd><p>uu.event.unset(<i>me</i>, <i>elm</i>, <i>type</i>, <i>capture</i> = false) はイベントを解除します。
      引数は、<a href="#uu.event.set">uu.event.set</a>でイベントを登録する際に指定したものとまったく同じものを指定します。</p>
      <pre>
 @param Function/this me   - イベント成立時にコールバックする関数
                             または<a href="#uu.event.closure">uu.event.closure</a>の戻り値を指定します。
 @param Taxing   type      - イベントタイプを指定します。
 @param Function fn        - イベント成立時にコールバックする関数を指定します。
                             通常は、uu.event.handler の戻り値を指定します。
 @param Boolean  [capture] - イベントをキャプチャーする場合はtrueを指定します。
                             通常のイベントを解除する場合はfalseを指定します。
      </pre>
  </dd>

<!-- -->
  <dt><a name="uu.event.toggle">uu.event.toggle</a> - Toggle event handler - イベントハンドラを設定または解除</dt>
  <dd><p>uu.event.toggle(<i>me</i>, <i>elm</i>, <i>type</i>, <i>capture</i> = false) はイベントを設定または解除します。</p>
      <p>既に登録されているイベントを指定すると解除、未登録なら登録します。</p>
      <p>指定可能な引数は <a href="#uu.event.set">uu.event.set</a>, <a href="#uu.event.unset">uu.event.unset</a> と同じです。</p>

      <p>以下はイベントのset/unsetを効率的に行うドラッグandドロップ処理の実装例です。</p>
      <a href="demo/document/uu.event.toggle.htm" class="run">Run</a> | <a href="http://d.hatena.ne.jp/uupaa/20080713">uupaaの開発日記</a>

      <pre class="eg">
var elm = uu.id("drag");
uu.event.set(elm, "mousedown", F);
uu.element.toAbsolute(elm);
function F(evt) {
  uu.event.stop(evt);
  switch (uu.event.toType(evt)) {
  case "mousemove": uu.module.drag.move(elm, evt); break;
  case "mousedown": uu.module.drag.save(elm, evt);
  case "mouseup":   <b>uu.event.toggle</b>(F, uu.ua.ie ? elm : document, "mousemove,mouseup", true);
  }
}
      </pre>
  </dd>

<!-- -->
  <dt><a name="uu.event.stop">uu.event.stop</a> - Execute stop-propagation and prevent-default - イベントの抑止</dt>
  <dd><p>uu.event.stop(<i>evt</i>, <i>cancel</i> = true) は
      イベントのバブルアップ(伝播)と、可能ならデフォルトの動作を抑止します。</p>
      <pre>
 @param event evt        - イベントオブジェクトを指定します。
 @param Boolean [cancel] - ブラウザが実装しているデフォルトの動作をキャンセルする場合にtrueを指定します。
                           キャンセルできない場合は無視されます。
      </pre>
  </dd>

<!-- -->
  <dt><a name="uu.event.toType">uu.event.toType</a> - Convert DOM Lv0 event type - DOM Lv0イベントタイプに変換</dt>
  <dd><p>uu.event.toType(<i>evt</i>) は DOMイベントタイプをDOM Level 0イベントタイプに変換します。</p>
      <pre>
 @param event evt - イベントオブジェクトを指定します。
 @return String   - 変換後のイベントタイプを返します。
      </pre>
      <table>
      <tr><th>Browser</th><th><i>evt</i>.type</th><th>Return</th></tr>
      <tr><td>Firefox2+</td><td>DOMMouseScroll</td><td>mousewheel</td></tr>
      <tr><td>IE6+</td><td>onlosecapture</td><td>mouseup</td></tr>
      </table>
  </dd>
<!-- -->
  <dt><a name="uu.event.toDOMType">uu.event.toDOMType</a> - Convert DOM event type - DOMイベントタイプに変換</dt>
  <dd><p>uu.event.toDOMType(<i>type</i>) は DOM Level 0イベントタイプをDOMイベントタイプに変換します。</p>
      <pre>
 @param String type - DOM Level 0イベントタイプを指定します。
 @return String     - 変換後のイベントタイプを返します。
      </pre>
      <table>
      <tr><th>Browser</th><th><i>type</i></th><th>Return</th></tr>
      <tr><td>Firefox2+</td><td>mousewheel</td><td>DOMMouseScroll</td></tr>
      </table>
  </dd>

<!-- -->
  <dt><a name="uu.event.keyState">uu.event.keyState</a> - Get key state - キーの状態を取得</dt>
  <dd><p>uu.event.keyState(<i>evt</i>) は キーの状態を取得します。</p>
    <dl>
      <dt>alt</dt><dd>altキー押下でtrue</dd>
      <dt>shift</dt><dd>shiftキー押下でtrue</dd>
      <dt>ctrl</dt><dd>ctrlキー押下でtrue</dd>
      <dt>key</dt><dd>押下したキーコード</dd>
    </dl>
      <pre>
 @param event evt - イベントオブジェクトを指定します。
 @return Hash     - Hash( { alt, shift, ctrl, key } ) を返します
      </pre>
  </dd>

<!-- -->
  <dt><a name="uu.event.mousePos">uu.event.mousePos</a> - Get mouse position - マウス座標を取得</dt>
  <dd><p>uu.event.mousePos(<i>evt</i>) は マウス座標を取得します。</p>
      <dl>
        <dt>x</dt><dd>画面左上からのオフセット幅(スクロール量を含む)</dd>
        <dt>y</dt><dd>画面左上からのオフセット幅(スクロール量を含む)</dd>
        <dt>ox</dt><dd>画面左上からのオフセット幅(スクロール量を含まない)</dd>
        <dt>oy</dt><dd>画面左上からのオフセット幅(スクロール量を含まない)</dd>
        <dt>cx</dt><dd>最寄の要素の左上からの相対座標</dd>
        <dt>cy</dt><dd>最寄の要素の左上からの相対座標</dd>
      </dl>
      <pre>
 @param event evt - イベントオブジェクトを指定します。
 @return Hash     - Hash( { x, y, ox, oy, cx, cy } ) を返します
      </pre>
  </dd>

<!-- -->
  <dt><a name="uu.event.mouseState">uu.event.mouseState</a> - Get mouse click and wheel state - マウスクリック, ホイールの状態を取得</dt>
  <dd><p>uu.event.mouseState(<i>evt</i>) は マウスクリック, ホイールの状態を取得します。</p>
      <dl>
        <dt>x</dt><dd>画面左上からのオフセット幅(スクロール量を含む)</dd>
        <dt>y</dt><dd>画面左上からのオフセット幅(スクロール量を含む)</dd>
      </dl>
      <dl>
        <dt>left</dt><dd>左クリックでtrue</dd>
        <dt>mid</dt><dd>中クリックでtrue</dd>
        <dt>right</dt><dd>右クリックでtrue</dd>
        <dt>click</dt><dd>クリック数, シングルクリックで1, ダブルクリックで2, トリプルクリックで3</dd>
        <dt>wheel</dt><dd>マウスホイールを上に回転させると-1を、下に回転させると1を返します</dd>
      </dl>
      <pre>
 @param event evt - イベントオブジェクトを指定します。
 @return Hash     - Hash( { left, mid, right, click, wheel } ) を返します
      </pre>
  </dd>
</dl>





<hr />
<h2><a name="Ready">Ready</a></h2>
<p>機能が使用可能("U"なら使用不能)になったタイミングで関数をコールバックします。</p>
<table>
<tr><th>Expression</th><th>Function/State</th><th>Combination</th></tr>
<tr><td>uu.ready(<i>fn</i>, "D")</td><td><a href="./GLOSSARY.htm#DomReady">DomReady</a></td><td>　</td></tr>
<tr><td>uu.ready(<i>fn</i>, "W")</td><td><a href="./GLOSSARY.htm#WindowReady">WindowReady</a></td><td>　</td></tr>
<tr><td>uu.ready(<i>fn</i>, "C")</td><td><a href="./GLOSSARY.htm#CanvasReady">CanvasReady</a></td><td>　</td></tr>
<tr><td>uu.ready(<i>fn</i>, "DC")</td><td>DomReady + CanvasReady</td><td>DomReady かつ CanvasReady なら条件成立</td></tr>
<tr><td>uu.ready(<i>fn</i>, "WC")</td><td>WindowReady + CanvasReady</td><td>WindowReady かつ CanvasReady なら条件成立</td></tr>
<tr><td>uu.ready(<i>fn</i>, "U")</td><td><a href="./GLOSSARY.htm#WindowUnready">WindowUnready</a></td><td>　</td></tr>
<tr><td>uu.ready(<i>fn</i>, "A")</td><td><a href="./GLOSSARY.htm#AjaxReady">AjaxReady</a></td><td>　</td></tr>
<tr><td>uu.ready(<i>fn</i>, "J")</td><td><a href="./GLOSSARY.htm#JSONPReady">JSONPReady</a></td><td>　</td></tr>
</table>
<p>類似機能に、<a href="./MODULE.htm#uu.module.imageset">uu.module.imageset</a> が提供する <a href="./GLOSSARY.htm#ImageReady">ImageReady</a> があります。
<hr />
<dl>
<!-- -->
  <dt><a name="uu.ready">uu.ready</a> - Ready event handler - Readyイベントハンドラを設定</dt>
  <dd><p>uu.ready(<i>fn</i>, <i>id</i> = "D") は <i>id</i>で指定した機能が使用可能な状態(Ready状態)になると呼ばれる関数(<i>fn</i>)を登録します。
      <br />状態成立後に呼ばれた場合は、即座に <i>fn</i> をコールバックします。</p>
      <pre>
 @param Function fn - コールバック関数を指定します。
 @param String [id] - 機能をidで指定します。指定可能なidは、"D", "W", "C", "DC", "WC", "U", "A", "J" です。
      </pre>
  </dd>
<!-- -->
  <dt><a name="uu.ready.already">uu.ready.already</a> - Ready state - Ready状態の確認</dt>
  <dd><p>uu.ready.already(<i>id</i> = "D") は <i>id</i>で指定した機能が既に使用可能ならtrueを返します。</p>
      <pre>
 @param String [id] - 機能をidで指定します。指定可能なidは、"D", "W", "C", "DC", "WC", "U", "A", "J" です。
 @return Boolean - 使用可能ならtrueを返します。
      </pre>
  </dd>
</dl>






<hr />
<h2><a name="Request">Request</a></h2>
<p>Webサーバにリクエストを発行します。
   同期リクエストはサーバからレスポンスがあるまで、JavaScriptの動作が停止します。</p>
<table>
<tr><th>Function</th><th>クロスドメイン<br />(Cross Domain)</th><th>リクエスト<br />(Request)</th><th>メソッド<br />(Method)</th><th>タイムアウト<br />(Timeout)</th><th>独自ヘッダの追加<br />(Add Original Headers)</th><th>更新チェック<br />(Update check)</th></tr>
<tr><td><a href="#uu.ajax">uu.ajax</a></td><td>×</td><td>Async</td><td>GET, POST</td><td>○</td><td>○</td><td>×</td></tr>
<tr><td><a href="#uu.ajax.loadIfMod">uu.ajax.loadIfMod</a></td><td>×</td><td>Async</td><td>GET</td><td>○</td><td>○</td><td>○</td></tr>
<tr><td><a href="#uu.ajax.loadSync">uu.ajax.loadSync</a></td><td>×</td><td>Sync</td><td>GET, POST</td><td>×</td><td>○</td><td>×</td></tr>
<tr><td><a href="#uu.jsonp">uu.jsonp</a></td><td>○</td><td>Async</td><td>GET</td><td>○</td><td>×</td><td>×</td></tr>
<!--
<tr><td><a href="#uu.script.load">uu.script.load</a></td><td>×</td><td>Async</td><td>GET</td><td>○</td><td>○</td><td>×</td></tr>
 -->
<tr><td><a href="./MODULE.htm#uu.module.image.load">uu.module.image.load</a></td><td>○</td><td>Async</td><td>GET</td><td>○</td><td>×</td><td>×</td></tr>
</table>
<p>タイムアウト機能を使用するには、uu.request.timeout に10000(10秒)～50000(50秒)を指定します。単位はmsです。0を指定するとタイムアウトしません。デフォルトは10000(10秒)です。</p>
<p>通信ヘッダを追加するには、uu.request.header に要素を追加します。</p>

<table>
<tr><th>Name</th><th>Value Type</th><th>Default value</th><th>Note</th></tr>
<tr><td><a name="uu.request.callbackFilter">uu.request.callbackFilter</a></td><td>Number</td><td>0x2</td><td>コールバックフィルタのデフォルト値</td></tr>
<tr><td><a name="uu.request.timeout">uu.request.timeout</a></td><td>Number (unit: ms)</td><td>10000</td><td>タイムアウト時間(単位:ms)<br />(0でタイムアウトしない)</td></tr>
<tr><td><a name="uu.request.header">uu.request.header</a></td><td>Hash</td><td>{ "X-Requested-With": "XMLHttpRequest" }</td><td>リクエストヘッダ</td></tr>
<tr><td><a name="uu.request.jsonpFn">uu.request.jsonpFn</a></td><td>String</td><td>"callback"</td><td>JSONPコールバック関数名</td></tr>
</table>

<hr />
<dl>

<!-- -->
  <dt><a name="uu.ajax">uu.ajax</a> - Ajax async request - 非同期リクエスト</dt>
  <dd><p>uu.ajax(<i>url</i>, <i>fn</i> = undefined, <i>data</i> = undefined) は、Webサーバと非同期に通信を行います。</p>
      <p><i>url</i>にはリクエストURLを、<i>fn</i>には各ステップ毎に<a href="#uu.request.callback">コールバック</a>する関数を、
         データを送信する場合は <i>data</i> に encodeURIComponent でエンコード済みの文字列を指定します。</p>
      <a href="demo/document/uu.ajax.htm" class="run">Run</a>
      <pre>
 @param String   url    - リクエストURLを指定します。
 @param Function [fn]   - 各ステップ毎にコールバックする関数を指定します。デフォルトはundefinedです。fnを省略するとコールバックしません。
 @param String   [data] - データを送信する場合に、encodeURIComponentでエンコード済みの文字列を指定します。
                          dataを指定するとPOSTメソッドを使用し、指定しないとGETメソッドを使用します。
                          デフォルトはundefinedです。
 @param Number   [callbackFilter] - <a href="#uu.request.callback">コールバック</a>するステップを限定する場合に指定します。
                          省略すると、uu.request.callbackFilter の値を使用します。
      </pre>
  </dd>
<!-- -->
  <dt><a name="uu.ajax.loadIfMod">uu.ajax.loadIfMod</a> - Ajax async request with new-arrival check - 更新チェック付き非同期リクエスト</dt>
  <dd><p>uu.ajax.loadIfMod(<i>url</i>, <i>fn</i> = undefined) は、Webサーバと非同期に通信を行います。</p>
      <p>前回通信を行った際のURLと、その更新日時を保存しており、データが更新されていない場合は status に 304 を返します。</p>
      <pre>
 @param String   url - リクエストURLを指定します。
 @param Function [fn] - 各ステップ毎にコールバックする関数を指定します。デフォルトはundefinedです。fnを省略するとコールバックしません。
 @param Number   [callbackFilter] - <a href="#uu.request.callback">コールバック</a>するステップを限定する場合に指定します。
                          省略すると、uu.request.callbackFilter の値を使用します。
      </pre>
  </dd>
<!-- -->
  <dt><a name="uu.ajax.loadSync">uu.ajax.loadSync</a> - Ajax sync request - 同期通信</dt>
  <dd><p>uu.ajax.loadSync(<i>url</i>, <i>fn</i> = undefined, <i>data</i> = undefined) は、Webサーバと同期通信を行います。</p>
      <p>同期通信はサーバからのレスポンスがあるまで待機し続けます(ブラウザが固まったように見えます)。</p>
      <pre>
 @param String   url    - リクエストURLを指定します。
 @param Function [fn]   - 各ステップ毎にコールバックする関数を指定します。デフォルトはundefinedです。fnを省略するとコールバックしません。
 @param String   [data] - データを送信する場合に、encodeURIComponentでエンコード済みの文字列を指定します。
                          dataを指定するとPOSTメソッドを使用し、指定しないとGETメソッドを使用します。
                          デフォルトはundefinedです。
 @param Number   [callbackFilter] - <a href="#uu.request.callback">コールバック</a>するステップを限定する場合に指定します。
                          省略すると、uu.request.callbackFilter の値を使用します。
      </pre>
  </dd>
<!-- -->
  <dt><a name="uu.jsonp">uu.jsonp</a> - JSONP async request - 非同期リクエスト</dt>
  <dd><p>uu.jsonp(<i>url</i>, <i>fn</i> = undefined) は、Webサーバと非同期に通信を行います。</p>
      <p><i>url</i>にはリクエストURLを、<i>fn</i>には
          各ステップ毎に<a href="#uu.request.callback">コールバック</a>する関数を指定します。</p>
      <pre>
 @param String   url  - リクエストURLを指定します。
 @param Function [fn] - 各stepで呼び出す関数を指定します。デフォルトはundefinedです。fnを省略するとコールバックしません。
 @param Number   [callbackFilter] - <a href="#uu.request.callback">コールバック</a>するステップを限定する場合に指定します。
                          省略すると、uu.request.callbackFilter の値を使用します。
      </pre>
  </dd>

<!-- -->
  <dt><a name="uu.script.create">uu.script.create</a> -  Create script element - script要素の生成</dt>
  <dd><p>uu.script.create(<i>id</i> = "") は script要素を生成し返します。</p>
      <p>返されるscript要素は、&lt;script type="text/javascript" charset="utf-8" id="..."&gt;&lt;/script&gt; と等価です。</p>
      <pre>
 @param String [id] - id属性の値を指定します。デフォルトは空文字列( "" ) です。
 @return Element    - script要素を返します。
      </pre>
  </dd>

<!-- -->
  <dt><a name="uu.script.create">uu.script.exec</a> -  Evel Script - JavaScript文字列をグローバルネームスペースで評価</dt>
  <dd><p>uu.script.exec(<i>code</i>) は JavaScriptコードを評価(eval)します。</p>
      <p>戻り値はありません。</p>
      <pre>
 @param String code - JavaScriptコードを指定します。
      </pre>
  </dd>


<!-- -->
<!--
  <dt><a name="uu.script.load">uu.script.load</a> - スクリプトの読み込み - Load Script</dt>
  <dd><p>uu.script.load(type = "text/x-uu-form", fn = undefined, callbackFilter = undefined) は、
      &lt;script type="<i>type</i>"&gt;&lt;/script&gt;や&lt;script type="<i>type</i>" src="..."&gt;&lt;/script&gt;からJavaScriptを取り込みます。</p>
      <p><i>type</i>には、script要素に通常指定しない文字列(つまり"text/javascript"以外の文字列)を指定します(例: "text/x-uu-form" や "text/x-my-script"など)。
         <i>fn</i>には各ステップ毎に<a href="#uu.request.callback">コールバック</a>する関数を指定します。</p>
      <pre>
 @param String [type] - script要素のtype属性を指定します。デフォルトは "text/x-uu-form"です。
 @param Function [fn] - 1つのscript要素の読み込みが終わるたびに呼ばれる関数を指定します。デフォルトはundefinedです。
                        fn(uid, step, response, status, url, async, element)の形でコールバックします。
                        responseにはJavaScriptのオブジェクトが格納されます。
                        elementには、script要素が格納されます。
                        src属性で指定されたファイルを外部からロードする場合は、uu.ajax関数を使用します。
      </pre>
      <a href="demo/document/uu.script.load.htm" class="run">Run</a>
      <pre class="eg">
&lt;script type="text/x-uu-form"&gt;
{
  id: "unknown",
  data: { type: "checkbox", value="hoge", checked="checked", label: "check here", align: "left" }
}
&lt;/script&gt;
&lt;script type="text/x-uu-form" src="uu.script.load.txt"&gt;&lt;/script&gt;

&lt;script&gt;
  <b>uu.script.load</b>("text/x-uu-form", function(uid, step, response, status, url, async, element) {
    if (step === 2) {
      uu.log("OK", response); // "OK", {id: "unknown", data: {type: "checkbox", value: "hoge", checked: "checked", label: "check here", align: "left"}}
    } else {
      uu.log("NG"); // srcに存在しないファイルが指定された
    }
  }, 6); // OK + NG
&lt;/script&gt;
      </pre>
  </dd>
-->
<!-- -->
  <dt><a name="uu.request.callback">CallBack</a> - コールバック</dt>
  <dd><p>
          <a href="#uu.ajax">uu.ajax</a>, 
          <a href="#uu.ajax.loadIfMod">uu.ajax.loadIfMod</a>, 
          <a href="#uu.ajax.loadSync">uu.ajax.loadSync</a>, 
          <a href="#uu.jsonp, uu.request.script">uu.jsonp</a>, uu.request.script, 
          <a href="./MODULE.htm#uu.module.image.load">uu.module.image.load</a>
          の引数で指定した <i>fn</i> は、
         通信/読み込み の各段階で <i>fn</i>(<i>uid</i>, <i>step</i>, <i>response</i>, <i>status</i>, <i>url</i>, <i>async</i>, <i>more arg, ...</i>) の形で
         コールバックされます。</p>
      <p><i>uid</i>にはユニークなID(文字列)が、
         <i>response</i>にはレスポンステキストが、
         <i>status</i>にはWebサーバが返すステータスコード または uuppa.jsが設定したステータスコードが格納されます。
         <i>async</i>は非同期通信で1, 同期通信で0になります。</p>
      <p><i>more arg, ...</i>が渡される場合もあります。</p>
      <p><a href="./MODULE.htm#uu.module.image.load">uu.module.image.load</a> では、response に text ではなく Image Object が渡されます。</p>
      <table>
      <tr><th>状況                      </th><th>uid</th><th>step</th><th>response</th><th>status</th><th>url</th><th>async</th></tr>
      <tr><td>リクエスト開始 - REQUEST  </td><td>ユニークID</td><td>1   </td><td>""      </td><td>0</td><td>request URL</td><td>1 or 0</td></tr>
      <tr><td>成功 - OK                 </td><td>ユニークID</td><td>2   </td><td><i>text</i><br />or Image Object
                                                                      </td><td>200</td><td>request URL</td><td>1 or 0</td></tr>
      <tr><td>失敗 - NG                 </td><td>ユニークID</td><td>4   </td><td>""      </td><td>200以外の数値</td><td>request URL</td><td>1 or 0</td></tr>
      </table>
      <p>引数callbackFilterに1～7の値を指定すると、コールバックするstepを限定することも可能です。<br />OKとNGだけを知りたい場合は、
         callbackFilter に 6 を設定します( 6 = 2 + 4 )。</p>
      <p>引数callbackFilterを指定しないと、<a href="#uu.request.callbackFilter">uu.request.callbackFilter</a> の値を使用します。<br />
         uu.request.callbackFilterのデフォルトは 2 です。</p>
  </dd>
</dl>









<hr />
<h2><a name="Utility">Utility</a></h2>
<p>型の相互変換や、検索, 使用頻度の高い文字列操作関数などを提供します。</p>
<hr />
<dl>

<!-- -->
  <dt><a name="uu.uid">uu.uid</a> - Generate unique ID - ユニークIDの生成</dt>
  <dd><p>uu.uid(<i>prefix</i> = "uniqueID") は <i>prefix</i> + ユニークな数字(通し番号) から構成される文字列を返します。</p>
    <pre>
 @param String [prefix] - プリフィクスを指定します。デフォルトは"uniqueID"です。
 @return String         - プリフィクス + ユニークナンバー で構成される文字列を返します。
                          例: "uniqueID1", "uniqueID2"
    </pre>
  </dd>

<!-- -->
  <dt><a name="uu.sprintf">uu.sprintf</a></dt>
  <dd><p>uu.sprintf(<i>format</i>, <i>...</i>) は ANSI C標準のsprintf関数に、<a href="http://jp2.php.net/manual/ja/function.sprintf.php">PHPのi18n対応機能</a>を追加したものです。</p>
    <pre>
 @param String  format - フォーマット文字列を指定します。
 @param Mix     [...]  - sprintfに与える引数を指定します。引数は可変個です。
 @return String        - 整形済みの文字列を返します。
    </pre>
    <p><a href="demo/document/uu.sprintf.htm" class="run">Run</a></p>
    <p><i>format</i>(書式)は、%[<i>arg-index</i>$][<i>flag</i>][<i>width</i>][.<i>precision</i>][<i>size</i>]<i>type</i> となります。</p>
    <table>
    <tr><th>書式指定フィールド</th><th>指定</th><th>機能</th><th>例</th></tr>
    <tr><td><i>arg-index</i></td><td>数値</td><td>数値とダラー("$")により引数を0から始まる番号で呼び出すことができます。</td><td></td></tr>
    <tr><td><i>flag</i></td><td>#</td><td>typeがo,x,Xなら文字列の先頭に"0","0x","0X"を追加します。</td><td></td></tr>
    <tr><td><i>flag</i></td><td>0</td><td>typeがd,u,fならwidthで指定した幅に達するまで
                                          <br />文字列の先頭を"0"で埋めます(zero padding)。</td><td></td></tr>
    <tr><td><i>width</i></td><td>数値</td><td>最低限表示する桁数を指定できます。0で非表示になります。
                                              <br />幅を指定すると右寄せ(align right)で出力されるため、
                                              <br />数値や文字列の桁あわせに利用できます。
                                              <br />iduoxXfsで有効です。</td><td>uu.sprintf("%2d", 2) → " 2"</td></tr>
    <tr><td><i>precision</i></td><td>数値</td><td>小数点以下の桁数や文字列の長さを指定できます。<br />
                                           typeがfなら小数点以下の桁数を指定します。<br />
                                           浮動小数点値は丸められる場合があります。0で小数点以下は非表示になります。<br />
                                           typeがsなら文字列の長さを指定します。<br />
                                           指定した長さ以上の文字は切り捨てられます。0で文字列全体が非表示になります。</td><td></td></tr>
    <tr><td><i>type</i></td><td>d</td><td>符号付き10進数値(signed decimal number)として出力します。</td><td></td></tr>
    <tr><td><i>type</i></td><td>u</td><td>符号無し10進数値(unsigned decimal number)として出力します。</td><td></td></tr>
    <tr><td><i>type</i></td><td>o</td><td>符号無し8進数値(unsigned octet number)として出力します。</td><td></td></tr>
    <tr><td><i>type</i></td><td>x</td><td>符号無し16進数値[小文字](unsigned hex number[lower case])として出力します。</td><td></td></tr>
    <tr><td><i>type</i></td><td>X</td><td>符号無し16進数値[大文字](unsigned hex number[upper case])として出力します。</td><td></td></tr>
    <tr><td><i>type</i></td><td>f</td><td>浮動小数点([-]dddd.dddd)(floating-point number)として出力します。</td><td></td></tr>
    <tr><td><i>type</i></td><td>c</td><td>文字の数値表現(the character with that ASCII value)として出力します。</td><td></td></tr>
    <tr><td><i>type</i></td><td>s</td><td>文字列(string)として出力します。</td><td></td></tr>
    <tr><td><i>type</i></td><td>%</td><td>パーセント記号("%")そのものを出力します。</td><td></td></tr>
    </table>
    <p>以下の書式は使用できません。</p>
    <table>
    <tr><th>書式指定フィールド</th><th>指定</th><th>機能</th></tr>
    <tr><td><i>flag</i></td><td>-</td><td>左詰で出力します。</td></tr>
    <tr><td><i>width</i></td><td>*</td><td>引数で幅を指定します。</td></tr>
    <tr><td><i>precision</i></td><td>*</td><td>引数で精度を指定します。</td></tr>
    <tr><td><i>size</i></td><td>l</td><td>long型に変更します。</td></tr>
    <tr><td><i>size</i></td><td>数値</td><td>数値で型の精度を指定します。</td></tr>
    <tr><td><i>type</i></td><td>i</td><td>符号付き8進数値(signed octet number)として出力します。</td></tr>
    <tr><td><i>type</i></td><td>e</td><td>浮動小数点([-]d.dddde[+/-]dddd)として出力します。</td></tr>
    <tr><td><i>type</i></td><td>g</td><td>浮動小数点("f","e"の結果でより短い方)として出力します。</td></tr>
    <tr><td><i>type</i></td><td>E</td><td>浮動小数点([-]d.ddddE[+/-]dddd)として出力します。</td></tr>
    <tr><td><i>type</i></td><td>G</td><td>浮動小数点("f","E"の結果でより短い方)として出力します。</td></tr>
    <tr><td><i>type</i></td><td>n</td><td>出力済みの文字数を出力します。</td></tr>
    <tr><td><i>type</i></td><td>p</td><td>ポインタとして処理します。</td></tr>
    </table>
  </dd>

<!-- -->
  <dt><a name="uu.trim">uu.trim</a> - Trim both(left and right) - 文字列の両端の空白文字を除去</dt>
  <dd><p>uu.trim(<i>str</i>) は 文字列(<i>str</i>)の左右から空白文字を除去します。
      空白文字には、NULL("\0"),空白(" "),タブ("\t"),改行("\n"),垂直タブ("\v"),復帰("\d")が含まれます。</p>
    <pre>
 @param String str - 文字列を指定します。
 @return String - トリム後の文字列を返します。
    </pre>
    <pre class="eg">
<b>uu.trim</b>(" hoge "); // "hoge"
    </pre>
  </dd>


<!-- -->
  <dt><a name="uu.notax">uu.notax</a> - Receive JointedString, StringArray and String, return an Array - 結合文字列, 文字列の配列, 文字列を受け取り、配列を返す</dt>
  <dd><p>uu.notax(<i>tax</i>, <i>param</i> = { sep: ",", fn: undefined, trim: true }) は
      <a href="./GLOSSARY.htm#TypeTaxing">Taxing型</a>の変数をパースし、各要素を(もし指定されていれば)<i>fn</i>で評価したArrayを返します。</p>
    <pre>
 @param Taxing    tax           - セパレータで区切られた文字列,文字列のArray または 文字列を指定します。
 @param Hash      [param]       - パラメタを指定します。
 @param String    [param.sep]   - セパレータを指定します。デフォルトはカンマ(",")です。
 @param Function  [param.fn]    - 各要素を評価する関数を指定します。デフォルトはundefinedです。
 @param Boolean   [param.trim]  - カンマ結合文字列の各要素の左右の空白文字をトリムする場合はtrueを指定します。デフォルトはtrueです。
                                  taxが文字列や、Arrayで指定されている場合はトリムしません。
 @return StringArray            - taxが結合文字列(" a , b ")なら、各要素をセパレタで分割、左右の空白をトリムし StringArray( [ "a", "b" ]) を返します。
                                  taxが文字列("ab")なら、taxを唯一の要素とする StringArray( [ "ab" ] ) を返します。
                                  taxがStringArray( [ "a", "b" ] )ならtaxをそのまま返します。
 @throws TypeError  "uu.notax(tax) bad arg"  引数が文字列でもArrayでもない

    </pre>
    <pre class="eg">
function toLower(str) { return str.toLowerCase(); }
function toUpper(str) { return str.toUpperCase(); }
var rv = <b>uu.notax</b>("a, b,C,d ", { fn: toLower });
uu.log(rv); // ["a", "b", "c", "d"]

var rv = <b>uu.notax</b>(["a", "b", "c", "d"], { fn: toUpper });
uu.log(rv); // ["A", "B", "C", "D"]

var rv = <b>uu.notax</b>("abcd");
uu.log(rv); // ["abcd"]

var rv = <b>uu.notax</b>("html/body/div[1]", { sep: "/" });
uu.log(rv); // ["html", "body", "div[1]"]
    </pre>
  </dd>

<!-- -->
  <dt><a name="uu.toPair">uu.toPair</a> - Make Hash( { key: value } ) from key and value - key, value から Hash( { key: value } )を生成</dt>
  <dd><p>uu.toPair(<i>key</i>, <i>value</i>) は Hash({ <i>key</i>: <i>value</i> })を返します。</p>
    <pre>
 @param String/Number/Element key - Key(Index)を指定します。
 @param Mix value                 - Value(値)を指定します。
 @return Hash                     - Hash( { key: value } )を返します。
    </pre>
    <pre class="eg">
uu.log(<b>uu.toPair</b>("key", "value")); // { key: "value" }
    </pre>
  </dd>

<!-- -->
  <dt><a name="uu.toHash">uu.toHash</a> - Make Hash from Array and FakeArray - 配列,擬似配列をHash化</dt>
  <dd><p>uu.toHash(<i>ary</i>) は <i>ary</i>をHashに変換します。</p>
      <p>変換するのは数値indexの要素のみで、文字列indexと関数オブジェクト(および"length"プロパティ)は無視します。</p>
      <p>重複する数値indexは1つに纏められます。</p>
    <pre>
 @param Array ary - Hash化するArrayを指定します。
 @return Hash     - Hash化したArrayを返します。
    </pre>
    <a href="demo/document/uu.toHash.htm" class="run">Run</a>
    <pre class="eg">
var ary = [undefined, null, 1, 1, "hoge", function(){} ];
ary["hash_index"] = "lost value";
var b = <b>uu.toHash</b>(ary);
uu.log(b); // { undefined: undefined, null: null, 1: 1, hoge: "hoge" }
    </pre>
  </dd>

<!-- -->
  <dt><a name="uu.toArray">uu.toArray</a> - Make Array from FakeArray - 擬似配列を配列化</dt>
  <dd><p>uu.toArray(<i>fake</i>, <i>idx</i> = 0) は <a href="./GLOSSARY.htm#FakeArray">FakeArray</a>(<i>fake</i>)の <i>idx</i> 番目以降を、Array化します。</p>
      <p>この関数はFakeArray専用です。HashやオブジェクトのArray化には、
         <a href="#uu.indexes">uu.indexes</a> や <a href="#uu.values">uu.values</a> を使用してください。</p>
    <pre>
 @param FakeArray fake - FakeArrayを指定します。
 @param Number [idx]   - 切り出し開始位置を指定します。デフォルトは0です。
                         FakeArrayの長さ以上の値を指定すると、空のArrayを返します。
 @return Array         - fakeがnullやlengthプロパティを持たないHashなら空のArray([])を返します。
                         fakeがlengthプロパティを持つFakeArrayならArray化したものを返します。
 @see <a href="http://d.hatena.ne.jp/uupaa/20080602">uupaaの開発日記</a>
    </pre>
    <a href="demo/document/uu.toArray.htm" class="run">Run</a>
    <pre class="eg">
<b>uu.toArray</b>(document.getElementsByTagName("*")).forEach(function(v) {
  uu.log(v.tagName); //  "HTML" "HEAD" "TITLE" "SCRIPT" "SCRIPT" "META" "STYLE" "BODY" "A" "A" "SCRIPT" "PRE"
});
    </pre>
  </dd>

<!-- -->
  <dt><a name="uu.indexes">uu.indexes</a> - Enumerate the index of the Hash/Array/FakeArray and return an Array - Hash/配列/擬似配列のindexを列挙し配列を返す</dt>
  <dd><p>uu.indexes(<i>mix</i>) は
      <i>mix</i> の Index のみを列挙し Array を返します。</p>
      <p><i>mix</i> が Array なら、数字Index のみを列挙し Array を返します。<br />
      <i>mix</i> が Hash なら、文字Index と数字Index を列挙し Array を返します。</p>
    <pre>
 @param Hash/Array/FakeArray mix - Hash/Array/FakeArrayを指定します。
 @return Array                   - 要素の値ではなくindexを列挙したArrayを返します。有効な要素がなければ、空のArray([])を返します。
    </pre>
    <pre class="eg">
var array = [74, 50, 50], hash = { a: 74, b: 50, c: 50 };
array["hash_index"] = "hash";
hash[0] = "hash";
delete array[0];
<b>uu.indexes</b>(array); // [undefined, 1, 2]
<b>uu.indexes</b>(hash); // ["a", "b", "c", 0]
    </pre>
  </dd>
<!-- -->
  <dt><a name="uu.values">uu.values</a> - Enumerate the value of the Hash/Array/FakeArray and return an Array - Hash/配列/擬似配列の値を列挙し配列を返す</dt>
  <dd><p>uu.values(<i>mix</i>) は
      <i>mix</i> の値のみを列挙し Array を返します。</p>
      <p><i>mix</i> が Array なら、数字Index の値のみを列挙しArray を返します。<br />
      <i>mix</i> が Hash なら、文字Index と数字Index の値を列挙しArray を返します。</p>
    <pre>
 @param Hash/Array/FakeArray mix - Hash/Array/FakeArrayを指定します。
 @return Array                   - 要素の値だけを列挙しArrayを返します。有効な要素がなければ、空のArray([])を返します。
    </pre>
    <pre class="eg">
var array = [74, 50, 50], hash = { a: 74, b: 50, c: 50 };
array["hash_index"] = "hash";
hash[0] = "hash";
delete array[0];
<b>uu.values</b>(array); // [50, 50]
<b>uu.values</b>(hash); // [74, 50, 50, "hash"]
    </pre>
  </dd>

<!-- -->
  <dt><a name="uu.converse">uu.converse</a> - Return Hash which replaced value with key of Hash - Hashのkeyとvalueを入れ替えたHashを返す</dt>
  <dd><p>uu.converse(<i>hash</i>) は <i>hash</i>のIndexと値を入れ替えたHashを生成し返します。</p>
    <pre>
 @param Hash hash - Hashを指定します。
 @return Hash     - Indexと値を入れ替えたHashを返します。
    </pre>
    <pre class="eg">
var hash = { a: 1, b: 2, c: 3 };
<b>uu.converse</b>(hash); // { 1: "a", 2: "b", 3: "c" }
    </pre>
  </dd>

<!-- -->
  <dt><a name="uu.size">uu.size</a> - Length of the Hash/Array/FakeArray - Hash/配列/擬似配列の要素数を返す</dt>
  <dd><p>uu.size(<i>mix</i>) は <i>mix</i>の要素数を返します。</p>
    <pre>
 @param Hash/Array/FakeArray mix - Hash/Array/FakeArrayを指定します。
 @return Number - 要素数を返します。有効な要素がなければ0を返します。
    </pre>
  </dd>

<!-- -->
  <dt><a name="uu.first">uu.first</a> - First Element of the Hash/Array/FakeArray - Hash/配列/擬似配列の先頭の要素の値を取得</dt>
  <dd><p>uu.first(<i>mix</i>, <i>missHit</i> = undefined) は <i>mix</i>の先頭の要素を返します。</p>
    <pre>
 @param Hash/Array/FakeArray mix - Hash/Array/FakeArrayを指定します。
 @param Mix [missHit] - 有効な要素が存在しない場合に返す値を指定します。デフォルトはundefinedです。
 @return Mix - 先頭の要素の値を返します。有効な要素が無ければmissHitを返します。
    </pre>
  </dd>

<!-- -->
  <dt><a name="uu.last">uu.last</a> - Last Element of the Hash/Array/FakeArray - Hash/配列/擬似配列の最後の要素の値を取得</dt>
  <dd><p>uu.last(<i>mix</i>, <i>missHit</i> = undefined) は <i>mix</i>の最後の要素を返します。</p>
    <pre>
 @param Hash/Array/FakeArray mix - Hash/Array/FakeArrayを指定します。
 @param Mix [missHit] - 有効な要素が存在しない場合に返す値を指定します。デフォルトはundefinedです。
 @return Mix - 最後の要素の値を返します。有効な要素が無ければmissHitを返します。
    </pre>
  </dd>

<!-- -->
  <dt><a name="uu.slim">uu.slim</a> - Remove equivalent value - 配列から重複する値を除去した新しい配列を生成する</dt>
  <dd><p>uu.slim(<i>ary</i>) は <i>ary</i>から重複する値を除去した新しい配列を生成し返します。</p>
    <pre>
 @param Array ary - 配列を指定します。
 @return Array    - 重複した値を除去した新しい配列を返します。
    </pre>
  </dd>

<!-- -->
  <dt><a name="uu.diet">uu.diet</a> - Hash/Array memory compaction - Hash/Arrayのコンパクト化</dt>
  <dd><p>uu.diet(<i>mix</i>) は <i>mix</i>から値がundefined, nullの要素を削除したArrayを生成します。</p>
      <p><i>mix</i>がArrayなら、文字列Indexと、値がundefinedとnullの要素を削除した新しいArrayを返します。<br />
         <i>mix</i>がHashなら、文字列Indexと数字Indexの要素のうち、値がundefinedとnullの要素を削除した新しいHashを返します。</p>
    <pre>
 @param Hash/Array mix - Hash/Arrayを指定します。
 @return Hash/Array - 有効な要素のみを持つ新しいArrayかHashを返します。
                      有効な要素がなければ、空のArray([])かHash({})を返します。
    </pre>
    <pre class="eg">
var ary = [null, undefined, 3], hash = { a: null, b: undefined, c: 50 };
ary["hash_index"] = "hash";
hash[0] = "hash";
<b>uu.diet</b>(ary); // [3]
<b>uu.diet</b>(hash); // { c: 50, 0: "hash" }
    </pre>
  </dd>

<!-- -->
  <dt><a name="uu.inRect">uu.inRect</a> - Rectangular coordinate - 矩形内(rect)の座標(pos)ならtrue</dt>
  <dd><p>uu.inRect(<i>rect</i>, <i>pos</i>) は <i>pos</i>が<i>rect</i>内にある場合にtrueを返します。</p>
    <pre>
 @param RectHash rect - RectHash( { x, y, w, h } )を指定します。
 @param PosHash pos   - PosHash( { x, y } )を指定します。
 @return Boolean      - posがrectに含まれている場合にtrueを返します。
    </pre>
<pre style="line-height: 1">
rect━┯━━┓
  ┃  │    ┃
  ┠─pos   ┃
  ┃        ┃
  ┗━━━━┛
</pre>
  </dd>

  <dt><a name="uu.delay">uu.delay</a> - Lazy evaluation - 遅延評価</dt>
  <dd><p>uu.delay(<i>fn</i>, <i>delay</i> = 0)は、<i>delay</i>時間経過後に、<i>fn</i>を呼び出します。</p>
      <p>スタックのネストを浅くしたいケースや、スレッド間の依存関係を分断したいケースなどにも利用できます。</p>
      <p>引数を渡す場合はクロージャでラップしてください。</p>
      <pre>
 @param Function fn      - 遅延評価する関数を指定します。
 @param Number   [delay] - 遅延時間をms単位で指定します。デフォルトは0です。
 @return Number          - タイマーIDを返します。
      </pre>
      <pre>
// 遅延評価 + 引数
var hoge = "hoge";
<b>uu.delay</b>(function() {
  alert(hoge);
}, 1000); // 1秒後に"hoge"を表示する
      </pre>
  </dd>

<!-- -->
  <dt><a name="uu.time">uu.time</a> - Get current time - 現在時刻を取得</dt>
  <dd><p>uu.time() は 現在時刻をms単位の数値で返します。</p>
    <pre>
 @return Number - 現在時刻を数値(単位:ms)を返します。
    </pre>
  </dd>

<!-- -->
  <dt><a name="uu.isU">uu.isU</a> - is Undefined</dt>
  <dd><p>uu.isU(<i>mix</i>) は <i>mix</i> が Undefined 型なら true を返します。</p>
  </dd>
<!-- -->
  <dt><a name="uu.isA">uu.isA</a> - is Array</dt>
  <dd><p>uu.isA(<i>mix</i>) は <i>mix</i> が Array 型なら true を返します。</p>
  </dd>
<!-- -->
  <dt><a name="uu.isFA">uu.isFA</a> - is FakeArray</dt>
  <dd><p>uu.isFA(<i>mix</i>) は <i>mix</i> が <a href="./GLOSSARY.htm#FakeArray">FakeArray</a> なら true を返します。</p>
  </dd>
<!-- -->
  <dt><a name="uu.isE">uu.isE</a> - is Element(is Node)</dt>
  <dd><p>uu.isE(<i>mix</i>) は <i>mix</i> が <a href="./GLOSSARY.htm#Element">ノード (Element)</a> なら true を返します。</p>
  </dd>

<!-- -->
  <dt><a name="uu.isF">uu.isF</a> - is Function</dt>
  <dd><p>uu.isF(<i>mix</i>) は <i>mix</i> が Function 型なら true を返します。</p>
  </dd>
<!-- -->
  <dt><a name="uu.isN">uu.isN</a> - is Number</dt>
  <dd><p>uu.isN(<i>mix</i>) は <i>mix</i> が Number 型なら true を返します。</p>
  </dd>
<!-- -->
  <dt><a name="uu.isB">uu.isB</a> - is Boolean</dt>
  <dd><p>uu.isB(<i>mix</i>) は <i>mix</i> が Boolean 型なら true を返します。</p>
  </dd>
<!-- -->
  <dt><a name="uu.isS">uu.isS</a> - is String</dt>
  <dd><p>uu.isS(<i>mix</i>) は <i>mix</i> が String 型なら true を返します。</p>
  </dd>

<!-- -->
  <dt><a name="uu.die">uu.die</a> - Critical error handler</dt>
  <dd><p>uu.die(<i>type</i>, <i>p1</i>, <i>p2</i>) は 例外を生成します。</p>
  </dd>
<!-- -->
  <dt><a name="uu.no">uu.no</a> - Every return false</dt>
  <dd><p>uu.no() は 常に false を返します。</p>
  </dd>
<!-- -->
  <dt><a name="uu.echo">uu.echo</a>- Every return first argument</dt>
  <dd><p>uu.echo(<i>arg</i>) は <i>arg</i> を返します。</p>
  </dd>
<!-- -->
  <dt><a name="uu.mute">uu.mute</a> - Every return undefined</dt>
  <dd><p>uu.mute(<i>mix</i>) は何もしません。戻り値には undefined が返ります。</p>
  </dd>
</dl>



<hr />
<h2><a name="Log">Log</a></h2>
<p>Log出力をサポートします。</p>
<hr />
<dl>

<!-- -->
  <dt><a name="uu.log">uu.log</a></dt>
  <dd><p>uu.log(<i>fmt</i>, arg ... ) は ログを出力します。</p>
      <p>Firebugがインストールされている環境では console.logに出力し、
         <a href="./MODULE.htm#uu.module.log2">uu.module.log2</a>(devモジュール)が読み込まれている環境では 画面上のログレイヤーに出力します。</p>
    <pre>
 @param String/Mix [fmt] - 出力フォーマットを指定します。省略可能です。
                           省略すると、指定された引数を解析し、妥当な形で出力します。
    </pre>
    <p>以下のバリエーションがあります。詳細についてはFirebugのドキュメントを参照してください。</p>
    <ul>
      <li><a name="uu.log.debug">uu.log.debug</a></li>
      <li><a name="uu.log.error">uu.log.error</a></li>
      <li><a name="uu.log.warn">uu.log.warn</a></li>
      <li><a name="uu.log.info">uu.log.info</a></li>
      <li><a name="uu.log.dir">uu.log.dir</a></li>
      <li><a name="uu.log.clear">uu.log.clear</a></li>
    </ul>
  </dd>
</dl>


<hr />
<h2><a name="CrossBrowser">CrossBrowser</a></h2>
<p>クロスブラウザを実現します。</p>
<hr />
<dl>
<!-- -->
  <dt><a name="Array.indexOf">Array.indexOf</a>- Returns the first index at which a given element can be found in the array, or -1 if it is not present<br /> - 配列の先頭から値を検索し最初のindexを返す。無ければ-1を返す</dt>
  <dd><p>Array.prototype.indexOf(<i>value</i>, <i>index</i> = 0) は
         JavaScript 1.6準拠のメソッドで、
         Arrayの先頭から値を検索し最初のindexを返します。<br />該当する値が無ければ-1を返します。</p>
      <pre>
 @param Mix     value   - 検索する値を指定します。検索は===演算子で比較します。
 @param Number  [index] - 検索を開始するindexを指定します。負の値はArrayの末尾からのオフセットとみなします。デフォルトは0です。
 @return Number - 検索成功で0以上の値を返します。失敗で-1を返します。
 @see <a href="http://developer.mozilla.org/ja/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:indexOf">Array:indexOf</a> - Arrayの末尾から値を検索 - MDC
      </pre>
      <pre class="eg">
var rv = [0, 1, 1, 2];
rv["HashIndex"] = "HashIndex";
<b>rv.indexOf</b>(1);       // 1
<b>rv.indexOf</b>(1, -2);   // 2
<b>rv.indexOf</b>("1");     // -1
<b>rv.indexOf</b>("HashIndex");  // -1 見つからない
      </pre>
  </dd>
<!-- -->
  <dt><a name="Array.lastIndexOf">Array.lastIndexOf</a> - - Returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex<br /> - 配列の後方から値を検索し最初のindexを返す。無ければ-1を返す</dt>
  <dd><p>Array.prototype.lastIndexOf(<i>value</i>, <i>index</i> = 0) は
         JavaScript 1.6準拠のメソッドで、
         Arrayの後方から値を検索し最初のindexを返します。<br />該当する値が無ければ-1を返します。</p>
      <pre>
 @param Mix     value   - 検索する値を指定します。検索は===演算子で比較します。
 @param Number  [index] - 検索を開始するindexを指定します。負の値はArrayの末尾からのオフセットとみなします。デフォルトは0です。
 @return Number - 検索成功で0以上の値を返します。失敗で-1を返します。
 @see <a href="http://developer.mozilla.org/ja/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:lastIndexOf">Array:lastIndexOf</a> - Arrayの先頭から値を検索 - MDC
      </pre>
      <pre class="eg">
var rv = [0, 1, 1, 2];
rv["HashIndex"] = "HashIndex";
<b>rv.lastIndexOf</b>(1);       // 2
<b>rv.lastIndexOf</b>(1, -2);   // 2
<b>rv.lastIndexOf</b>("1")      // -1
<b>rv.lastIndexOf</b>("HashIndex");  // -1 見つからない
      </pre>
  </dd>

<!-- -->
  <dt><a name="HTMLElement.prototype.outerHTML">HTMLElement.prototype.outerHTML</a></dt>
  <dd><p>IEの独自実装である outerHTML を Firefox2+ でエミュレートします。</p>
  </dd>

<!-- -->
  <dt><a name="HTMLElement.prototype.innerText">HTMLElement.prototype.innerText</a></dt>
  <dd><p>IEの独自実装である innerText を Firefox2+ でエミュレートします。</p>
  </dd>
</dl>


<hr />
<h2><a name="SystemGlobalInstance">System global instance</a></h2>
<p>システム全体で共用するグローバルなインスタンスがあります。</p>
<hr />
<dl>

<!-- -->
  <dt><a name="uu.url">uu.url</a></dt>
    <dd>uu.url は <a href="./MODULE.htm#uu.module.url">uu.module.url</a> のインスタンスです。
    </dd>
  <dt><a name="uu.vtmHighSpeed">uu.vtmHighSpeed</a></dt>
    <dd>uu.vtmHighSpeed は <a href="./MODULE.htm#uu.module.virtualTimer">uu.module.virtualTimer</a> のインスタンスです。
        高いレスポンスが求められるシーンで活躍する仮想タイマー機能を提供します。
    </dd>
  <dt><a name="uu.vtmMidSpeed">uu.vtmMidSpeed</a></dt>
    <dd>uu.vtmMidSpeed は <a href="./MODULE.htm#uu.module.virtualTimer">uu.module.virtualTimer</a> のインスタンスです。
        中程度のレスポンスが求められるシーンで活躍する仮想タイマー機能を提供します。
    </dd>
  <dt><a name="uu.vtmLowSpeed">uu.vtmLowSpeed</a></dt>
    <dd>uu.vtmLowSpeed は <a href="./MODULE.htm#uu.module.virtualTimer">uu.module.virtualTimer</a> のインスタンスです。
        隠密動作が求められる場合に使用する仮想タイマー機能を提供します。
    </dd>
  <dt><a name="uu.msg">uu.msg</a></dt>
    <dd>uu.msg は <a href="./MODULE.htm#uu.module.messagePump">uu.module.messagePump</a> のインスタンスです。
        メッセージポンプ機能を提供します。
    </dd>
  <dt><a name="uu.customEvent">uu.customEvent</a></dt>
    <dd>uu.customEvent は <a href="./MODULE.htm#uu.module.customEvent">uu.module.customEvent</a> のインスタンスです。
        DOM標準外のイベント(フォントのリサイズイベントなど)をハンドリングしメッセージを通知する機能を提供します。
    </dd>
  <dt><a name="uu.imageset">uu.imageset</a></dt>
    <dd>uu.imageset は <a href="./MODULE.htm#uu.module.imageset">uu.module.imageset</a> のインスタンスです。
        画像の読み込み状況を把握し、メッセージを通知する機能を提供します。
    </dd>
  <dt><a name="uu.color">uu.color</a></dt>
    <dd>uu.color は <a href="./MODULE.htm#uu.module.color">uu.module.color</a> のインスタンスです。
        色名辞書("skyblue", "tomato")や、色成分(RGB, RGBA, HSV, #FFF)を扱う機能を提供します。
    </dd>
  <dt><a name="uu.effect">uu.effect</a></dt>
    <dd>uu.effect は <a href="./MODULE.htm#uu.module.effect">uu.module.effect</a> のインスタンスです。
        アニメーション機能を提供します。
    </dd>
  <dt><a name="uu.agent">uu.agent</a></dt>
    <dd>uu.agent は <a href="./MODULE.htm#uu.module.agent">uu.module.agent</a> のインスタンスです。
        スパイ活動を行い、メッセージを通知する機能を提供します。
    </dd>
  <dt><a name="uu.config">uu.config</a></dt>
    <dd>uu.config は <a href="./MODULE.htm#uu.module.config">uu.module.config</a> のインスタンスです。
        システムのチューニング方法を提供します。
    </dd>
</dl>


<hr />
<div>
  <h2><a name="Why_Not_OmniSelector">Why Not omni-selector?</a> - なぜ包括的(万能)なセレクタが無いのか?</h2>
  <p>uupaa.js のゴールの一つには、WebOS のフロントエンド(GUI)があります。WebOS のベースとなるライブラリには高い応答性が求められます。</p>

  <p>「セレクタで選択した要素が、各メソッド内のthisになる」というjQueryの特徴は、
      <br />ライトウエイトな用途(セレクタで検索 → スタイル変更 等)では良く使うが、
      内容が高度で複雑になるほど、使用頻度の低い邪魔(モッサリする原因を作るおせっかい)な機能だということがわかりましたので、
      (uupaa.js v0.4で実装しかけた) jQuery ライクな構文を解釈し実行するモジュールは一旦削除しました。
  </p>

  <p>なんでも食べちゃう $(...) や $$(...) などの万能セレクタは、あれば確かに便利ですが、
    <br />最終的には document.getElementById や document.getElementsByTagName が実行されるようなケースでも、
    <br />まず RegExp で文字列をパースする処理が走り、さらに Element をラップしたオブジェクトを生成して返すような実装(アプローチ)は富豪的であり、
    レスポンス悪化を招く原因になります。
  </p>
  <p>uupaa.jsに実装されている<a href="./SELECTOR.htm">セレクタ</a>は、基本的に <a href="./GLOSSARY.htm#ElementArray">ElementArray</a> と呼ばれるシンプルな配列を返します。
     <br />将来(※)を見据え、携帯端末やネットブック上で動作するJavaScriptが実用的な速度を出すためには、
     <br />配列を配列のまま扱うことこそが、資源効率と実行速度を両立するベターな方法と(現時点では)考えます。
     <br />PCにフォーカスした富豪的なアプローチの製品は、Web3.0時代には通用しないかもしれません。
  </p>
  <p>※ ウエアラブルなモバイル端末は、将来の日本を支える主力商品になるはずです。</p>

  <p>「速度を計ってみたら、JavaScript::RegExp と String.toLowerCase() は同程度に早いから大丈夫」と思う人も中には居るでしょう。
     <br />しかし、モバイル環境でも同じ結果になるのでしょうか?
     <br />そのような考えは、リソースが限定された組み込み機器においても「++i と i++ は、副作用以外は同じもの」や「libc::tolower() と C++::Boost::regex() は同程度」と主張しているようにも聞こえます。
  </p>
  <p>
     必要な道具は用意しました。後はパズルを解いてください。
  </p>
</div>

<hr />
<div>
  <h2><a name="Dependence_to_XPath_Library">About dependence to the XPath library</a> - XPathライブラリへの依存について</h2>
  <p>uupaa.jsは多様なセレクタで要素を選択することが可能です。</p>
  <p><a href="./SELECTOR.htm#xpath-selector">uu.xpath</a> と <a href="./SELECTOR.htm#css-selector">uu.css</a> は、内部でXPath(document.evaluate)を使用しているため、
     XPathを標準でサポートしていないブラウザ(IE等)では、XPathをエミュレーションするライブラリ(<a href="http://coderepos.org/share/wiki/JavaScript-XPath">JavaScript-XPath</a>)が必要になります。</p>
  <p><a href="http://coderepos.org/share/wiki/JavaScript-XPath">JavaScript-XPath</a>は、
      Version 0.5以上のuupaa.jsに同梱されています。(TNX! id:amachang)</p>
  <p>XPathライブラリが存在しない環境で、XPathに依存している関数(<a href="./SELECTOR.htm#uu.xpath">uu.xpath</a>, <a href="./SELECTOR.htm#uu.css">uu.css</a>)を呼び出すと例外が発生します。</p>
</div>

</div>
</body>
</html>
