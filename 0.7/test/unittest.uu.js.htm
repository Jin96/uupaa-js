<!doctype html><html><head><meta charset="UTF-8" />
<title></title>
<script src="../uu.js"></script>
<script src="../uu.str.js"></script>
<script src="../uu.css.js"></script>
<script src="../uu.node.js"></script>
<script src="../uu.query.js"></script>
<script src="../uu.url.js"></script>
<script src="../uu.img.js"></script>
<script src="../uu.test.js"></script>
</head><body>
<div id="div" title="title" style="display:none">text</div>
<script>
function xboot(uu) {
  uu.test({
    "uu.ary()": "",
      "[1][clone] uu.ary([1,2]) は 配列とその中身を複製(クローン)する。元の配列 [1,2] とクローンされた配列は別( !== )の配列である": function(uu) {
        return [uu.ary([1,2]), "!==", [1,2]];
      },
      "[2][convert NodeList] uu.ary(document.getElementsByTagName('HTML')) は NodeList を配列に変換できる。その結果は uu.query('html') と等しい": function(uu) {
        return [uu.ary(document.getElementsByTagName('HTML')), "==", uu.query('html')];
      },
      "[2][convert NodeList] uu.ary(document.getElementsByTagName('HTML')) は NodeList を配列に変換できる。その結果は [uu.html()] と等しい": function(uu) {
        return [uu.ary(document.getElementsByTagName('HTML')), "==", [uu.html()]];
      },
      "[3][convert arguments] uu.ary(arguments) は 引数(1, 2, 3)を配列( [1, 2, 3] )に変換できる": function(uu) {
        function uuarytest1() {
          return uu.ary(arguments);
        }
        var rv = uuarytest1(1, 2, 3);
        return [rv, "==", [1, 2, 3]];
      },
      "[4][split comma] uu.ary('word,word') はカンマセパレータで分割し、配列 ['word', 'word'] に変換する": function(uu) {
        return [uu.ary('word,word'), "==", ['word', 'word']];
      },
      "[5][split space] uu.ary(' word word') はスペースセパレータで分割し、配列 ['word', 'word'] に変換する": function(uu) {
        return [uu.ary(' word word'), "==", ['word', 'word']];
      },
    "uu.ary.has()": "",
      "[1][has array] uu.ary.has(1, [1, 2, 3]) は true": function(uu) {
        return [uu.ary.has(1, [1, 2, 3]), "is true"];
      },
      "[1][has array] uu.ary.has('1', [1, 2, 3]) は false": function(uu) {
        return [uu.ary.has('1', [1, 2, 3]), "is false"];
      },
      "[1][has array] uu.ary.has('1', ['1', 2, 3]) は true": function(uu) {
        return [uu.ary.has('1', ['1', 2, 3]), "is true"];
      },
      "[1][has array] uu.ary.has(2, ['1', , 2, 3]) は true (粗い配列でもとりあえずOK)": function(uu) {
        return [uu.ary.has(2, ['1', , 2, 3]), "is true"];
      },
      "[1][has array] uu.ary.has(undefined, ['1', , 2, 3]) は false (undefined は検索できない)": function(uu) {
        return [uu.ary.has(undefined, ['1', , 2, 3]), "is false"];
      },
      "[1][has array] uu.ary.has(undefined, ['1', undefined, 2, 3]) は false (undefined は検索できない)": function(uu) {
        return [uu.ary.has(undefined, ['1', undefined, 2, 3]), "is false"];
      },
      "[1][has array] uu.ary.has([1, 2], [1, 2, 3]) は true": function(uu) {
        return [uu.ary.has([1, 2], [1, 2, 3]), "is true"];
      },
      "[2][has node] uu.ary.has(document.body, [document, document.body]) は true": function(uu) {
        return [uu.ary.has(document.body, [document, document.body]), "is true"];
      },
    "uu.ary.sort()": "",
      "[1][num 0-9] uu.ary.sort([11, 222, 4], '0-9') は 数字順(0→9)([4, 11, 222])にソートされる": function(uu) {
        return [uu.ary.sort([4, 11, 222], "0-9"), "==", [4, 11, 222]];
      },
      "[2][num 9-0] uu.ary.sort([11, 222, 4], '9-0') は 数字順(9→0)([222, 11, 4])にソートされる": function(uu) {
        return [uu.ary.sort([4, 11, 222], "9-0"), "==", [222, 11, 4]];
      },
      "[3][ascii a-z] uu.ary.sort(['z', 'a', 'b', 'c'], 'A-Z') は 英字順(A→Z)(['a', 'b', 'c', 'z'])にソートされる": function(uu) {
        return [uu.ary.sort(['z', 'a', 'b', 'c'], "A-Z"), "==", ['a', 'b', 'c', 'z']];
      },
      "[4][ascii a-z] uu.ary.sort(['z', 'a', 'b', 'c'], 'Z-A') は 英字順(Z→A)(['z', 'c', 'b', 'a'])にソートされる": function(uu) {
        return [uu.ary.sort(['z', 'a', 'b', 'c'], "Z-A"), "==", ['z', 'c', 'b', 'a']];
      },
      "[5][user func] uu.ary.clean([,,1,2,,]) は [1, 2]": function(uu) {
        return [uu.ary.clean([,,1,2,,]), "is", [1, 2]];
      },
    "uu.ary.clean()": "",
      "uu.ary.clean([,,1,2,,]) -> [1, 2]": function(uu) {
        return [uu.ary.clean([,,1,2,,]), "->", [1, 2]];
      },
      "uu.ary.clean([]) -> [1, 2]": function(uu) {
        return [uu.ary.clean([]), "->", []];
      },

    "uu.ary.unique()": "",
      "[1][unique elements] uu.ary.unique([<body>, <head>, <body>]) は [<body>, <head>]": function(uu) {
        var body = uu.body(),
            head = uu.head();
        return [uu.ary.unique([body, head, body]), "==", [body, head]];
      },
      "[1][unique elements] uu.ary.unique([0, 1, 2, 3, 3, 2, 1, 0]) は [0, 1, 2, 3]": function(uu) {
        return [uu.ary.unique([0, 1, 2, 3, 3, 2, 1, 0]), "==", [0, 1, 2, 3]];
      },
      "[2][unique literals] uu.ary.unique([0, 1, 2, 3, 3, 2, 1, 0], 1) は [0, 1, 2, 3]": function(uu) {
        return [uu.ary.unique([0, 1, 2, 3, 3, 2, 1, 0], 1), "==", [0, 1, 2, 3]];
      },


    "uu.ary.indexOf()": "",
      "uu.ary.indexOf([1,2,3], 1) は 0 を返す": function(uu) {
        return [uu.ary.indexOf([1,2,3], 1), "is", 0];
      },
      "uu.ary.indexOf([<body>, <head>], <head>) は 1 を返す": function(uu) {
        return [uu.ary.indexOf([uu.body(), uu.head()], uu.head()), "is", 1];
      },
      "uu.ary.indexOf([<body>, <head>], <html>) は -1 (not found) を返す": function(uu) {
        return [uu.ary.indexOf([uu.body(), uu.head()], uu.html()), "is", -1];
      },
/*
    "uu.ary.filter()": "",
      "uu.ary.filter([12, 5, 8, 130, 44], function(v) { return v >= 10; }) は [12, 130, 44] を返す": function(uu) {
        return [uu.ary.filter([12, 5, 8, 130, 44], function(v) { return v >= 10; }), "is", [12, 130, 44]];
      },
    "uu.ary.every()": "",
      "uu.ary.every([12, 5, 8, 130, 44], function(v) { return v >= 10; }) は false を返す": function(uu) {
        return [uu.ary.every([12, 5, 8, 130, 44], function(v) { return v >= 10; }), "is false"];
      },
      "uu.ary.every([12, 54, 18, 130, 44], function(v) { return v >= 10; }) は true を返す": function(uu) {
        return [uu.ary.every([12, 54, 18, 130, 44], function(v) { return v >= 10; }), "is true"];
      },
    "uu.ary.some()": "",
      "uu.ary.some([12, 5, 8, 130, 44], function(v) { return v < 10; }) は true を返す": function(uu) {
        return [uu.ary.some([12, 5, 8, 130, 44], function(v) { return v < 10; }), "is true"];
      },
      "uu.ary.some([12, 54, 18, 130, 44], function(v) { return v < 10; }) は false を返す": function(uu) {
        return [uu.ary.some([12, 54, 18, 130, 44], function(v) { return v < 10; }), "is false"];
      },
    "uu.ary.map()": "",
      "uu.ary.map([1, 2, 3, 4, 5], function(v) { return v * 2; }) は [2, 4, 6, 8, 10] を返す": function(uu) {
        return [uu.ary.map([1, 2, 3, 4, 5], function(v) { return v * 2; }), "is", [2, 4, 6, 8, 10]];
      },
 */
    "uu.attr()": "",
      "[1][get one attr] uu.attr(uu.id('div'), 'id') は 'div' } と等しい": function(uu) {
        return [uu.attr(uu.id('div'), 'id'), "->", 'div'];
      },
      "[2][get some attrs] uu.attr(uu.id('div'), 'id,title') は { id: 'div', title: 'title' } と等しい": function(uu) {
        return [uu.attr(uu.id('div'), 'id,title'), "->", { id: 'div', title: 'title' }];
      },
      "[3][set one attr] uu.attr(uu.id('div'), 'title', 'hoge') は node を返し、title は hoge に設定される": function(uu) {
        var node = uu.id('div');
        if (uu.attr(node, 'title', 'hoge') !== node) {
          return [uu.attr(node, 'title', 'hoge'), "is fail"];
        }
        return [uu.attr(node, 'title'), "->", 'hoge'];
      },
      "[4][set some attrs] uu.attr(uu.id('div'), { 'class': 'A1', title: 'title' }) は node を返し、className は A1 に、 title は title に設定される": function(uu) {
        var node = uu.id('div');
        if (uu.attr(node, { 'class': 'A1', title: 'title' }) !== node) {
          return [uu.attr(node, { 'class': 'A1', title: 'title' }), "is fail"];
        }
        return [uu.attr(node, 'title'), "->", 'title'];
      },

    "uu.attr.get()": "",
      "[1][get all attrs] uu.attr.get(uu.id('div')) は Hash を返す(結果はブラウザ依存)": function(uu) {
        return [uu.attr.get(uu.id('div')), "is hash"];
      },
      "[2][get all attrs(without style, uu*)] uu.attr.get(uu.id('div'), 1) は { 'class': 'A1', id: 'div', title: 'title' } と等しい('uu'で始まる属性と、style属性は取得できない)": function(uu) {
        return [uu.attr.get(uu.id('div'), 1), "->", { 'class': 'A1', id: 'div', title: 'title' }];
      },
      "[3][get one attr] uu.attr.get(uu.id('div'), 'id') は 'div' } と等しい": function(uu) {
        return [uu.attr.get(uu.id('div'), 'id'), "->", 'div'];
      },
      "[4][get some attrs] uu.attr.get(uu.id('div'), 'id,title') は { id: 'div', title: 'title' } と等しい": function(uu) {
        return [uu.attr.get(uu.id('div'), 'id,title'), "->", { id: 'div', title: 'title' }];
      },
      "uu.attr.get('href,.,title,dot')": function(uu) {
        var e;
        uu.body(e = uu.a("href,.,title,dot", "#link"));
        var v = uu.attr.get(e, "href");
        return [v, "is", "."];
      },
      "URLを含んでいても、uu.attr.get('href,http://example.com/,title,long') は問題なし": function(uu) {
        var e;
        uu.body(e = uu.a("href,http://example.com/,title,long", "#link"));
        var v = uu.attr.get(e, "href");
        return [v, "is string"];
      },

    "uu.attr.set()": "",
      "[1][set some attrs] uu.attr.set(uu.id('div'), { title: 'unittest' }) で設定された値と uu.attr.get(uu.id('div'), 'title') の結果は等しい": function(uu) {
        uu.attr.set(uu.id('div'), { title: 'unittest' });
        var rv = uu.attr.get(uu.id('div'), 'title');
        return ["unittest", "==", rv];
      },
    "uu.Class()": "",
      "uu.Class は複数回生成すると別々のインスタンスを返す": function(uu) {
        var obj1 = uu.factory("UNITTEST1");
        var obj2 = uu.factory("UNITTEST1");

        return [obj1, "!=", obj2];
      },
    "uu.Class.singleton()": "",
      "uu.Class.singleton は複数回生成しても同じインスタンスを返す": function(uu) {
        uu.Class.singleton("UNITTEST2");
        var obj1 = uu.factory("UNITTEST2");
        var obj2 = uu.factory("UNITTEST2");

        return [obj1, "==", obj2];
      },
    "uu.Class.guid()": "",
      "uu.Class.guid はユニークな ID を返す": function(uu) {
        var obj1 = uu.factory("UNITTEST3");
        var obj2 = uu.factory("UNITTEST3");

        return [uu.Class.guid(obj1), "<", uu.Class.guid(obj2)];
      },
      "singleton クラスなら uu.Class.guid は同じ ID を返す": function(uu) {
        uu.Class.singleton("UNITTEST4");
        var obj1 = uu.factory("UNITTEST4");
        var obj2 = uu.factory("UNITTEST4");

        return [uu.Class.guid(obj1), "==", uu.Class.guid(obj2)];
      },
    "uu.factory()": "",
      "[1][create instance] uu.factory('UNITTEST1', 1, 2) は new uu.Class('UNITTEST1', 1, 2) の結果(インスタンス)を返す": function(uu) {
        uu.Class("UNITTEST1"); // define
        var obj1 = uu.factory("UNITTEST1");

        return [obj1, "is instance"];
      },
      "[2][define Class and create instance] uu.factory('my', { init: uuvain }, 1) は クラス'my'を定義し、new uu.Class('my', 1) の結果(インスタンス)を返す": function(uu) {
        var obj2 = uu.factory('my', { init: uuvain }, 1);

        return [obj2, "is instance"];
      },

    "uu.klass.has()": "",
      "uu.klass.has(uu.id('div')) ( 'A1 A2 A3') は 'A1 A3' を含んでいる": function(uu) {
        uu.id('div').className = "";
        uu.klass.add(uu.id('div'), "A1 A2 A3");

        return [uu.klass.has(uu.id('div'), "A1 A3"), "is true"];
      },
      "uu.klass.has(uu.id('div')) ( '') は '' を含んでいない": function(uu) {
        uu.id('div').className = "";
        uu.klass.add(uu.id('div'), "");

        return [uu.klass.has(uu.id('div'), ""), "is false"];
      },
      "uu.klass.has(uu.id('div')) ( 'A1 A2 A3') は ' A2 ' を含んでいる": function(uu) {
        uu.id('div').className = "";
        uu.klass.add(uu.id('div'), "A1 A2 A3");

        return [uu.klass.has(uu.id('div'), " A2 "), "is true"];
      },
      "uu.klass.has(uu.id('div')) ( 'あ い う') は ' い ' を含んでいる": function(uu) {
        uu.id('div').className = "";
        uu.klass.add(uu.id('div'), "あ い う");

        return [uu.klass.has(uu.id('div'), " い "), "is true"];
      },
      "uu.klass.has(uu.id('div')) ( 'うい') は 'い' を含んでいない": function(uu) {
        uu.id('div').className = "";
        uu.klass.add(uu.id('div'), "うい");

        return [uu.klass.has(uu.id('div'), "い"), "is false"];
      },


    "uu.klass.add()": "",
/*
      "uu.klass.add(uu.id('div')) ( 'A1 A2 A3' ) に 'A4　　　A1　' を足すと 'A1 A2 A3 A4 A1' になる": function(uu) {
        uu.id('div').className = "";
        uu.klass.add(uu.id('div'), "A1 A2 A3");
        uu.klass.add(uu.id('div'), "A4   A1 ");

        return [uu.id('div').className, "->", 'A1 A2 A3 A4 A1'];
      },
 */
      "uu.klass.add(uu.id('div')) ( ' A1 A2 A3' ) に 'A4 A1' を足すと ' A1 A2 A3 A4 A1' になる": function(uu) {
        uu.id('div').className = "";
        uu.klass.add(uu.id('div'), "A1 A2 A3");
        uu.klass.add(uu.id('div'), "A4 A1");

        return [uu.id('div').className, "->", ' A1 A2 A3 A4 A1'];
      },

    "uu.klass.sub()": "",
      "uu.klass.sub(uu.id('div')) ( 'A1 A2 A3 A4 A1' )から( 'A1　　A4' )を引くと 'A2 A3' になる": function(uu) {
        uu.id('div').className = "A1 A2 A3 A4 A1";
        uu.klass.sub(uu.id('div'), "A1  A4");

        return [uu.id('div').className, "->", 'A2 A3'];
      },
      "uu.klass.sub(uu.id('div')) ( 'B1 B2' )から 存在しないクラス( 'A1 A2 A3 A4 A1' )を引いてもエラーにならない": function(uu) {
        uu.id('div').className = "B1 B2";
        uu.klass.sub(uu.id('div'), "A1 A2 A3 A4 A1");

        return [uu.id('div').className, "->", 'B1 B2'];
      },
    "uu.klass.toggle()": "",
      "uu.klass.toggle(uu.id('div')) ( 'A1 A2 B1 B2' ) から 'A2 B2' をトグルすると、'A1 B1' になる": function(uu) {
        uu.id('div').className = "A1 A2 B1 B2";
        uu.klass.toggle(uu.id('div'), "A2 B2");

        return [uu.id('div').className, "->", 'A1 B1'];
      },
      "uu.klass.toggle(uu.id('div')) ( 'A1 B1' ) から 'A2 B2' をトグルすると、'A1 B1 A2 B2' になる": function(uu) {
        uu.id('div').className = "A1 B1";
        uu.klass.toggle(uu.id('div'), "A2 B2");

        return [uu.id('div').className, "->", 'A1 B1 A2 B2'];
      },

// -----------------------
    "Event": "",

// -----------------------
    "uu.hash()": "",
      "[1][through] uu.hash({ key: 'value' }) はハッシュをそのままスルーし { key: 'value' } を返す": function(uu) {
        var hash1 = { key: 'value' };
        var hash2 = uu.hash(hash1);

        return [hash2, "===", hash1];
      },
      "[2][to hash] uu.hash('key', 123) -> { key: 123 }": function(uu) {
        var hash = uu.hash('key', 123);

        return [hash, "==", { key: 123 }];
      },
      "[3][to hash(split comma)] uu.hash('key,a,key2,b') -> { key: 'a', key2: 'b' }": function(uu) {
        var hash = uu.hash('key,a,key2,b');

        return [hash, "==", { key: 'a', key2: 'b' }];
      },
      "[4][to hash(split space)] uu.hash(' key a key2 b') -> { key: 'a', key2: 'b' }": function(uu) {
        var hash = uu.hash(' key a key2 b');

        return [hash, "==", { key: 'a', key2: 'b' }];
      },
    "uu.hash.num()": "",
      "uu.hash.num('key,0,key2,1') -> { key: 0, key2: 1 }": function(uu) {
        var hash = uu.hash.num('key,0,key2,1');

        return [hash, "==", { key: 0, key2: 1 }];
      },

    "uu.hash.has()": "",
      "uu.hash.has({ a: 1, b: 2 }, { a: 1, b: 2, c: 3 }) -> true": function(uu) {
        return [uu.hash.has({ a: 1, b: 2 }, { a: 1, b: 2, c: 3 }), "is true"];
      },
      "uu.hash.has({ a: '1', b: 2 }, { a: 1, b: 2, c: 3 }) -> false": function(uu) {
        return [uu.hash.has({ a: '1', b: 2 }, { a: 1, b: 2, c: 3 }), "is false"];
      },
      "uu.hash.has({ a: function() { return 'a'}, b: 2 }, { a: function() { return 'a'}, b: 2, c: 3 }) -> true": function(uu) {
        return [uu.hash.has({ a: function() { return 'a'}, b: 2 }, { a: function() { return 'a'}, b: 2, c: 3 }), "is true"];
      },
      "uu.hash.has({ a: function() { return 'a'}, b: 2 }, { a: function() { return 'b'}, b: 2, c: 3 }) -> false": function(uu) {
        return [uu.hash.has({ a: function() { return 'a'}, b: 2 }, { a: function() { return 'b'}, b: 2, c: 3 }), "is false"];
      },
    "uu.hash.size()": "",
      "ハッシュサイズは2": function(uu) {
        return [uu.hash.size({ aaa: 1, bbb: 2 }), "==", 2];
      },
    "uu.hash.keys()": "",
      "{ key: 1, key2: 2 } から key の配列[key, key2]を生成する": function(uu) {
        return [uu.hash.keys({ key: 1, key2: 2 }), "==", ["key", "key2"]];
      },
    "uu.hash.values()": "",
      "{ key: 1, key2: 2 } から値の配列[1,2]を生成する": function(uu) {
        return [uu.hash.values({ key: 1, key2: 2 }), "==", [1, 2]];
      },
    "uu.hash.indexOf()": "",
      "uu.hash.indexOf({ a: 1, b: 2, c: 2 }, 2) -> 'b'": function(uu) {
        return [uu.hash.indexOf({ a: 1, b: 2, c: 2 }, 2), "==", 'b'];
      },
    "uu.hash.combine()": "",
      "['key', 'key2'] と ['1', '2'] から { key: '1', key2: '2' } を生成する": function(uu) {
        return [uu.hash.combine(['key', 'key2'], ['1', '2']), "==", { key: '1', key2: '2' }];
      },
      "['key', 'key2'] と ['1', '2'] から { key: 1, key2: 2 } を生成する(value を数値化)": function(uu) {
        return [uu.hash.combine(['key', 'key2'], ['1', '2'], 1), "==", { key: 1, key2: 2 }];
      },
    "uu.hash.hasValue()": "",
      "uu.hash.hasValue({ a: 1, b: 2 }, 2) -> true": function(uu) {
        return [uu.hash.hasValue({ a: 1, b: 2 }, 2), "is true"];
      },

    "uu.img.load()": "",
      "uu.img.load('../img/cover01.jpg')": function(uu) {
        return [uu.img.load('../img/cover01.jpg'), "is true"];
      },


// -----------------------
    "MessagePump": "",
      "MSGBOXTEST1 と MSGBOXTEST2 にユニキャストすると 1 と 2 が帰ってくる": function(uu) {
        uu.Class("MSGBOXTEST1", {
          msgbox: function(msg, p1, p2) {
  //          uu.puff("got msg: %s %s %s", msg, p1, p2);
            return 1;
          }
        });
        uu.Class("MSGBOXTEST2", {
          msgbox: function(msg, p1, p2) {
  //          uu.puff("got msg: %s %s %s", msg, p1, p2);
            return 2;
          }
        });
        var obj1 = uu.factory("MSGBOXTEST1");
        var obj2 = uu.factory("MSGBOXTEST2");

        var rv1 = uu.msg.send(obj1, "obj1 -> obj2", "p1", "p2");
        var rv2 = uu.msg.send(obj2, "obj2 -> obj1", "p1", "p2");

        return [rv1 === 1, "&&", rv2 === 2];
      },
// -----------------------
    "uu.node()": "",
      "uu.node('<div id=\"ctx\">...</div>') is node": function(uu) {
        var fg = '\
<div id="ctx">\
  <div id="first">first</div>\
  <div id="prev">prev</div>\
  <div id="tgt">tgt\
    <div id="firstChild">firstChild</div>\
    <div id="lastChild">lastChild</div>\
  </div>\
  <div id="next">next</div>\
  <div id="last">last</div>\
</div>';
        return [uu.node(fg), "is node"];
      },
    "uu.nore.has()": "",
      "uu.node.has(uu.id('tgt'), uu.id('ctx')) == true": function(uu) {
        return [uu.node.has(uu.id('tgt'), uu.id('ctx')), "is true"];
      },
      "uu.node.has(uu.id('ctx'), uu.id('ctx')) == false": function(uu) {
        return [uu.node.has(uu.id('ctx'), uu.id('ctx')), "is false"];
      },
      "uu.node.has(document.body, uu.id('ctx')) == false": function(uu) {
        return [uu.node.has(document.body, uu.id('ctx')), "is false"];
      },

/*
    "uu.nore.first()": "",
      "uu.node.first(uu.id('tgt')) == uu.id('first')": function(uu) {
        return [uu.node.first(uu.id('tgt')), "==", uu.id('first')];
      },
    "uu.nore.prev()": "",
      "uu.node.prev(uu.id('tgt')) == uu.id('prev')": function(uu) {
        return [uu.node.prev(uu.id('tgt')), "==", uu.id('prev')];
      },
    "uu.nore.next()": "",
      "uu.node.next(uu.id('tgt')) == uu.id('next')": function(uu) {
        return [uu.node.next(uu.id('tgt')), "==", uu.id('next')];
      },
    "uu.nore.last()": "",
      "uu.node.last(uu.id('tgt')) == uu.id('last')": function(uu) {
        return [uu.node.last(uu.id('tgt')), "==", uu.id('last')];
      },
    "uu.nore.firstChild()": "",
      "uu.node.firstChild(uu.id('tgt')) == uu.id('firstChild')": function(uu) {
        return [uu.node.firstChild(uu.id('tgt')), "==", uu.id('firstChild')];
      },
    "uu.nore.lastChild()": "",
      "uu.node.lastChild(uu.id('tgt')) == uu.id('lastChild')": function(uu) {
        return [uu.node.lastChild(uu.id('tgt')), "==", uu.id('lastChild')];
      },
 */
    "uu.nore.first()": "",
      "uu.node.first(uu.p(':hoge'))": function(uu) {
        return [uu.node.first(uu.p(':hoge')), "is node"];
      },
    "uu.nore.prev()": "",
      "uu.node.prev(uu.p(':hoge')) == uu.id('prev')": function(uu) {
        return [uu.node.prev(uu.p(':hoge')), "is node"];
      },
    "uu.nore.next()": "",
      "uu.node.next(uu.p(':hoge')) == uu.id('next')": function(uu) {
        return [uu.node.next(uu.p(':hoge')), "is node"];
      },
    "uu.nore.last()": "",
      "uu.node.last(uu.p(':hoge')) == uu.id('last')": function(uu) {
        return [uu.node.last(uu.p(':hoge')), "is node"];
      },
    "uu.nore.firstChild()": "",
      "uu.node.firstChild(uu.p(':hoge')) == uu.id('firstChild')": function(uu) {
        return [uu.node.firstChild(uu.p(':hoge')), "is node"];
      },
    "uu.nore.lastChild()": "",
      "uu.node.lastChild(uu.p(':hoge')) == uu.id('lastChild')": function(uu) {
        return [uu.node.lastChild(uu.p(':hoge')), "is node"];
      },

    "uu.nore.find.first()": "",
      "uu.node.find.first(uu.id('tgt')) == uu.id('first')": function(uu) {
        return [uu.node.find.first(uu.id('tgt')), "==", uu.id('first')];
      },
    "uu.nore.find.prev()": "",
      "uu.node.find.prev(uu.id('tgt')) == uu.id('prev')": function(uu) {
        return [uu.node.find.prev(uu.id('tgt')), "==", uu.id('prev')];
      },
    "uu.nore.find.next()": "",
      "uu.node.find.next(uu.id('tgt')) == uu.id('next')": function(uu) {
        return [uu.node.find.next(uu.id('tgt')), "==", uu.id('next')];
      },
    "uu.nore.find.last()": "",
      "uu.node.find.last(uu.id('tgt')) == uu.id('last')": function(uu) {
        return [uu.node.find.last(uu.id('tgt')), "==", uu.id('last')];
      },
    "uu.nore.find.firstChild()": "",
      "uu.node.find.firstChild(uu.id('tgt')) == uu.id('firstChild')": function(uu) {
        return [uu.node.find.firstChild(uu.id('tgt')), "==", uu.id('firstChild')];
      },
    "uu.nore.find.lastChild()": "",
      "uu.node.find.lastChild(uu.id('tgt')) == uu.id('lastChild')": function(uu) {
        return [uu.node.find.lastChild(uu.id('tgt')), "==", uu.id('lastChild')];
      },




    "uu.nore.remove()": "",
      "uu.node.remove(uu.id('ctx'))": function(uu) {
        return [uu.node.remove(uu.id('ctx')), "is node"];
      },
    "uu.node.data()": "",
      "[1][get all] uu.node.data(uu.id('div')) で divノードに格納したデータが取り出せる(何も設定されていないので、空の Hash が返る)": function(uu) {
        var rv = uu.node.data(uu.id('div'));

        return [rv, "==", {}];
      },
      "[2][get one] uu.node.data(uu.id('div'), 'key', 'value') で div に設定されたデータが取り出せる": function(uu) {
        uu.node.data(uu.id('div'), 'key', 'value');
        var rv = uu.node.data(uu.id('div'), 'key');

        return [rv, "==", 'value'];
      },
      "[3][set] uu.node.data(uu.id('div'), 'key', null) で div に設定されているデータを null で上書できる": function(uu) {
        uu.node.data(uu.id('div'), 'key', 'value'); // [3][add]
        uu.node.data(uu.id('div'), 'key', null); // [3][add]
        var rv = uu.node.data(uu.id('div'), 'key'); // [2][get]

        return [rv, "is null"];
      },
    "uu.node.data.clear()": "",
      "[1][clear data] uu.node.data.clear(uu.id('div'), 'key') で key に関連するデータを消せる": function(uu) {
        uu.node.data.clear(uu.id('div'), 'key');

        var rv = uu.node.data.get(uu.id('div'), 'key');

        return [rv, "is void"];
      },
      "[1][clear data] uu.node.data.clear(uu.id('div'), 'key') で key に関連するデータを消せる(value = { hoge: 1, huga: 2 })": function(uu) {
        uu.node.data.set(uu.id('div'), 'key', { hoge: 1, huga: 2 });
        uu.node.data.clear(uu.id('div'), 'key');

        var rv = uu.node.data.get(uu.id('div'), 'key');

        return [rv, "is void"];
      },
      "[1][clear data] uu.node.data.clear(uu.id('div'), 'key') で key に関連するデータを消せる(value = void)": function(uu) {
        uu.node.data.clear(uu.id('div'), 'key');

        var rv = uu.node.data.get(uu.id('div'), 'key');

        return [rv, "is void"];
      },

      "[2][clear all data] uu.node.data.clear(uu.id('div'), 'key') で key に関連するデータを消せる": function(uu) {
        uu.node.data.set(uu.id('div'), 'key', { hoge: 1, huga: 2 });
        uu.node.data.clear(uu.id('div'));

        var rv = uu.node.data.get(uu.id('div'), 'key');

        return [rv, "is void"];
      },

// -----------------------
    "uu.fix()": "",
      'uu.fix("-webkit-shadow") -> "-webkit-shadow"': function(uu) {
        return [uu.fix("-webkit-shadow"), "->", "-webkit-shadow"];
      },
      'uu.fix("background-color") -> "backgroundColor"': function(uu) {
        return [uu.fix("background-color"), "->", "backgroundColor"];
      },
      'uu.fix("float") -> "cssFloat" or "styleFloat"': function(uu) {
        return [uu.fix("float"), "->", uu.ie ? "styleFloat" : "cssFloat"];
      },
      'uu.fix("for") -> "htmlFor"': function(uu) {
        return [uu.fix("for"), "->", "htmlFor"];
      },
    "uu.trim()": "",
      "uu.trim('nospace') == 'nospace'": function(uu) {
        return [uu.trim('nospace'), "==", 'nospace'];
      },
      "uu.trim('has space') == 'has space'": function(uu) {
        return [uu.trim('has space'), "==", 'has space'];
      },
      "uu.trim('  has  space  ') == 'has  space'": function(uu) {
        return [uu.trim('  has  space  '), "==", 'has  space'];
      },
      "uu.trim('') == ''": function(uu) {
        return [uu.trim(''), "==", ''];
      },
    "uu.trim.tag()": "",
      'uu.trim.tag(" <h1>A</h1>  B  <p>C</p> ") == "A B C"': function(uu) {
        return [uu.trim.tag(" <h1>A</h1>  B  <p>C</p> "), "==", "A B C"];
      },
      'uu.trim.tag("A B C</p> ") == "A B C"': function(uu) {
        return [uu.trim.tag("A B C</p> "), "==", "A B C"];
      },
      'uu.trim.tag("<div>A B C</p> ") == "A B C"': function(uu) {
        return [uu.trim.tag("<div>A B C</p> "), "==", "A B C"];
      },
      'uu.trim.tag("<div><p>A</p></div> B<p>  C</p> ") == "A B C"': function(uu) {
        return [uu.trim.tag("<div><p>A</p></div> B<p>  C</p> "), "==", "A B C"];
      },
    "uu.trim.url()": "",
      "uu.trim.url('url(\"http://...\")') == \"http://...\"": function(uu) {
        return [uu.trim.url('url("http://...")'), "==", "http://..."];
      },
      "uu.trim.url(\"url('http://...')\") == \"http://...\"": function(uu) {
        return [uu.trim.url("url('http://...')"), "==", "http://..."];
      },
      "uu.trim.url('http://...') == \"http://...\"": function(uu) {
        return [uu.trim.url('http://...'), "==", "http://..."];
      },
    "uu.trim.inner()": "",
      "uu.trim.inner('  diet  inner  space  ') == 'diet inner space'": function(uu) {
        return [uu.trim.inner('  diet  inner  space  '), "==", 'diet inner space'];
      },
    "uu.trim.quote()": "",
      "uu.trim.quote(\" 'has  space' \") == \"has  space\"": function(uu) {
        return [uu.trim.quote(" 'has  space' "), "==", "has  space"];
      },
      'uu.trim.quote(\' "has  space" \') == "has  space"': function(uu) {
        return [uu.trim.quote(' "has  space" '), "==", "has  space"];
      },
    "uu.trim.bracket()": "",
      "uu.trim.bracket('  div  ') == 'div'": function(uu) {
        return [uu.trim.bracket('  div  '), "==", 'div'];
      },
      "uu.trim.bracket('  <div>  ') == 'div'": function(uu) {
        return [uu.trim.bracket('  <div>  '), "==", 'div'];
      },
      "uu.trim.bracket('  [bracket]  ') == 'div'": function(uu) {
        return [uu.trim.bracket('  [bracket]  '), "==", 'bracket'];
      },
      "uu.trim.bracket('  (bracket)  ') == 'div'": function(uu) {
        return [uu.trim.bracket('  (bracket)  '), "==", 'bracket'];
      },
      "uu.trim.bracket('  {bracket}  ') == 'div'": function(uu) {
        return [uu.trim.bracket('  {bracket}  '), "==", 'bracket'];
      },
    "uu.split()": "",
      "uu.split(' A  B  C ') == ['A', 'B', 'C'] スペース区切りでトークンを切り出す(左右のスペースをトリムするので、IEの String.split() バグを無視できる)": function(uu) {
        return [uu.split(' A  B  C '), "==", ['A', 'B', 'C']];
      },
    "uu.split.comma()": "",
      "uu.split.comma(' A,B,C ') == ['A', 'B', 'C'] カンマ区切りでトークンを切り出す(左右のスペースをトリムする)": function(uu) {
        return [uu.split.comma(' A,B,C '), "==", ['A', 'B', 'C']];
      },
      "uu.split.comma(',,, ,,A,,,B,C,, ') == ['A', 'B', 'C'] カンマ区切りでトークンを切り出す(左右のスペースをトリムする)": function(uu) {
        return [uu.split.comma(',,, ,,A,,,B,C,, '), "==", ['A', 'B', 'C']];
      },
    "uu.split.token()": "",
      "uu.split.token('url( http:// ) rgba(0, 0, 0, 0) center center') == ['url( http:// )', 'rgba(0, 0, 0, 0)', 'center', 'center'] CSS のトークンを正しく切り出せる": function(uu) {
        return [uu.split.token('url( http:// ) rgba(0, 0, 0, 0) center center'), "==", ['url( http:// )', 'rgba(0, 0, 0, 0)', 'center', 'center']];
      },
    "uu.ucs2()": "",
      "uu.ucs2('string', 0) == '\\u0073'": function(uu) {
        return [uu.ucs2('string', 0), "==", '\\u0073'];
      },
      "uu.ucs2('string', 1) == '\\u0074'": function(uu) {
        return [uu.ucs2('string', 1), "==", '\\u0074'];
      },
      "uu.ucs2('あいう', 1) == '\\u3044'": function(uu) {
        return [uu.ucs2('あいう', 1), "==", '\\u3044'];
      },
      "uu.ucs2('string', -1) == '\\u0000'  第二引数に不正な値を指定すると、\\u0000 が返る": function(uu) {
        return [uu.ucs2('string', -1), "==", '\\u0000'];
      },
      "uu.ucs2('string', 100) == '\\u0000'  第二引数に不正な値を指定すると、\\u0000 が返る": function(uu) {
        return [uu.ucs2('string', 100), "==", '\\u0000'];
      },
    "uu.unucs2()": "",
      "uu.unucs2('\\u0073\\u0074\\u0072\\u0069\\u006e\\u0067', 0) == 'string'": function(uu) {
        return [uu.unucs2('\\u0073\\u0074\\u0072\\u0069\\u006e\\u0067', 0), "==", 'string'];
      },
      "uu.unucs2('st\\u0073\\u0074\\u0072\\u0069\\u006e\\u0067', 0) == 'ststring'": function(uu) {
        return [uu.unucs2('st\\u0073\\u0074\\u0072\\u0069\\u006e\\u0067', 0), "==", 'ststring'];
      },
      "uu.unucs2('\\u3043\\u3044\\u3045', 0) == 'ぃいぅ'": function(uu) {
        return [uu.unucs2('\\u3043\\u3044\\u3045', 0), "==", 'ぃいぅ'];
      },
    "uu.esc()": "",
      "uu.esc('<a href=\"&\">') == '&lt;a href=&quot;&amp;&quot;&gt;'": function(uu) {
        return [uu.esc('<a href="&">'), "==", '&lt;a href=&quot;&amp;&quot;&gt;'];
      },
    "uu.unesc()": "",
      "uu.unesc('&lt;a href=&quot;&amp;&quot;&gt;') == '<a href=\"&\">'": function(uu) {
        return [uu.unesc('&lt;a href=&quot;&amp;&quot;&gt;'), "==", '<a href="&">'];
      },
    "uu.date2str()": "",
      "uu.date2str() は現在時刻を ISO 形式で返す": function(uu) {
        return [uu.date2str(), "is string"];
      },
      "uu.date2str(0, 1) は現在時刻を GMT 形式で返す": function(uu) {
        return [uu.date2str(0, 1), "is string"];
      },
      "uu.date2str(現在時刻, 0) の結果は uu.str2date() でデコードできる": function(uu) {
        var now = new Date;
        var str = uu.date2str(now, 0);
        var rv = uu.str2date(str);
        
        return [now, "===", rv.date];
      },
      "uu.date2str(現在時刻, 1) の結果は uu.str2date() でデコードできる": function(uu) {
        var now = new Date;
        now.setMilliseconds(0); // ms を切り落として比較する
        var str = uu.date2str(now, 1, 1);
        var rv = uu.str2date(str);
        
        return [now, "==", rv.date];
      },
    "uu.str2date()": "",
      'uu.str2date("2000-01-01T00:00:00.000Z") は{ valid, date }を返す': function(uu) {
        var y2k = new Date();
        y2k.setUTCFullYear(2000, 0, 1);
        y2k.setUTCHours(0, 0, 0, 0);
        return [uu.str2date("2000-01-01T00:00:00.000Z"), "->", { valid: 1, date: y2k }];
      },

// -----------------------
    "Type": "",
      "null は null 型":        function(uu) { return [null,    "is null"];     },
      "void 0 は undefined 型": function(uu) { return [void 0,  "is undef"];    },
      "void 0 は undefined 型": function(uu) { return [void 0,  "is undefined"];},
      "{} は hash 型":          function(uu) { return [{},      "is hash"];     },
      "{} は hash 型":          function(uu) { return [{},      "is hash"];     },
      "{} は hash 型":          function(uu) { return [{},      "is object"];   },
      "[] は array 型":         function(uu) { return [[],      "is ary"];      },
      "[] は array 型":         function(uu) { return [[],      "is array"];    },
      "false は boolean 型":    function(uu) { return [false,   "is bool"];     },
      "true は boolean 型":     function(uu) { return [true,    "is boolean"];  },
      "123 は number 型":       function(uu) { return [123,     "is num"];      },
      "-123.4 は number 型":    function(uu) { return [-123.4,  "is number"];   },
      "1 / 0 は number 型":     function(uu) { return [1 / 0,   "is number"];   },
      "0 / 0 は number 型":     function(uu) { return [0 / 0,   "is number"];   },
      "'' は string 型":        function(uu) { return ['',      "is str"];      },
      "'' は string 型":        function(uu) { return ['',      "is string"];   },
      "function(){} は function 型(1)":
                                function(uu) { return [function(){}, "is func"]; },
      "function(){} は function 型(2)":
                                function(uu) { return [function(){}, "is function"]; },
      "document.body は node 型":
                                function(uu) { return [document.body, "is node"]; },
      "document.getElementsByTagName('body') は fake 型(1)":
                                function(uu) { return [document.getElementsByTagName('body'), "is fake"]; },
      "document.getElementsByTagName('body') は fake 型(2)":
                                function(uu) { return [document.getElementsByTagName('body'), "is fakeary"]; },
      "document.getElementsByTagName('body') は fake 型(3)":
                                function(uu) { return [document.getElementsByTagName('body'), "is fakearray"]; },

      "new Date は date 型":    function(uu) { return [new Date, "is date"]; },
      "{r:0,g:0,b:0,a:0} は rgba 型":
                                function(uu) { return [{r:0,g:0,b:0,a:0}, "is rgba"]; },
      "uu.type(123, uu.STR | uu.NUM) は boolean 型 の戻り値を返す":
                                function(uu) { return [uu.type(123, uu.STR | uu.NUM), "is boolean"]; },
      "new Boolean(false) は boolean 型":
                                function(uu) { return [new Boolean(false), "is boolean"];   },
      "new Number(1) は number 型":
                                function(uu) { return [new Number(''), "is number"];   },
      "new String('') は string 型":
                                function(uu) { return [new String(''), "is string"];   },


// -----------------------
    "uu.url()": "",
      "uu.url() は 絶対URLを返す": function(uu) {
        return [uu.url(), "is string"];
      },
      "uu.url('http://example.com/dir/file.ext') は URL をパースする": function(uu) {
        return [
          uu.url('http://example.com/dir/file.ext'), "==", {
            url:    "http://example.com/dir/file.ext",
            scheme: "http",
            domain: "example.com",
            port:   "",
            base:   "http://example.com/dir/",
            path:   "/dir/file.ext",
            dir:    "/dir/",
            file:   "file.ext",
            query:  "",
            hash:   {},
            fragment: ""
          }
        ];
      },
      "uu.url(uu.url('http://example.com/dir/file.ext')) は URL をパースしてリビルドする": function(uu) {
        return [
          uu.url({
            url:    "http://example.com/dir/file.ext",
            scheme: "http",
            domain: "example.com",
            port:   "",
            base:   "http://example.com/dir/",
            path:   "/dir/file.ext",
            dir:    "/dir/",
            file:   "file.ext",
            query:  "",
            hash:   {},
            fragment: ""
          }),
          "==", 'http://example.com/dir/file.ext'
        ];
      },
      "uu.url('http://example.com:8080/dir/file.ext?key=val&key2=val2#frag') も パースできる": function(uu) {
        return [
          uu.url('http://example.com:8080/dir/file.ext?key=val&key2=val2#frag'), "==", {
            url:    "http://example.com:8080/dir/file.ext?key=val;key2=val2#frag",
            scheme: "http",
            domain: "example.com",
            port:   "8080",
            base:   "http://example.com:8080/dir/",
            path:   "/dir/file.ext",
            dir:    "/dir/",
            file:   "file.ext",
            query:  "key=val;key2=val2",
            hash:   { key: "val", key2: "val2" },
            fragment: "frag"
          }
        ];
      },
    "uu.url.abs()": "",
      "uu.url.abs('../dir/file.ext') は 相対URL を絶対URLに変換する": function(uu) {
        return [uu.url.abs('../dir/file.ext'), "is string"];
      },
    "uu.url.dir()": "",
      "uu.url.dir('../dir/file.ext') はディレクトリパスを取得する(file.ext を切り落とす)": function(uu) {
        return [uu.url.dir('../dir/'), "is string"];
      },
    "uu.url.parse()": "",
      "uu.url.parse('../dir/file.ext') は, uu.url('../dir/file.ext') と同じ結果になる": function(uu) {
        return [uu.url.parse('../dir/file.ext'), "==", uu.url('../dir/file.ext')];
      },
    "uu.url.build()": "",
      "uu.url.build(uu.url('../dir/file.ext')) は, uu.url(uu.url('../dir/file.ext')) と同じ結果になる": function(uu) {
        return [uu.url.build(uu.url('../dir/file.ext')), "==", uu.url(uu.url('../dir/file.ext'))];
      },
    "uu.qs()": "",
      "uu.qs('http://example.com:8080/dir/file.ext?key=val&key2=val2#frag') は URL から QueryString を取り出しパースする": function(uu) {
        return [
          uu.qs('http://example.com:8080/dir/file.ext?key=val&key2=val2#frag'), "==", { key: "val", key2: "val2" },
        ];
      },
      "uu.qs('key=val&amp;key2=val2') を QueryString としてパースする": function(uu) {
        return [
          uu.qs('key=val&amp;key2=val2'), "==", { key: "val", key2: "val2" },
        ];
      },
      "uu.qs('key=val&key2=val2') を QueryString としてパースする": function(uu) {
        return [
          uu.qs('key=val&key2=val2'), "==", { key: "val", key2: "val2" },
        ];
      },
      "uu.qs('key=val;key2=val2') を QueryString としてパースする": function(uu) {
        return [
          uu.qs('key=val;key2=val2'), "==", { key: "val", key2: "val2" },
        ];
      },

      "uu.qs('key=val&key2=val2#frag') はパースに失敗する": function(uu) {
        return [
          uu.qs('key=val&key2=val2#frag'), "!=", { key: "val", key2: "val2" },
        ];
      },
      "uu.qs({ key: \"val\", key2: \"val2\" }) を QueryString としてビルドする": function(uu) {
        return [
          uu.qs({ key: "val", key2: "val2" }), "==", 'key=val;key2=val2',
        ];
      },
    "uu.qs.amp()": "",
      "uu.qs.amp('key=val;key2=val2') は 'key=val&key2=val2' に変換される": function(uu) {
        return [uu.qs.amp('key=val;key2=val2'), "==", 'key=val&key2=val2'];
      },
      "uu.qs.amp('key=val;key2=val2', 1) は 'key=val&amp;key2=val2' に変換される": function(uu) {
        return [uu.qs.amp('key=val;key2=val2', 1), "==", 'key=val&amp;key2=val2'];
      },


    "End Of Test": ""
  }, 1);
}
</script></body></html>
